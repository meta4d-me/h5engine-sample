var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var demoList = /** @class */ (function () {
    function demoList() {
    }
    demoList.addBtn = function (title, demo) {
        if (!title || !demo)
            return;
        var p = [title, demo];
        this.funArr.push(p);
    };
    demoList.prototype.start = function (app) {
        demoList.funArr.forEach(function (element) {
            main.instance.addBtn(element[0], element[1]);
        });
    };
    demoList.prototype.update = function () {
    };
    demoList.funArr = [];
    return demoList;
}());
var demo_ScreenSplit = /** @class */ (function () {
    function demo_ScreenSplit() {
        this.cameraCurseHover = 0;
        this.windowRate = 0.5;
        this.windowHorizon = true;
        this.mouseOver = false;
        this.mouseEnter = false;
        this.mouseDown = false;
        this.mouseMove = false;
        this.timer = 0;
        this.movetarget = new m4m.math.vector3();
        this.pointDown = false;
    }
    demo_ScreenSplit.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.inputMgr = this.app.getInputMgr();
        this.scene = this.app.getScene();
        Test_CameraController.instance().init(this.app);
        this.outcontainer = document.getElementById("drawarea");
        var cuber;
        console.warn("Finish it.");
        //添加一个盒子
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = 10;
        cube.localScale.y = 0.1;
        cube.localScale.z = 10;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        var smesh = this.app.getAssetMgr().getDefaultMesh("pyramid");
        mesh.mesh = (this.app.getAssetMgr().getDefaultMesh("cube"));
        var renderer = cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        cube.markDirty();
        cuber = renderer;
        this.cube = cube;
        {
            this.cube2 = new m4m.framework.transform();
            this.cube2.name = "cube2";
            this.scene.addChild(this.cube2);
            this.cube2.localScale.x = this.cube2.localScale.y = this.cube2.localScale.z = 1;
            this.cube2.localTranslate.x = -5;
            this.cube2.markDirty();
            var mesh = this.cube2.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube2.gameObject.addComponent("meshRenderer");
            var coll = this.cube2.gameObject.addComponent("spherecollider");
            coll.center = new m4m.math.vector3(0, 1, 0);
            coll.radius = 1;
            //---------------------baocuo
            //this.cube2.gameObject.addComponent("frustumculling") as m4m.framework.frustumculling;
        }
        this.cube3 = this.cube2.clone();
        this.scene.addChild(this.cube3);
        {
            this.cube3 = new m4m.framework.transform();
            this.cube3.name = "cube3";
            this.scene.addChild(this.cube3);
            this.cube3.localScale.x = this.cube3.localScale.y = this.cube3.localScale.z = 1;
            this.cube3.localTranslate.x = -5;
            this.cube3.markDirty();
            var mesh = this.cube3.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube3.gameObject.addComponent("meshRenderer");
            var coll = this.cube3.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        {
            this.cube4 = new m4m.framework.transform();
            this.cube4.name = "cube4";
            this.scene.addChild(this.cube4);
            this.cube4.localScale.x = this.cube4.localScale.y = this.cube4.localScale.z = 1;
            this.cube4.localTranslate.x = 5;
            this.cube4.markDirty();
            var mesh = this.cube4.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube4.gameObject.addComponent("meshRenderer");
            var coll = this.cube4.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        //添加1号摄像机
        {
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 100;
            //this.camera.backgroundColor=new m4m.math.color(1,0,0,0);
            objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
            objCam.lookat(this.cube);
            this.camera.viewport = new m4m.math.rect(0, 0, 0.5, 1);
            console.log("this camera: " + this.camera.viewport);
            objCam.markDirty(); //标记为需要刷新      
        }
        {
            //添加2号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false; //因为以clearcolor，上一个camera就白画了，所以不能clear
            _camera.order = 2; //默认oder，order越大的camera就越在后边进行画
            objCam2.localTranslate = new m4m.math.vector3(0, 10, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0.5, 0, 0.5, 1);
            objCam2.markDirty(); //标记为需要刷新
            this.camera1 = _camera;
            this.app.webgl.canvas.addEventListener("mousemove", function (ev) {
                var screenRect = _this.outcontainer.getBoundingClientRect();
                var xRate = ev.clientX / screenRect.width;
                var yRate = ev.clientY / screenRect.height;
                console.log("ev.clintY  " + ev.clientY); //跟浏览器上显示的像素值的匹配
                console.log("this.inputMgr.point.y " + _this.inputMgr.point.y); //跟浏览器上显示的像素值不匹配
                if (_this.windowHorizon) {
                    if (xRate < _this.windowRate) {
                        _this.targetCamera = _this.camera;
                        _this.cameraCurseHover = 0;
                    }
                    else {
                        _this.targetCamera = _camera;
                        _this.cameraCurseHover = 1;
                    }
                }
                else {
                    if (yRate < _this.windowRate) {
                        _this.targetCamera = _this.camera;
                        _this.cameraCurseHover = 0;
                    }
                    else {
                        _this.targetCamera = _camera;
                        _this.cameraCurseHover = 1;
                    }
                }
                Test_CameraController.instance().decideCam(_this.targetCamera);
            });
        }
        var boundRect = this.outcontainer.getBoundingClientRect(); //这个跟浏览器显示出来的边框像素是一致的
        console.log("this boundRect width and " + boundRect.width + "  " + boundRect.height);
        {
            //添加分割线             
            var splitline = document.createElement("div");
            this.splitline = splitline;
            splitline.style.height = boundRect.height + "px";
            splitline.style.width = "6px";
            splitline.style.position = "absolute";
            splitline.style.top = "0px";
            splitline.style.left = boundRect.width / 2 - 3 + "px";
            splitline.style.zIndex = "6";
            splitline.style.background = "#cccccc";
            this.mouseEnter = false;
            this.mouseDown = false;
            this.mouseMove = false;
            this.mouseOver = false;
            splitline.onmouseenter = function (e) {
                _this.mouseEnter = true;
                if (_this.windowHorizon) {
                    splitline.style.cursor = "e-resize";
                }
                else {
                    splitline.style.cursor = "n-resize";
                }
            };
            splitline.onmouseover = function (e) {
                _this.mouseOver = true;
            };
            splitline.onmouseleave = function (e) {
                _this.mouseOver = false;
            };
            this.app.container.addEventListener("mousedown", function (e) {
                if (_this.mouseOver)
                    _this.mouseDown = true;
            }, false);
            this.app.container.addEventListener("mouseup", function (e) {
                _this.mouseDown = false;
                _this.mouseEnter = false;
                _this.mouseMove = false;
            }, false);
            this.app.container.addEventListener("mousemove", function (e) {
                _this.mouseMove = true;
                if (_this.mouseEnter) {
                    if (_this.mouseDown) {
                        var screenRect = _this.outcontainer.getBoundingClientRect();
                        var xRate = e.clientX / screenRect.width;
                        var yRate = e.clientY / screenRect.height; //YRate 左下角是坐标原点
                        console.log("e.clientY Test" + e.clientY);
                        if (_this.windowHorizon) {
                            _this.splitline.style.left = e.clientX - 3 + "px";
                            _this.windowRate = xRate;
                            _this.camera.viewport = new m4m.math.rect(0, 0, _this.windowRate, 1);
                            _this.camera1.viewport = new m4m.math.rect(_this.windowRate, 0, 1 - _this.windowRate, 1);
                            _this.splitline.style.cursor = "e-resize";
                        }
                        else {
                            splitline.style.top = e.clientY - 3 + "px";
                            _this.windowRate = yRate;
                            // this.camera.viewport=new m4m.math.rect(0,1-this.windowRate,1,this.windowRate);
                            // this.camera1.viewport=new m4m.math.rect(0,0,1,1-this.windowRate);   
                            _this.camera.viewport = new m4m.math.rect(0, 1 - _this.windowRate, 1, _this.windowRate);
                            _this.camera1.viewport = new m4m.math.rect(0, 0, 1, 1 - _this.windowRate);
                            _this.splitline.style.cursor = "n-resize";
                        }
                    }
                }
            }, false);
            this.app.container.appendChild(splitline);
        }
        {
            //添加button
            var button1 = document.createElement("button");
            button1.textContent = "横屏/竖屏";
            button1.onclick = function (e) {
                var screenRect = _this.outcontainer.getBoundingClientRect();
                _this.windowHorizon = _this.windowHorizon ? false : true;
                if (_this.windowHorizon) {
                    _this.splitline.style.height = screenRect.height + "px";
                    _this.splitline.style.width = "6px";
                    _this.splitline.style.left = screenRect.width * _this.windowRate - 3 + "px";
                    _this.splitline.style.top = "0px";
                    _this.camera.viewport = new m4m.math.rect(0, 0, _this.windowRate, 1);
                    _this.camera1.viewport = new m4m.math.rect(_this.windowRate, 0, 1 - _this.windowRate, 1);
                }
                else {
                    _this.splitline.style.height = "6px";
                    _this.splitline.style.width = screenRect.width + "px";
                    _this.splitline.style.left = "0px";
                    splitline.style.top = screenRect.height * _this.windowRate - 3 + "px";
                    _this.camera.viewport = new m4m.math.rect(0, 1 - _this.windowRate, 1, _this.windowRate);
                    _this.camera1.viewport = new m4m.math.rect(0, 0, 1, 1 - _this.windowRate);
                    // this.camera.viewport=new m4m.math.rect(0,1-this.windowRate,1,this.windowRate);
                    // this.camera1.viewport=new m4m.math.rect(0,0,1,1-this.windowRate);   
                }
            };
            button1.style.top = "130px";
            button1.style.position = "absolute";
            this.app.container.appendChild(button1);
        }
        this.cube.localTranslate;
    };
    demo_ScreenSplit.prototype.update = function (delta) {
        Test_CameraController.instance().update(delta);
        var screenRect = this.outcontainer.getBoundingClientRect();
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            var ray;
            if (this.windowHorizon) {
                if (this.cameraCurseHover == 0) {
                    ray = this.targetCamera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
                }
                else if (this.cameraCurseHover == 1) {
                    ray = this.targetCamera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x - this.app.webgl.canvas.width * this.windowRate, this.inputMgr.point.y), this.app);
                }
            }
            else {
                if (this.cameraCurseHover == 0) {
                    //第二种，左上角原点 createByscren 
                    ray = this.targetCamera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
                }
                else if (this.cameraCurseHover == 1) {
                    //第二种，左上角原点
                    ray = this.targetCamera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y - this.app.webgl.canvas.height * this.windowRate), this.app);
                }
            }
            console.log("inputMgr.point: " + new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y));
            var tempinfo = m4m.math.pool.new_pickInfo();
            var bool = this.scene.pick(ray, tempinfo);
            if (bool) {
                m4m.math.vec3Clone(tempinfo.hitposition, this.movetarget);
                this.timer = 0;
            }
            m4m.math.pool.delete_pickInfo(tempinfo);
        }
        this.pointDown = this.inputMgr.point.touch;
        var tv = new m4m.math.vector3();
        //m4m.math.vec3SLerp(this.cube2.localTranslate, this.movetarget, this.timer, this.cube2.localTranslate);
        this.cube2.localTranslate = this.movetarget;
        this.cube2.markDirty();
        if (this.cube3.gameObject.getComponent("boxcollider").intersectsTransform(this.cube4)) {
            return;
        }
        this.timer += delta;
        this.cube3.localTranslate.x += delta;
        this.cube3.markDirty();
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate.x += delta;
        // objCam.markDirty();
        var tv = new m4m.math.vector3();
        m4m.math.vec3SLerp(this.cube2.localTranslate, this.movetarget, this.timer, this.cube2.localTranslate);
        //this.cube2.localTranslate = this.movetarget;
        this.cube2.markDirty();
    };
    return demo_ScreenSplit;
}());
var demo_navigaionRVO = /** @class */ (function () {
    function demo_navigaionRVO() {
        this.cubesize = 0.5;
        this.rvoMgr = new m4m.framework.RVOManager(); // RVO Manager
        this.isInitPlayer = false;
        //----------- player 移动控制 ----------------
        // private moveSpeed = 0.2;
        // private cal2dDir(oPos:m4m.math.vector3,tPos:m4m.math.vector3,out:m4m.math.vector2){
        //     if(!oPos || !tPos || !out)  return;
        //     let ov2 = m4m.math.pool.new_vector2();
        //     ov2.x = oPos.x; ov2.y = oPos.z;
        //     let tv2 = m4m.math.pool.new_vector2();
        //     tv2.x = tPos.x; tv2.y = tPos.z;
        //     m4m.math.vec2Subtract(tv2,ov2,out);
        //     m4m.math.pool.delete_vector2(ov2);
        //     m4m.math.pool.delete_vector2(tv2);
        // }
        // private currGoal:m4m.math.vector3;
        // private lastGoal:m4m.math.vector3;
        this.Goals = [];
        this.enemys = [];
        this.pos = [];
        this.points = [];
        this.timer = 0;
        this.bere = false;
        this.isAKeyDown = false;
        this.pointDown = false;
    }
    demo_navigaionRVO.prototype.start = function (app) {
        var _this = this;
        demo_navigaionRVO.TestRVO = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.inputMgr = this.app.getInputMgr();
        this.assetMgr = app.getAssetMgr();
        this.app.closeFps();
        //说明
        var descr = document.createElement("p");
        descr.textContent = "\u63D0\u793A: \n \u6309\u4F4F\u952E\u76D8 A \u952E\uFF0C\u70B9\u51FB navmesh \u53EF\u6DFB\u52A0\u654C\u4EBA\uFF01";
        descr.style.top = 0 + "px";
        descr.style.left = 0 + "px";
        descr.style.position = "absolute";
        this.app.container.appendChild(descr);
        var names = ["MainCity_", "testnav", "city", "1042_pata_shenyuan_01", "1030_huodongchuangguan", "xinshoucun_fuben_day", "chuangjue-01"];
        var name = names[0];
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.loadScene(name);
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.far = 10000;
        objCam.localTranslate = new m4m.math.vector3(0, 100, 0);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
        CameraController.instance().init(this.app, this.camera);
        this.navmeshMgr = m4m.framework.NavMeshLoadManager.Instance;
        // this.sim.processObstacles();
        this.addbtn("50px", "打开 RVO", function () {
            _this.rvoMgr.enable(); // 打开 RVO
        });
        this.addbtn("100px", "关闭 RVO", function () {
            _this.rvoMgr.disable(); // 关闭 RVO
        });
        this.addbtn("150px", "删除元素", function () {
        });
    };
    demo_navigaionRVO.prototype.initPlayer = function (x, y, z) {
        if (this.isInitPlayer)
            return;
        this.player = this.generateGeomtry("cylinder", new m4m.math.vector4(0, 1, 0.2, 1));
        this.player.localTranslate.x = x;
        this.player.localTranslate.y = y;
        this.player.localTranslate.z = z;
        this.player.localScale.x = this.player.localScale.z = 2;
        this.player.markDirty();
        this.isInitPlayer = true;
        // Add agent
        this.rvoMgr.addAgent(Math.round(Math.random() * 100), this.player, 1, 0, 0.2); // 添加玩家
        // this.mods = this.rvoMgr.transforms;
        // this.goals = this.rvoMgr.goals;
        // this.sim.addAgent([x, z]);
        // this.sim.agents[0].radius = 1;
        // this.sim.agents[0].neighborDist = 0;    // 玩家不会被小怪挤
        // this.sim.agents[0].maxSpeed = 0.2;
        // this.sim.agents[0].timeHorizon = 5;
        // this.sim.agents[0].timeHorizonObst = 20;
        // this.mods.push(this.player);
        // this.goals.push([x, z]);
    };
    demo_navigaionRVO.prototype.loadScene = function (assetName, isCompress) {
        var _this = this;
        if (isCompress === void 0) { isCompress = false; }
        var addScene = function () {
            var beAddScene = false;
            if (beAddScene) {
                var _scene = _this.app.getAssetMgr().getAssetByName(assetName + ".scene.json");
                var _root = _scene.getSceneRoot();
                _root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
                _root.markDirty();
                _this.app.getScene().lightmaps = [];
                _scene.useLightMap(_this.app.getScene());
                // _scene.useFog(this.app.getScene());
                _this.scene.addChild(_root);
            }
            _this.navmeshMgr.loadNavMesh("res/navmesh/".concat(assetName, ".nav.json"), _this.app, function (s) {
                if (s.iserror) {
                    console.error(" ".concat(s.errs, " "));
                    return;
                }
                console.error("scene navmesh : ".concat(assetName, "  is loaded"));
                var mtr = new m4m.framework.material("navmesh_mtr");
                var ass = _this.app.getAssetMgr();
                var sdr = ass.getShader("diffuse.shader.json");
                mtr.setShader(sdr);
                _this.navmeshMgr.showNavmesh(true, mtr);
                console.error(_this.navmeshMgr.navMesh);
                var cc = false;
                if (cc)
                    return;
            });
        };
        if (isCompress) {
            this.app.getAssetMgr().loadCompressBundle("res/scenes/".concat(assetName, "/").concat(assetName, ".packs.txt"), function (s) {
                if (s.isfinish) {
                    //if (s.bundleLoadState & m4m.framework.AssetBundleLoadState.Scene && !isloaded)
                    {
                        addScene();
                    }
                }
            });
        }
        else {
            this.app.getAssetMgr().load("res/scenes/".concat(assetName, "/").concat(assetName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                if (s1.isfinish) {
                    addScene();
                }
            });
        }
    };
    //----------- 点击navmesh处理 ----------------
    demo_navigaionRVO.prototype.PosRayNavmesh = function (oPos) {
        if (!this.navmeshMgr.navMesh || !this.navmeshMgr.navTrans)
            return;
        var pickinfo = new m4m.framework.pickinfo();
        var mesh = this.navmeshMgr.navMesh;
        var ray = new m4m.framework.ray(new m4m.math.vector3(oPos.x, oPos.y + 500, oPos.z), new m4m.math.vector3(0, -1, 0));
        var bool = mesh.intersects(ray, this.navmeshMgr.navTrans.getWorldMatrix(), pickinfo);
        if (!bool)
            return;
        return pickinfo.hitposition;
    };
    demo_navigaionRVO.prototype.pickDown = function () {
        if (this.isAKeyDown) {
            //添加 敌人
            this.addEnemy();
        }
        else {
            //player寻路
            this.tryFindingPath();
        }
    };
    demo_navigaionRVO.prototype.rayNavMesh = function () {
        var navTrans = this.navmeshMgr.navTrans;
        var navmesh = this.navmeshMgr.navMesh;
        if (navmesh == null)
            return;
        var inputMgr = this.app.getInputMgr();
        var ray = this.camera.creatRayByScreen(new m4m.math.vector2(inputMgr.point.x, inputMgr.point.y), this.app);
        var pickinfo = new m4m.framework.pickinfo();
        var bool = navmesh.intersects(ray, navTrans.getWorldMatrix(), pickinfo);
        if (!bool)
            return;
        //console.error(pickinfo.hitposition);
        return pickinfo.hitposition;
    };
    demo_navigaionRVO.prototype.addEnemy = function () {
        var endPos = this.rayNavMesh();
        if (!endPos)
            return;
        var trans = this.generateGeomtry("cylinder", new m4m.math.vector4(1, 0, 0, 1));
        if (!trans)
            return;
        this.enemys.push(trans);
        this.scene.addChild(trans);
        trans.localTranslate.x = endPos.x;
        trans.localTranslate.y = endPos.y;
        trans.localTranslate.z = endPos.z;
        trans.markDirty();
        // Add agent
        this.rvoMgr.addAgent(Math.round(Math.random() * 100), trans, 0.5, 3, 0.05); // 添加小怪
        // this.sim.addAgent([endPos.x, endPos.z]);
        // this.goals.push([endPos.x, endPos.z]);
        // this.mods.push(trans);
    };
    demo_navigaionRVO.prototype.tryFindingPath = function () {
        var endPos = this.rayNavMesh();
        if (!endPos)
            return;
        if (this.player) {
            var v3 = m4m.math.pool.new_vector3();
            m4m.math.vec3Clone(this.player.localTranslate, v3);
            var temp = this.PosRayNavmesh(this.player.localTranslate);
            if (temp) {
                m4m.math.vec3Clone(temp, v3);
            }
            this.pos.push(v3);
        }
        else {
            //初始化玩家
            if (!this.isInitPlayer)
                this.initPlayer(endPos.x, endPos.y, endPos.z);
        }
        this.pos.push(endPos);
        // let points = this.navMeshLoader.moveToPoints(startPos, endPos);
        if (this.pos.length > 1) {
            var arr = this.navmeshMgr.moveToPoints(this.pos.pop(), this.pos.pop());
            if (!arr)
                return;
            this.pos.length = 0;
            var color = new m4m.math.color(1, 0, 0, 0.5);
            this.createAllPoint(arr.length);
            for (var i = 0; i < arr.length; i++) {
                var p = arr[i];
                this.setRoadPoint(i, p.x, p.y, p.z, color);
            }
            this.drawLine(arr);
            if (this.Goals) {
                this.Goals.forEach(function (g) {
                    if (g)
                        m4m.math.pool.delete_vector3(g);
                });
            }
            // this.Goals.length = 0;
            // this.Goals = arr;
            // this.rvoMgr.currGoal = this.Goals.pop(); // 初始化玩家当前目标点
            this.rvoMgr.setRoadPoints(arr);
        }
    };
    demo_navigaionRVO.prototype.drawLine = function (points) {
        if (this.lastLine) {
            this.lastLine.gameObject.visible = false;
            this.lastLine.markDirty();
            if (this.lastLine.parent)
                this.lastLine.parent.removeChild(this.lastLine);
            this.lastLine.dispose();
        }
        var mesh = this.genLineMesh(points);
        this.lastLine = new m4m.framework.transform();
        var mf = this.lastLine.gameObject.addComponent("meshFilter");
        mf.mesh = mesh;
        //mesh.glMesh.lineMode = WebGL2RenderingContext.LINE_STRIP;
        this.lastLine.gameObject.addComponent("meshRenderer");
        this.lastLine.localTranslate.x = this.lastLine.localTranslate.y = this.lastLine.localTranslate.z = 0;
        this.scene.addChild(this.lastLine);
        this.lastLine.markDirty();
    };
    demo_navigaionRVO.prototype.genLineMesh = function (points) {
        var meshD = new m4m.render.meshData();
        meshD.pos = [];
        meshD.color = [];
        meshD.trisindex = [];
        for (var i = 0; i < points.length; i++) {
            var pos = points[i];
            meshD.pos.push(new m4m.math.vector3(pos.x, pos.y + (this.cubesize / 2), pos.z));
            meshD.trisindex.push(i);
            meshD.color.push(new m4m.math.color(1, 0, 0, 1));
        }
        var _mesh = new m4m.framework.mesh();
        _mesh.data = meshD;
        var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Color;
        var v32 = _mesh.data.genVertexDataArray(vf);
        var i16 = _mesh.data.genIndexDataArray();
        _mesh.glMesh = new m4m.render.glMesh();
        _mesh.glMesh.initBuffer(this.app.webgl, vf, _mesh.data.pos.length);
        _mesh.glMesh.uploadVertexSubData(this.app.webgl, v32);
        _mesh.glMesh.addIndex(this.app.webgl, i16.length);
        _mesh.glMesh.uploadIndexSubData(this.app.webgl, 0, i16);
        _mesh.glMesh.initVAO();
        _mesh.submesh = [];
        {
            var sm = new m4m.framework.subMeshInfo();
            sm.matIndex = 0;
            sm.start = 0;
            sm.size = i16.length;
            sm.line = true;
            _mesh.submesh.push(sm);
        }
        return _mesh;
    };
    demo_navigaionRVO.prototype.createAllPoint = function (count) {
        this.points.forEach(function (element) {
            if (element)
                element.gameObject.visible = false;
        });
        var need = count - this.points.length;
        if (need > 0) {
            for (var i = 0; i < need; i++) {
                var G3D = this.generateGeomtry("cube", new m4m.math.vector4(0, 0, 1, 1));
                this.points.push(G3D);
                G3D.localScale.x = G3D.localScale.y = G3D.localScale.z = this.cubesize;
            }
        }
    };
    demo_navigaionRVO.prototype.setRoadPoint = function (index, x, y, z, color) {
        var cube = this.points[index];
        cube.localTranslate.x = x;
        cube.localTranslate.y = y;
        cube.localTranslate.z = z;
        cube.markDirty();
        var mf = cube.gameObject.getComponent("meshFilter");
        if (mf.mesh.data.color == null)
            mf.mesh.data.color = [];
        mf.mesh.data.color.forEach(function (c) {
            if (c) {
                c.r = color.r;
                c.g = color.g;
                c.b = color.b;
                c.a = color.a;
            }
        });
        var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Tangent | m4m.render.VertexFormatMask.Color | m4m.render.VertexFormatMask.UV0;
        var v32 = mf.mesh.data.genVertexDataArray(vf);
        mf.mesh.glMesh.uploadVertexSubData(this.app.webgl, v32);
        cube.gameObject.visible = true;
    };
    demo_navigaionRVO.prototype.generateGeomtry = function (meshType, color) {
        if (meshType === void 0) { meshType = "cube"; }
        if (color === void 0) { color = null; }
        var G3D = new m4m.framework.transform;
        var mf = G3D.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh(meshType);
        var mr = G3D.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        mr.materials[0] = new m4m.framework.material("mat");
        //mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        mr.materials[0].setShader(this.assetMgr.getShader("diffuse.shader.json"));
        mr.materials[0].setTexture("_MainTex", this.assetMgr.getDefaultTexture("white"));
        if (color)
            mr.materials[0].setVector4("_MainColor", color);
        this.scene.addChild(G3D);
        return G3D;
    };
    demo_navigaionRVO.prototype.update = function (delta) {
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            this.pickDown();
        }
        this.pointDown = this.inputMgr.point.touch;
        if (this.inputMgr.GetKeyDown(65)) {
            this.isAKeyDown = true;
        }
        else {
            this.isAKeyDown = false;
        }
        this.timer += delta;
        CameraController.instance().update(delta);
        this.rvoMgr.update(); // 更新 Transform
    };
    demo_navigaionRVO.prototype.addbtn = function (topOffset, textContent, func) {
        var _this = this;
        var btn = document.createElement("button");
        btn.style.top = topOffset;
        btn.style.position = "fixed";
        btn.style.border = "none";
        btn.style.height = "32px";
        btn.style.borderRadius = "16px";
        btn.style.cursor = "pointer";
        btn.style.margin = "32px";
        btn.style.minWidth = "80px";
        this.app.container.appendChild(btn);
        btn.textContent = textContent;
        btn.onclick = function () {
            _this.camera.postQueues = [];
            func();
            console.log("Handle Clicking..." + textContent);
        };
    };
    return demo_navigaionRVO;
}());
/**
 * 加载动作的dome
*/
var dome_loadaniplayer = /** @class */ (function () {
    function dome_loadaniplayer() {
        this.taskmgr = new m4m.framework.taskMgr();
        //角色名
        this.roleName = "pc2";
        //武器名
        this.weaponName = "wp_ds_001";
        //技能名,动作名
        this.skillName = "pc2_cskill1.FBAni.aniclip.bin";
        this.names = ["pc2_cskill1.FBAni.aniclip.bin", "pc2_skill1.FBAni.aniclip.bin", "pc2_skill34.FBAni.aniclip.bin", "pc2_skill27.FBAni.aniclip.bin", "pc1_skill27.FBAni.aniclip.bin"];
    }
    dome_loadaniplayer.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    dome_loadaniplayer.prototype.loadRole = function (laststate, state) {
        var _this = this;
        var name = this.roleName;
        //加载人物资源
        this.app.getAssetMgr().load("res/prefabs/roles/".concat(name, "/").concat(name, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                //通过prefab拿到任务的transform
                var p = _this.assetmgr.getAssetByName("".concat(name, ".prefab.json"));
                _this.role = p.getCloneTrans();
                _this.ani = _this.role.gameObject.getComponent("aniplayer");
                _this.ani.autoplay = false;
                _this.scene.addChild(_this.role);
                _this.role.markDirty();
                if (_this.weaponName) {
                    //加载武器
                    _this.loadWeapon(_this.weaponName);
                }
                if (_this.skillName) {
                    //加载指定动作
                    _this.loadSkill(_this.skillName);
                }
                state.finish = true;
            }
        });
    };
    dome_loadaniplayer.prototype.loadSkill = function (name) {
        this.assetmgr.load("res/prefabs/roles/".concat(this.roleName, "/Resources/").concat(name), m4m.framework.AssetTypeEnum.Auto, function (s) {
            // if (s.isfinish) {
            //     let skill = this.assetmgr.getAssetByName(name) as m4m.framework.animationClip;
            //     //在aniplayer控件的 clipnames 中找到动作名为name动作的id
            //     let j = this.ani.clipnames[name];
            //     if (j != null) {
            //         //把动作的索引付给clips中与name对应的id中
            //         this.ani.clips[j] = skill;
            //     }
            // }
        });
    };
    dome_loadaniplayer.prototype.loadWeapon = function (name) {
        var _this = this;
        this.assetmgr.load("res/prefabs/weapons/".concat(name, "/").concat(name, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                var p = _this.assetmgr.getAssetByName("".concat(name, ".prefab.json"));
                var rhand = _this.role.find("Bip01 Prop1");
                var lhand = _this.role.find("Bip01 Prop2");
                if (rhand) {
                    var weapon = p.getCloneTrans();
                    rhand.addChild(weapon);
                    weapon.localRotate = new m4m.math.quaternion();
                    weapon.localTranslate = new m4m.math.vector3();
                    weapon.localScale = new m4m.math.vector3(1, 1, 1);
                    weapon.markDirty();
                }
                if (lhand) {
                    var weapon = p.getCloneTrans();
                    lhand.addChild(weapon);
                    weapon.localRotate = new m4m.math.quaternion();
                    weapon.localTranslate = new m4m.math.vector3();
                    weapon.localScale = new m4m.math.vector3(1, 1, 1);
                    weapon.markDirty();
                }
            }
        });
    };
    //初始化操作按钮
    dome_loadaniplayer.prototype.ctrlBtn = function (laststate, state) {
        var _this = this;
        var play = document.createElement("button");
        var stop = document.createElement("button");
        var playspeed = document.createElement("input");
        var sel = document.createElement("select");
        sel.value = sel.innerText = this.names[0];
        for (var i_1 = 0; i_1 < this.names.length; i_1++) {
            var op = document.createElement("option");
            op.value = op.innerText = this.names[i_1];
            sel.appendChild(op);
        }
        sel.onchange = function (e) {
            _this.loadSkill(_this.skillName = e.target.value);
        };
        sel.style.height = "20px";
        sel.style.width = "200px";
        sel.style.fontSize = "12px";
        sel.style.top = "150px";
        play.value = "PLAY";
        play.textContent = "PLAY";
        stop.value = "STOP";
        stop.textContent = "STOP";
        play.style.position = stop.style.position = playspeed.style.position = sel.style.position = "absolute";
        play.style.height = stop.style.height = playspeed.style.height = "30px";
        play.style.width = stop.style.width = playspeed.style.width = "100px";
        play.style.left = stop.style.left = playspeed.style.left = sel.style.left = "30px";
        play.style.top = "50px";
        stop.style.top = "85px";
        playspeed.style.top = "120px";
        playspeed.type = "text";
        playspeed.value = "1.0";
        var speed = 1.0;
        playspeed.style.height;
        playspeed.onchange = function () {
            var num = parseFloat(playspeed.value);
            if (isNaN(num)) {
                playspeed.value = speed + "";
            }
            else {
                speed = num;
            }
        };
        var i = 0;
        play.onclick = function () {
            //this.ani.stop();
            _this.ani.play(_this.skillName);
            var ap = _this.ani;
            if (ap.haveClip(_this.skillName)) {
                ap.play(_this.skillName);
                return;
            }
            var list = ap.awaitLoadClipNames();
            if (!list.indexOf(_this.skillName))
                return;
            var resPath = "res/prefabs/roles/".concat(_this.roleName, "/resources/");
            var cname = _this.skillName;
            ap.addClipByNameLoad(_this.app.getAssetMgr(), resPath, cname, function (sta, clipName) {
                if (sta.isfinish) {
                    var clip = ap.getClip(cname);
                    ap.play(cname);
                }
            });
        };
        stop.onclick = function () {
            _this.ani.stop();
        };
        this.app.container.appendChild(play);
        this.app.container.appendChild(stop);
        this.app.container.appendChild(playspeed);
        this.app.container.appendChild(sel);
        state.finish = true;
    };
    //初始化摄像机
    dome_loadaniplayer.prototype.addCam = function (laststate, state) {
        var objCam = new m4m.framework.transform;
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        camera.near = 0.01;
        camera.far = 2000;
        camera.fov = Math.PI * 0.3;
        camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
        objCam.localTranslate = new m4m.math.vector3(5, 5, 5);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty();
        state.finish = true;
    };
    dome_loadaniplayer.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        this.assetmgr = app.getAssetMgr();
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadShader.bind(this));
        this.taskmgr.addTaskCall(this.loadRole.bind(this));
        this.taskmgr.addTaskCall(this.ctrlBtn.bind(this));
        this.taskmgr.addTaskCall(this.addCam.bind(this));
    };
    dome_loadaniplayer.prototype.update = function (delta) {
        this.taskmgr.move(delta);
    };
    return dome_loadaniplayer;
}());
var t;
(function (t) {
    var light_d1 = /** @class */ (function () {
        function light_d1() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        light_d1.prototype.addcube = function () {
            var smesh1 = this.app.getAssetMgr().getDefaultMesh("cube");
            for (var i = -4; i < 5; i++) {
                for (var j = -4; j < 5; j++) {
                    var baihu = new m4m.framework.transform();
                    this.scene.addChild(baihu);
                    baihu.localScale = new m4m.math.vector3(0.5, 0.5, 0.5);
                    baihu.localTranslate.x = i;
                    baihu.localTranslate.y = j;
                    //m4m.math.quatFromEulerAngles(-90, 0, 0, baihu.localRotate);
                    baihu.markDirty();
                    // var smesh1 = this.app.getAssetMgr().getAssetByName("Sphere.mesh.bin") as m4m.framework.mesh;
                    var mesh1 = baihu.gameObject.addComponent("meshFilter");
                    mesh1.mesh = (smesh1);
                    var renderer = baihu.gameObject.addComponent("meshRenderer");
                    baihu.markDirty();
                    var sh = this.app.getAssetMgr().getShader("light3.shader.json");
                    renderer.materials = [];
                    renderer.materials.push(new m4m.framework.material());
                    renderer.materials[0].setShader(sh);
                    var texture = this.app.getAssetMgr().getAssetByName("rock256.png");
                    renderer.materials[0].setTexture("_MainTex", texture);
                    var tex2 = this.app.getAssetMgr().getAssetByName("rock_n256.png");
                    renderer.materials[0].setTexture("_NormalTex", tex2);
                }
            }
        };
        light_d1.prototype.addCameraAndLight = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 30;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
            {
                var cube = new m4m.framework.transform();
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                lighttran.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
            }
        };
        light_d1.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var btn = document.createElement("button");
            btn.textContent = "切换光源类型";
            btn.onclick = function () {
                if (_this.light != null) {
                    if (_this.light.type == m4m.framework.LightTypeEnum.Direction) {
                        _this.light.type = m4m.framework.LightTypeEnum.Point;
                        console.log("点光源");
                    }
                    else if (_this.light.type == m4m.framework.LightTypeEnum.Point) {
                        _this.light.type = m4m.framework.LightTypeEnum.Spot;
                        console.log("聚光灯");
                    }
                    else {
                        _this.light.type = m4m.framework.LightTypeEnum.Direction;
                        console.log("方向光");
                    }
                }
            };
            btn.style.top = "124px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            var texPath = "".concat(resRootPath, "texture/");
            util.loadShader(this.app.getAssetMgr())
                .then(function () { return Promise.all(["".concat(texPath, "zg256.png"), "".concat(texPath, "rock256.png"), "".concat(texPath, "rock_n256.png")].map(function (item) { return util.loadTex(item, _this.app.getAssetMgr()); })); })
                .then(function () { return _this.addcube(); })
                .then(function () { return _this.addCameraAndLight(); });
        };
        light_d1.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                objCam.localTranslate = new m4m.math.vector3(x2 * 5, 4, -z2 * 5);
                // objCam.markDirty();
                //objCam.updateWorldTran();
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty();
            }
            if (this.light != null) {
                var objlight = this.light.gameObject.transform;
                objlight.localTranslate = new m4m.math.vector3(x * 3, 3, z * 3);
                //objlight.updateWorldTran();
                objlight.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objlight.markDirty();
            }
        };
        return light_d1;
    }());
    t.light_d1 = light_d1;
})(t || (t = {}));
var localSave = /** @class */ (function () {
    function localSave() {
    }
    Object.defineProperty(localSave, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new localSave();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    localSave.prototype.stringToUtf8Array = function (str) {
        var bstr = [];
        for (var i = 0; i < str.length; i++) {
            var c = str.charAt(i);
            var cc = c.charCodeAt(0);
            if (cc > 0xFFFF) {
                throw new Error("InvalidCharacterError");
            }
            if (cc > 0x80) {
                if (cc < 0x07FF) {
                    var c1 = (cc >>> 6) | 0xC0;
                    var c2 = (cc & 0x3F) | 0x80;
                    bstr.push(c1, c2);
                }
                else {
                    var c1 = (cc >>> 12) | 0xE0;
                    var c2 = ((cc >>> 6) & 0x3F) | 0x80;
                    var c3 = (cc & 0x3F) | 0x80;
                    bstr.push(c1, c2, c3);
                }
            }
            else {
                bstr.push(cc);
            }
        }
        return bstr;
    };
    localSave.prototype.file_str2blob = function (string) {
        var u8 = new Uint8Array(this.stringToUtf8Array(string));
        var blob = new Blob([u8]);
        return blob;
    };
    localSave.prototype.file_u8array2blob = function (array) {
        var blob = new Blob([array]);
        return blob;
    };
    localSave.prototype.save = function (path, file) {
        var req = new XMLHttpRequest(); //ness
        //用同步方法，本地操作
        req.open("POST", this.localServerPath + "/hybirdapi/upload" + "?r=" + Math.random(), false);
        var fdata = new FormData();
        fdata.append("path", path);
        fdata.append("file", file);
        req.send(fdata);
        var json = JSON.parse(req.responseText);
        if (json["code"] != 0)
            throw new Error(json["error"]);
        return json["code"];
    };
    localSave.prototype.startDirect = function (exec, path, argc) {
        var req = new XMLHttpRequest(); //ness
        //用同步方法，本地操作
        req.open("GET", this.localServerPath + "/hybirdapi/startdirect" +
            "?exec=" + exec +
            "&path=" + path +
            "&argc=" + argc +
            "&r=" + Math.random(), false);
        req.send(null);
        var json = req.responseText;
        return json;
    };
    localSave.prototype.start = function (path) {
        var req = new XMLHttpRequest(); //ness
        //用同步方法，本地操作
        req.open("GET", this.localServerPath + "/hybirdapi/start?path=" + path + "&r=" + Math.random(), false);
        req.send(null);
        var json = req.responseText;
        return json;
    };
    localSave.prototype.startnowait = function (path, fun) {
        if (fun === void 0) { fun = null; }
        var req = new XMLHttpRequest(); //ness
        //用同步方法，本地操作
        req.open("GET", this.localServerPath + "/hybirdapi/start?path=" + path + "&r=" + Math.random(), true);
        req.onreadystatechange = function (ev) {
            if (req.readyState == 4) {
                if (req.status == 404) {
                    if (fun != null)
                        fun(null, new Error("got a 404:" + path));
                    return;
                }
                if (fun != null)
                    fun(req.responseText, null);
            }
        };
        req.onerror = function () {
            if (fun != null)
                fun(null, new Error("onerr in req:"));
        };
        req.send(null);
    };
    // load(path: string, fun: (_url: string, _txt: string, _err: Error) => void)
    // {
    //     let url = this.localServerPath + "/res/" + path;
    //     let req = new XMLHttpRequest();
    //     req.open("GET", url);
    //     //req.withCredentials = true;
    //     req.onreadystatechange = () =>
    //     {
    //         if (req.readyState == 4)
    //         {
    //             if (req.status == 404)
    //                 fun(url, null, new Error("onerr 404"));
    //             else
    //                 fun(url, req.responseText, null);
    //         }
    //     };
    //     req.onerror = () =>
    //     {
    //         fun(url, null, new Error("onerr in req:"));
    //     };
    //     req.send();
    // }
    localSave.prototype.loadTextImmediate = function (url, fun) {
        var req = new XMLHttpRequest();
        req.open("GET", url);
        //req.withCredentials = true;
        req.onreadystatechange = function () {
            if (req.readyState == 4) {
                if (req.status == 404) {
                    fun(null, new Error("got a 404:" + url));
                    return;
                }
                fun(req.responseText, null);
            }
        };
        req.onerror = function () {
            fun(null, new Error("onerr in req:"));
        };
        req.send();
    };
    localSave.prototype.loadBlobImmediate = function (url, fun) {
        var req = new XMLHttpRequest();
        req.open("GET", url);
        req.responseType = "blob"; //ie 一定要在open之后修改responseType
        req.onreadystatechange = function () {
            if (req.readyState == 4) {
                if (req.status == 404) {
                    fun(null, new Error("got a 404:" + url));
                    return;
                }
                fun(req.response, null);
            }
        };
        req.onerror = function () {
            fun(null, new Error("onerr in req:"));
        };
        req.send();
    };
    return localSave;
}());
//样例全局字段
/** 资源更路径 */
var resRootPath = "exampleResource/";
var UseOldTerrain = 1;
//需加上这个反射标记，引擎才能通过名字找到这个类，并自动创建他
var main = /** @class */ (function () {
    function main() {
        this.def_x = 0;
        this.def_y = 100;
        this.x = this.def_x;
        this.y = this.def_y;
        this.btns = [];
    }
    main_1 = main;
    main.prototype.onStart = function (app) {
        if (!main_1.instance)
            main_1.instance = this;
        console.log("i am here.");
        this.app = app;
        //关闭 guid 依赖
        m4m.framework.assetMgr.openGuid = false;
        //移动端调试
        if (window['eruda']) {
            setTimeout(function () {
                var _a;
                (_a = window['eruda']) === null || _a === void 0 ? void 0 : _a.init();
            }, 500);
        }
        this.clearBtn();
        // new HDR_sample().start(this.app);
        // return;
        //-------------------------------------基础
        this.addBtn("基础==>", function () {
            demoList.addBtn("最小demo", function () { return new mini_sample(); });
            demoList.addBtn("test_load", function () { return new test_load(); });
            demoList.addBtn("加载场景", function () { return new test_loadScene(); });
            demoList.addBtn("测试VR场景", function () { return new test_loadSceneVR(); });
            demoList.addBtn("射线检测", function () { return new test_pick_boxcollider(); });
            demoList.addBtn("test_pick", function () { return new test_pick(); });
            demoList.addBtn("test_sound", function () { return new t.test_sound(); });
            demoList.addBtn("f14effect 特效系统", function () { return new dome.db_test_f14eff(); });
            demoList.addBtn("test_anim", function () { return new test_anim(); });
            demoList.addBtn("关键帧动画", function () { return new test_keyFrameAni(); });
            demoList.addBtn("test_f4skin", function () { return new test_f4skin(); });
            demoList.addBtn("使用优化大小的动画", function () { return new test_optimize_size_animationClip(); });
            demoList.addBtn("skinMesh角色换装", function () { return new testReload(); });
            demoList.addBtn("物理2d_dome", function () { return new physic2d_dome(); });
            demoList.addBtn("导航网格", function () { return new test_navMesh(); });
            demoList.addBtn("GPU压缩纹理", function () { return new test_CompressTexture(); });
            demoList.addBtn("视频纹理", function () { return new test_videoTexture(); });
            demoList.addBtn("draco压缩网格格式加载", function () { return new test_load_draco(); });
            demoList.addBtn("骨骼动画", function () { return new test_animationClip(); });
            demoList.addBtn("GLTF_动画", function () { return new test_gltf_animation(); });
            demoList.addBtn("地形", function () { return new test_Heightmap_terrain(0); });
            demoList.addBtn("旧地形1", function () { return new test_Heightmap_terrain(1); });
            demoList.addBtn("旧地形2", function () { return new test_Heightmap_terrain(2); });
            demoList.addBtn("PHP", function () { return new test_form(); });
            // demoList.addBtn("Android平台ETC1压缩纹理", () => new test_ETC1_KTX());
            return new demoList();
        });
        //-------------------------------------渲染
        this.addBtn("渲染==>", function () {
            demoList.addBtn("test_posteffect(后期效果)", function () { return new t.test_posteffect(); });
            demoList.addBtn("test_blend", function () { return new t.test_blend(); });
            demoList.addBtn("test_shadowmap", function () { return new test_ShadowMap(); });
            demoList.addBtn("test_tex_uv", function () { return new test_texuv(); });
            demoList.addBtn("test_PBR 展示", function () { return new test_pbr(); });
            demoList.addBtn("test_PBR 场景", function () { return new test_pbr_scene(); });
            demoList.addBtn("test_glTF 场景", function () { return new HDR_sample(); });
            demoList.addBtn("SSSSS", function () { return new test_sssss(); });
            demoList.addBtn("test_trailRender", function () { return new t.test_trailrender(); });
            demoList.addBtn("test_灯光", function () { return new t.test_light1(); });
            // demoList.addBtn("test_light_d1", () => new t.light_d1());
            demoList.addBtn("test_normalmap", function () { return new t.Test_NormalMap(); });
            demoList.addBtn("线条", function () { return new test_LineRenderer(); });
            demoList.addBtn("拖尾", function () { return new test_TrailRenderer(); });
            demoList.addBtn("粒子系統", function () { return new test_ParticleSystem(); });
            demoList.addBtn("GPU_Instancing 绘制", function () { return new test_GPU_instancing(); });
            return new demoList();
        });
        //----------------------------------------------UI
        this.addBtn("UI样例==>", function () {
            demoList.addBtn("test_ui", function () { return new t.test_ui(); });
            demoList.addBtn("test_UI组件", function () { return new test_UI_Component(); });
            demoList.addBtn("test_UI预设体加载", function () { return new test_uiPerfabLoad(); });
            demoList.addBtn("UI 新手引导mask", function () { return new test_UIGuideMask(); });
            demoList.addBtn("UI 使用 纹理数组模式(webgl2 优化)", function () { return new test_UI_Texture_Array(); });
            demoList.addBtn("UI 贴到3D空间", function () { return new test_UI_Attach3D(); });
            return new demoList();
        });
        //-------------------------------------------物理
        this.addBtn("3D物理样例==>", function () {
            demoList.addBtn("3D物理_基础形状", function () { return new test_3DPhysics_baseShape(); });
            demoList.addBtn("3D物理_复合组合", function () { return new test_3DPhysics_compound(); });
            demoList.addBtn("3D物理_动力学", function () { return new test_3DPhysics_kinematic(); });
            demoList.addBtn("3D物理_铰链关节", function () { return new test_3DPhysics_joint_hinge(); });
            demoList.addBtn("3D物理_球嵌套关节", function () { return new test_3DPhysics_joint_ballandSocket(); });
            demoList.addBtn("3D物理_滑竿关节", function () { return new test_3DPhysics_joint_slider(); });
            demoList.addBtn("3D物理_棱柱滑竿关节", function () { return new test_3DPhysics_joint_prismatic(); });
            demoList.addBtn("3D物理_距离关节", function () { return new test_3DPhysics_joint_distance(); });
            demoList.addBtn("3D物理_车轮关节", function () { return new test_3DPhysics_joint_wheel(); });
            demoList.addBtn("3D物理_铰链马达", function () { return new test_3DPhysics_motor_hinge(); });
            demoList.addBtn("3D物理_车轮马达", function () { return new test_3DPhysics_motor_wheel(); });
            demoList.addBtn("3D物理_滑竿马达", function () { return new test_3DPhysics_motor_slider(); });
            demoList.addBtn("3D物理_冻结_位移旋转", function () { return new test_3DPhysics_freeze(); });
            demoList.addBtn("3D物理_样例_中心点爆炸", function () { return new test_3DPhysics_explode(); });
            demoList.addBtn("cannonPhysics3D", function () { return new PhysicDemo.physic_01(); });
            return new demoList();
        });
        //-------------------------------------------物理
        this.addBtn("SPINE样例==>", function () {
            demoList.addBtn("SPINE_图集动画", function () { return new test_spine_spriteSheet(); });
            demoList.addBtn("SPINE_变换图片", function () { return new test_spine_imageChange(); });
            demoList.addBtn("SPINE_动画混合", function () { return new test_spine_transition(); });
            demoList.addBtn("SPINE_网格变形", function () { return new test_spine_mesh(); });
            demoList.addBtn("SPINE_换皮肤", function () { return new test_spine_changeSkin(); });
            demoList.addBtn("SPINE_反向动力学", function () { return new test_spine_IK(); });
            demoList.addBtn("SPINE_相加动画混合", function () { return new test_spine_additiveBlending(); });
            demoList.addBtn("SPINE_路径约束", function () { return new test_spine_vin(); });
            demoList.addBtn("SPINE_变形人", function () { return new test_spine_stretchyMan(); });
            demoList.addBtn("SPINE_动画裁剪", function () { return new test_spine_clip(); });
            demoList.addBtn("SPINE_变形约束", function () { return new test_spine_tank(); });
            demoList.addBtn("SPINE_转动约束", function () { return new test_spine_wheelTransform(); });
            demoList.addBtn("SPINE_换Region插槽图片", function () { return new test_spine_change_slot_region_tex(); });
            demoList.addBtn("SPINE_换Mesh插槽图片", function () { return new test_spine_change_slot_mesh_tex(); });
            return new demoList();
        });
        //-------------------------------------其他
        this.addBtn("其他==>", function () {
            demoList.addBtn("表面贴花(弹痕)", function () { return new test_Decal(); });
            demoList.addBtn("test_multipleplayer_anim", function () { return new test_multipleplayer_anim(); });
            demoList.addBtn("mixmesh", function () { return new dome.mixMesh(); });
            demoList.addBtn("test_assestmgr", function () { return new test_assestmgr(); });
            demoList.addBtn("test_streamlight", function () { return new test_streamlight(); });
            demoList.addBtn("test_rendertexture", function () { return new t.test_rendertexture(); });
            demoList.addBtn("test_cleardepth", function () { return new t.test_clearDepth0(); });
            demoList.addBtn("test_fakepbr", function () { return new test_fakepbr(); });
            demoList.addBtn("test_skillsystem", function () { return new t.test_skillsystem(); });
            demoList.addBtn("TestRotate", function () { return new t.TestRotate(); });
            demoList.addBtn("pathasset", function () { return new t.test_pathAsset(); });
            demoList.addBtn("test_Asi_prefab", function () { return new test_loadAsiprefab(); });
            demoList.addBtn("test_liChange", function () { return new testLiChangeMesh(); });
            demoList.addBtn("example_newObject", function () { return new test_NewGameObject; });
            demoList.addBtn("example_changeMesh", function () { return new test_ChangeMesh(); });
            demoList.addBtn("example_changeMaterial", function () { return new test_ChangeMaterial(); });
            demoList.addBtn("demo_ScreenSplit", function () { return new demo_ScreenSplit(); }); //屏幕拆分
            demoList.addBtn("rvo2_驾驶行为", function () { return new test_Rvo2(); });
            demoList.addBtn("导航RVO_防挤Demo", function () { return new demo_navigaionRVO(); });
            demoList.addBtn("dome_加载播放动画", function () { return new dome_loadaniplayer(); });
            demoList.addBtn("使用加载资源的Demo列表", function () { return new UseAssetByLoadDemoList(); });
            demoList.addBtn("tesrtss", function () { return new dome.testCJ(); });
            demoList.addBtn("test_01", function () { return new test_01(); }); //屏幕拆分
            return new demoList();
        });
        //-------------------------------------炮王项目
        this.addBtn("项目Demo==>", function () {
            demoList.addBtn("paowuxian2", function () { return new dome.paowuxian2(); });
            // demoList.addBtn("paowuxian", () => new dome.paowuxian());
            demoList.addBtn("test_tank", function () { return new demo.TankGame(); });
            demoList.addBtn("test_long", function () { return new demo.DragonTest(); });
            return new demoList();
        });
        //others 历史遗留
        //this.addBtn("trans性能测试",()=>new demo.test_performance());
        // this.addBtn("testtrailrenderRecorde", () => new t.test_trailrenderrecorde()); //有问题
        // this.addBtn("LoadBase64Tex", () => new dome.LoadTex());
        // this.addBtn("rayTest",()=>new dome.rayTest());
        //this.addBtn("linPai",()=>new dome.font());
        //this.addBtn("newobjFromAni",()=>new dome.newObjFromAni());
        //this.addBtn("test_loadprefab", () => new test_loadprefab());
        // this.addBtn("loadPrefab",()=>new dome.loadPrefab());
        //this.addBtn("test_loadMulBundle", () => new test_loadMulBundle());
        //this.addBtn("test_loadScene",()=>new dome.test_loadScene());
        //this.addBtn("starcam",()=>new dome.db_test_starcam());
        //this.addBtn("trailComponent",()=>new dome.db_test_trail());
        //this.addBtn("loadPrefab",()=>new dome.loadPrefab());
        // this.addBtn("test_01", () => new test_01());//最早是做加载测试。现在已经没价值了
        //this.addBtn("loadscene", () => new dome.test_loadScene());
        //this.addBtn("test_changeshader", () => new t.test_changeshader());
        // this.addBtn("test_metalModel", () => new t.test_metal());
        //this.addBtn("test_lookAt", () => new t.TestRotate());
        //this.addBtn("test_integratedrender", () => new t.test_integratedrender());
        //this.addBtn("effect", () => new test_effect());
        //this.addBtn("test_uimove", () => new test_uimove());
        //this.addBtn("test_effecteditor", () => new test_effecteditor());
        //this.addBtn("test_xinshouMask", () => new t.test_xinshouMask());
        //this.addBtn("example_newScene",() =>new test_NewScene());
        // this.addBtn("example_Sound",()=>new test_Sound());
        //this.addBtn("test_四分屏", () => new test_pick_4p());
        //this.addBtn("test_liloadscene", () => new test_LiLoadScene());
        //this.addBtn("test_RangeScreen" ,()=>new test_RangeScreen());
        // this.addBtn("test_drawMesh",()=>new test_drawMesh());
        // this.addBtn("cj_zs",()=>new dome.testCJ());
        // this.addBtn("test_eff",()=>new dome.db_test_eff());
        //this.addBtn("test_f14",()=>new dome.db_test_f14eff());
    };
    main.prototype.addBtn = function (text, act) {
        var _this = this;
        var btn = document.createElement("button");
        this.btns.push(btn);
        btn.textContent = text;
        btn.onclick = function () {
            _this.clearBtn();
            _this.state = act();
            _this.state.start(_this.app);
        };
        btn.style.top = this.y + "px";
        btn.style.left = this.x + "px";
        if (this.y + 24 > 550) {
            this.y = 100;
            this.x += 200;
        }
        else {
            this.y += 24;
        }
        btn.style.position = "absolute";
        this.app.container.appendChild(btn);
    };
    main.prototype.clearBtn = function () {
        for (var i = 0; i < this.btns.length; i++) {
            this.app.container.removeChild(this.btns[i]);
        }
        this.x = this.def_x;
        this.y = this.def_y;
        this.btns.length = 0;
    };
    main.prototype.onUpdate = function (delta) {
        if (this.state != null)
            this.state.update(delta);
    };
    main.prototype.isClosed = function () {
        return false;
    };
    var main_1;
    main = main_1 = __decorate([
        m4m.reflect.userCode
    ], main);
    return main;
}());
//js 加载后 启动引擎
window.onload = function () {
    //获取canvas 容器
    var div = document.getElementById("drawarea");
    var gdapp = new m4m.framework.application();
    //引擎启动
    gdapp.start(div, m4m.framework.CanvasFixedType.Free, 720);
    gdapp.bePlay = true;
    //加载main 脚本
    gdapp.addUserCode("main");
};
/** 极简样例 */
var mini_sample = /** @class */ (function () {
    function mini_sample() {
    }
    mini_sample.prototype.start = function (app) {
        var obj = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, app);
        var scene = app.getScene();
        scene.addChild(obj);
        //initCamera
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var cam = objCam.gameObject.addComponent("camera");
        cam.near = 0.01;
        cam.far = 120;
        cam.fov = Math.PI * 0.3;
        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //相机控制
        var hoverc = cam.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
    };
    mini_sample.prototype.update = function (delta) {
    };
    return mini_sample;
}());
var test_01 = /** @class */ (function () {
    function test_01() {
        this.timer = 0;
    }
    test_01.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var cuber;
        this.testEffect();
        for (var i = 0; i < 1; i++) {
            //添加一个盒子
            var cube = new m4m.framework.transform();
            cube.name = "cube";
            this.scene.addChild(cube);
            // var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
            // var mesh = cube.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
            // mesh.mesh = (smesh);
            // var renderer = cube.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
            // this.testNRes(cube);
            //目前材质是内置配置的，
            //这个加载机制弄完之后，就可以根据name 访问资源包里的shader
            //然后用shader 构造材质，和unity相同
            // 配置代码如下
            // this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) => {
            //     if (state.isfinish) {
            //         var sh = this.app.getAssetMgr().getShader("color.shader.json");
            //         if (sh != null) {
            //             //用了从资源里加载出来的shader
            //             cuber.materials = [];
            //             cuber.materials.push(new m4m.framework.material());
            //             cuber.materials[0].setShader(sh);
            //             //shader 修改为 不和一般资源一样加载,而是统一用getShader方法
            //             //cuber.materials[0].shader = this.app.getAssetMgr().getResourceByName("color") as m4m.framework.shader;
            //             this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, (s) => {
            //                 if (s.isfinish) {
            //                     console.warn("Finish load img.");
            //                     let texture = this.app.getAssetMgr().getAssetByName("zg256.png") as m4m.framework.texture;
            //                     cuber.materials[0].setTexture("_MainTex", texture);
            //                 }
            //             })
            //         }
            //     }
            // });
            // m4m.math.quatFromAxisAngle(new m4m.math.vector3(0, 0, 1), 45, cube.localRotate);
            // this.cube = cube;
            // this.cube.setWorldPosition(new m4m.math.vector3(i, 0, 0));
        }
        // {
        //     this.cube2 = new m4m.framework.transform();
        //     this.cube2.name = "cube2";
        //     this.scene.addChild(this.cube2);
        //     this.cube2.localScale.x = this.cube2.localScale.y = this.cube2.localScale.z = 0.5;
        //     var mesh = this.cube2.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
        //     mesh.mesh = (smesh);
        //     var renderer = this.cube2.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
        //     var collider = this.cube2.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
        //     {
        // var cube = new m4m.framework.transform();
        // cube.name = "cubesub";
        // this.cube2.addChild(cube);
        // var mesh = cube.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
        // mesh.mesh = (smesh);
        // var renderer = cube.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
        //         cube.localTranslate.z = 1;
        //         cube.localScale.x = 0.5;
        //         cube.localScale.y = 0.5;
        //         //cube.localScale.z = 0.5;
        //         var collider = cube.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
        //         cube.markDirty();
        //     }
        // }
        {
            //this.cube3 = new m4m.framework.transform();
            //this.cube3.localScale.x = this.cube3.localScale.y = this.cube3.localScale.z = 0.7;
            //this.cube3.name = "cube3";
            //this.scene.addChild(this.cube3);
            //var mesh = this.cube3.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
            //mesh.setMesh(smesh);
            //var renderer = this.cube3.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
            ////var collider = this.cube3.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
        }
        //添加一个摄像机
        setTimeout(function () {
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            _this.scene.addChild(objCam);
            _this.camera = objCam.gameObject.addComponent("camera");
            _this.camera.near = 0.01;
            _this.camera.far = 100;
            _this.camera.backgroundColor = new m4m.math.color(0, 0, 0, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookat(cube);
            objCam.markDirty(); //标记为需要刷新
        }, 1000);
        {
            var testQuat = m4m.math.pool.new_quaternion();
            // m4m.math.quatFromAxisAngle(m4m.math.pool.vector2_right, 45, testQuat);
        }
        //{
        //    var angle = new m4m.math.vector3(30, 40, 150);
        //    var quat = new m4m.math.quaternion();
        //    m4m.math.quatFromEulerAngles(angle.x, angle.y, angle.z, quat);
        //    var out = new m4m.math.vector3();
        //    m4m.math.quatToEulerAngles(quat, out);
        //}
    };
    test_01.prototype.update = function (delta) {
        return;
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        var objCam = this.camera.gameObject.transform;
        //objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        //objCam.lookat(this.cube);
        //objCam.markDirty();//标记为需要刷新
        //objCam.updateWorldTran();
        this.cube2.localTranslate = new m4m.math.vector3(this.timer, 0, 0);
        //this.cube2.lookat(this.cube);
        this.cube2.markDirty();
        //this.cube3.localTranslate = new m4m.math.vector3(x * 2, 0, z * 2);
        //this.cube3.markDirty();
    };
    test_01.prototype.testPrefab = function (cube) {
        // cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
        // cube.localTranslate.x = 2;
        // var collider = cube.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
        // var mesh = cube.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
        // var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
        // mesh.mesh = smesh;
        // var renderer = cube.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
        // let v3 = cube.localEulerAngles;
        // console.log(cube.getWorldMatrix());
        // v3.x += 50;
        // cube.localEulerAngles = v3;
        // console.log(cube.getWorldMatrix());
        // cuber = renderer;
        console.warn("Finish it.");
        var assetMgr = this.app.getAssetMgr();
        assetMgr.load("res/test/customShader/customShader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                // assetMgr.load("res/test/1/ui/yingdao_page/yingdao_page.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
                // {
                //     if (state.isfinish)
                //     {
                //         let prefab = assetMgr.getAssetByName("yingdao_page.prefab.json") as m4m.framework.prefab;
                //         let trans = prefab.getCloneTrans();
                //         console.log("###", trans);
                //     }
                // });
                var cloneCount = 1;
                m4m.framework.mesh.useThead = false;
                window["test0"] = function (cloneCount) {
                    assetMgr.load("res/test/0/Background/Background.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                        if (state.isfinish) {
                            var prefab = assetMgr.getAssetByName("Background.prefab.json");
                            var time = Date.now();
                            for (var i = 0; i < cloneCount; ++i) {
                                var shark = prefab.getCloneTrans();
                                cube.addChild(shark);
                            }
                            var useTime = Date.now() - time;
                            console.log("old clone trans:".concat(useTime, "/ms count:").concat(cloneCount));
                            // this.scene.addChild(shark);
                        }
                    });
                };
                window["test1"] = function (cloneCount) {
                    assetMgr.load("res/test/1/Background/Background.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                        if (state.isfinish) {
                            var prefab = assetMgr.getAssetByName("Background.prefab.json");
                            var time = Date.now();
                            for (var i = 0; i < cloneCount; ++i) {
                                var shark = prefab.getCloneTrans();
                                cube.addChild(shark);
                            }
                            var useTime = Date.now() - time;
                            console.log("new clone trans:".concat(useTime, "/ms count:").concat(cloneCount));
                            // this.scene.addChild(shark);
                        }
                    });
                };
                window["test2"] = function (cloneCount) {
                    assetMgr.load("res/test/2/Background/Background.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                        if (state.isfinish) {
                            var prefab = assetMgr.getAssetByName("Background.prefab.json");
                            var time = Date.now();
                            for (var i = 0; i < cloneCount; ++i) {
                                var shark = prefab.getCloneTrans();
                                cube.addChild(shark);
                            }
                            var useTime = Date.now() - time;
                            console.log("new clone trans:".concat(useTime, "/ms count:").concat(cloneCount));
                            // this.scene.addChild(shark);
                        }
                    });
                };
                // assetMgr.load("res/test/0/7/7.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
                // {
                //     if (state.isfinish)
                //     {
                //         let prefab = assetMgr.getAssetByName("7.prefab.json") as m4m.framework.prefab;
                //         let time = Date.now();
                //         for (let i = 0; i < cloneCount; ++i)
                //         {
                //             let shark = prefab.getCloneTrans();
                //             cube.addChild(shark);
                //         }
                //         let useTime = Date.now() - time;
                //         console.log(`new clone trans:${useTime}/ms count:${cloneCount}`);
                //         // this.scene.addChild(shark);
                //     }
                // });
                // assetMgr.load("res/test/1/7/7.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
                // {
                //     if (state.isfinish)
                //     {
                //         let prefab = assetMgr.getAssetByName("7.prefab.json") as m4m.framework.prefab;
                //         let time = Date.now();
                //         for (let i = 0; i < cloneCount; ++i)
                //         {
                //             let shark = prefab.getCloneTrans();
                //             cube.addChild(shark);
                //         }
                //         let useTime = Date.now() - time;
                //         console.log(`new clone trans:${useTime}/ms count:${cloneCount}`);
                //         // this.scene.addChild(shark);
                //     }
                // });
            }
        });
    };
    test_01.prototype.testNRes = function (root) {
        var _this = this;
        var cndroot = "http://192.168.88.68:8088/public/1/hungryshark/Resources_new/";
        var assetMgr = this.app.getAssetMgr();
        assetMgr.load("".concat(cndroot, "shader/customShader/customShader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (state.isfinish) {
                    assetMgr.mapShader = this.app.getAssetMgr().mapShader;
                    // assetMgr.cdnRoot = cndroot;
                    // await assetMgr.initGuidList(`${assetMgr.cdnRoot}guidlist.json`);
                    assetMgr.load("".concat(cndroot, "props/PC/role/PF_PlayerSharkReef/PF_PlayerSharkReef.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
                        if (state.isfinish) {
                            console.log("资源加载结束");
                            var prefab = assetMgr.getAssetByName("PF_PlayerSharkReef.prefab.json");
                            var trans = prefab.getCloneTrans();
                            root.addChild(trans);
                            // debugger;
                        }
                    });
                }
                return [2 /*return*/];
            });
        }); });
    };
    test_01.prototype.testEffect = function () {
        var _this = this;
        var assetMgr = this.app.getAssetMgr();
        assetMgr.load("res/f14effprefab/customShader/customShader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                assetMgr.load("res/f14effprefab/fx_cs/fx_cs.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                    if (state.isfinish) {
                        var prefab = assetMgr.getAssetByName("fx_cs.prefab.json", "fx_cs.assetbundle.json");
                        var trans = prefab.getCloneTrans();
                        trans.localEulerAngles = new m4m.math.vector3(0, 90, 0);
                        _this.scene.addChild(trans);
                    }
                });
            }
        });
    };
    return test_01;
}());
var test_loadScene = /** @class */ (function () {
    function test_loadScene() {
    }
    test_loadScene.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var assetMgr = this.app.getAssetMgr();
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        app.getScene().addChild(objCam);
        var cam = objCam.gameObject.addComponent("camera");
        cam.near = 0.01;
        cam.far = 500;
        cam.fov = Math.PI * 0.3;
        objCam.localTranslate = new m4m.math.vector3(52, 48, 6);
        //相机控制
        var hoverc = cam.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 163;
        hoverc.tiltAngle = 16.5;
        hoverc.distance = 1;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(43, 40, 15);
        util.loadShader(assetMgr)
            .then(function () {
            var sceneName = "MainCity_";
            assetMgr.load("".concat(resRootPath, "prefab/").concat(sceneName, "/").concat(sceneName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                if (s1.isfinish) {
                    var _scene = assetMgr.getAssetByName(sceneName + ".scene.json", "".concat(sceneName, ".assetbundle.json"));
                    var _root = _scene.getSceneRoot();
                    _this.scene.addChild(_root);
                    _this.app.getScene().lightmaps = [];
                    _scene.useLightMap(_this.app.getScene());
                    _scene.useFog(_this.app.getScene());
                }
            });
        });
    };
    test_loadScene.prototype.update = function (delta) {
    };
    return test_loadScene;
}());
var test_loadSceneVR = /** @class */ (function () {
    function test_loadSceneVR() {
    }
    test_loadSceneVR.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = this.app.getScene();
        var assetMgr = this.app.getAssetMgr();
        //相机剔除暂时 关闭
        app.isFrustumCulling = false;
        //xrManager init
        xrManager.init();
        //init cam
        this.initCam(app);
        //相机控制
        var hoverc = this.objCamRoot.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 163;
        hoverc.tiltAngle = 16.5;
        hoverc.distance = 1;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(43, 40, 15);
        //VR 按钮
        vrButton.tryListenSessionGranted();
        var ele = vrButton.makeButton(this.onEnterVR.bind(this), this.onExitVR.bind(this));
        //doc 挂载元素
        document.body.appendChild(ele);
        //加载场景
        util.loadShader(assetMgr)
            .then(function () {
            var sceneName = "MainCity_";
            assetMgr.load("".concat(resRootPath, "prefab/").concat(sceneName, "/").concat(sceneName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                if (s1.isfinish) {
                    var _scene = assetMgr.getAssetByName(sceneName + ".scene.json", "".concat(sceneName, ".assetbundle.json"));
                    var _root = _scene.getSceneRoot();
                    _root.name = "sceneModel";
                    // this.scene.addChild(_root);
                    xrManager.vrModelRoot.addChild(_root);
                    _this.app.getScene().lightmaps = [];
                    _scene.useLightMap(_this.app.getScene());
                    _scene.useFog(_this.app.getScene());
                    //set vr offset 
                    xrManager.setViewOffsetPos(new m4m.math.vector3(-70, 35, 30));
                }
            });
        });
    };
    /**
     * 进入 VR 模式
     * @param session vr 传感器
     */
    test_loadSceneVR.prototype.onEnterVR = function (session) {
        console.log("\u8FDB\u5165 VR");
        this.normalCam.gameObject.visible = false;
        xrManager.setSession(session);
    };
    test_loadSceneVR.prototype.onExitVR = function () {
        console.log("\u9000\u51FA VR");
        this.normalCam.gameObject.visible = true;
    };
    test_loadSceneVR.prototype.initCam = function (app) {
        var objCamRoot = this.objCamRoot = new m4m.framework.transform();
        app.getScene().addChild(objCamRoot);
        objCamRoot.localTranslate = new m4m.math.vector3(52, 48, 6);
        {
            var objCamNormal = new m4m.framework.transform();
            objCamRoot.addChild(objCamNormal);
            //添加一个摄像机 正常模式
            var cam = this.normalCam = objCamNormal.gameObject.addComponent("camera");
            cam.near = 0.01;
            cam.far = 500;
            // cam.fov = Math.PI * 105 / 180; //105度相机
            cam.viewport = new m4m.math.rect(0, 0, 1, 1);
        }
    };
    test_loadSceneVR.prototype.update = function (delta) {
    };
    return test_loadSceneVR;
}());
/** VR 切换按钮 */
var vrButton = /** @class */ (function () {
    function vrButton() {
    }
    /**
     * 设置 元素样式
     * @param element html 元素
     */
    vrButton.stylizeElement = function (element) {
        element.style.position = 'absolute';
        element.style.bottom = '20px';
        element.style.padding = '12px 6px';
        element.style.border = '1px solid #fff';
        element.style.borderRadius = '4px';
        element.style.background = 'rgba(0,0,0,0.1)';
        element.style.color = '#fff';
        element.style.font = 'normal 13px sans-serif';
        element.style.textAlign = 'center';
        element.style.opacity = '0.5';
        element.style.outline = 'none';
        element.style.zIndex = '999';
    };
    /**
     * 创建 VR 按钮
     */
    vrButton.makeButton = function (onEnter, onExit) {
        //创建 html 按钮
        var button = document.createElement('button');
        /** 展示 进入VR */
        var showEnterVR = function () {
            var currentSession = null;
            function onSessionStarted(session) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                session.addEventListener('end', onSessionEnded);
                                if (!onEnter) return [3 /*break*/, 2];
                                return [4 /*yield*/, onEnter(session)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                button.textContent = '退出 VR';
                                currentSession = session;
                                return [2 /*return*/];
                        }
                    });
                });
            }
            var onSessionEnded = function ( /*event*/) {
                currentSession.removeEventListener('end', onSessionEnded);
                if (onExit) {
                    onExit();
                }
                button.textContent = '进入 VR';
                currentSession = null;
            };
            //
            button.style.display = '';
            button.style.cursor = 'pointer';
            button.style.left = 'calc(50% - 50px)';
            button.style.width = '100px';
            button.textContent = '进入 VR';
            button.onmouseenter = function () {
                button.style.opacity = '1.0';
            };
            button.onmouseleave = function () {
                button.style.opacity = '0.5';
            };
            button.onclick = function () {
                if (currentSession === null) {
                    //requestReferenceSpace 仅当对应的功能在会话创建时才能请求,“local” 始终在 immersive 模式可用不需要单独请求。
                    var sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };
                    navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);
                }
                else {
                    currentSession.end();
                }
            };
        };
        var showWebXRNotFound = function () {
            disableButton();
            button.textContent = 'VR 不支持';
        };
        /** 删除按钮  */
        var disableButton = function () {
            button.style.display = '';
            button.style.cursor = 'auto';
            button.style.left = 'calc(50% - 75px)';
            button.style.width = '150px';
            button.onmouseenter = null;
            button.onmouseleave = null;
            button.onclick = null;
        };
        /** 展示 VR没有允许的状态 */
        var showVRNotAllowed = function (exception) {
            disableButton();
            console.warn('调用 xr.isSessionSupported 时的报错', exception);
            button.textContent = 'VR 没允许';
        };
        if ('xr' in navigator) {
            button.id = 'VRButton';
            button.style.display = 'none';
            this.stylizeElement(button);
            navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {
                supported ? showEnterVR() : showWebXRNotFound();
                if (supported && vrButton.xrSessionIsGranted) {
                    button.click();
                }
            }).catch(showVRNotAllowed);
            return button;
        }
        else {
            var message = document.createElement('a');
            if (window.isSecureContext === false) {
                message.href = document.location.href.replace(/^http:/, 'https:');
                message.innerHTML = 'WEBXR 需要 HTTPS'; // TODO Improve message
            }
            else {
                message.href = 'https://immersiveweb.dev/';
                message.innerHTML = 'WEBXR 不可用';
            }
            message.style.left = 'calc(50% - 90px)';
            message.style.width = '180px';
            message.style.textDecoration = 'none';
            this.stylizeElement(message);
            return message;
        }
    };
    /**
     * 尝试 监听传感器的授权
     */
    vrButton.tryListenSessionGranted = function () {
        var _this = this;
        var xr = navigator.xr;
        if (!xr)
            return;
        //处理 火狐浏览器的 bug
        if (/WebXRViewer\//i.test(navigator.userAgent))
            return;
        xr.addEventListener('sessiongranted', function () {
            _this.xrSessionIsGranted = true;
        });
    };
    vrButton.xrSessionIsGranted = false;
    return vrButton;
}());
/**
 * webXR 管理器
 */
var xrManager = /** @class */ (function () {
    function xrManager() {
    }
    Object.defineProperty(xrManager, "vrModelRoot", {
        /** vr model 父容器 */
        get: function () { return this._vrModelRoot; },
        enumerable: false,
        configurable: true
    });
    /** 初始化 */
    xrManager.init = function () {
        this._offsetPos = new m4m.math.vector3();
        //model root
        var scene = m4m.framework.sceneMgr.scene;
        this._vrModelRoot = new m4m.framework.transform();
        this._vrModelRoot.name = "vrModelRoot";
        scene.addChild(this._vrModelRoot);
        //相机
        {
            //添加一个摄像机 vr left
            var objCamL = new m4m.framework.transform();
            scene.addChild(objCamL);
            //app.getScene().addChild(objCam);
            var cam = this.vrCameraL = objCamL.gameObject.addComponent("camera");
            cam.near = 0.01;
            cam.far = 500;
            cam.fov = Math.PI * 105 / 180; //105度相机
            cam.viewport = new m4m.math.rect(0, 0, 0.5, 1);
            objCamL.localTranslate = new m4m.math.vector3(-0.1, 0, 0); //偏左
        }
        {
            //添加一个摄像机 vr right
            var objCamR = new m4m.framework.transform();
            scene.addChild(objCamR);
            //app.getScene().addChild(objCam);
            var camR = this.vrCameraR = objCamR.gameObject.addComponent("camera");
            camR.clearOption_Color = false;
            camR.near = 0.01;
            camR.far = 500;
            camR.fov = Math.PI * 105 / 180; //105度相机
            camR.viewport = new m4m.math.rect(0.5, 0, 0.5, 1);
            objCamR.localTranslate = new m4m.math.vector3(0.1, 0, 0); //偏右
        }
    };
    /**
     * 设置view 位置偏移
     * @param offsetPos
     */
    xrManager.setViewOffsetPos = function (offsetPos) {
        if (!offsetPos)
            return;
        m4m.math.vec3Clone(offsetPos, this._offsetPos);
    };
    /**
     * 设置传感器
     * @param session 传感器
     */
    xrManager.setSession = function (session) {
        return __awaiter(this, void 0, void 0, function () {
            var gl, attributes, layerInit, _a, vTran;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.session = session;
                        session.addEventListener('select', xrManager.onSessionEvent);
                        session.addEventListener('selectstart', xrManager.onSessionEvent);
                        session.addEventListener('selectend', xrManager.onSessionEvent);
                        session.addEventListener('squeeze', xrManager.onSessionEvent);
                        session.addEventListener('squeezestart', xrManager.onSessionEvent);
                        session.addEventListener('squeezeend', xrManager.onSessionEvent);
                        session.addEventListener('end', xrManager.onSessionEndSuc);
                        session.addEventListener('inputsourceschange', xrManager.onInputSourcesChange);
                        gl = m4m.framework.sceneMgr.app.webgl;
                        attributes = gl.getContextAttributes();
                        if (!!attributes.xrCompatible) return [3 /*break*/, 2];
                        return [4 /*yield*/, gl.makeXRCompatible()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        //baselayer
                        if ((session.renderState.layers === undefined)) {
                            layerInit = {
                                antialias: (session.renderState.layers === undefined) ? attributes.antialias : true,
                                alpha: attributes.alpha,
                                depth: attributes.depth,
                                stencil: attributes.stencil,
                                framebufferScaleFactor: this.framebufferScaleFactor
                            };
                            this.glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                            session.updateRenderState({
                                baseLayer: this.glBaseLayer,
                                depthFar: 1000,
                                depthNear: 0,
                                // inlineVerticalFieldOfView: 105
                            });
                        }
                        else {
                            //暂时没有实现
                        }
                        // Set foveation to maximum.
                        this.setFoveation(1.0);
                        //参考空间对象
                        _a = this;
                        return [4 /*yield*/, session.requestReferenceSpace(this.referenceSpaceType)];
                    case 3:
                        //参考空间对象
                        _a.referenceSpace = _b.sent();
                        //开始了锁住
                        this.isPresenting = true;
                        this.cgMainLoop(true);
                        //相机
                        this.vrCameraL.gameObject.visible = true;
                        this.vrCameraR.gameObject.visible = true;
                        vTran = this._vrModelRoot.gameObject.transform;
                        vTran.localScale.x = -1;
                        vTran.localScale = vTran.localScale;
                        return [2 /*return*/];
                }
            });
        });
    };
    //尝试 将 xrlayer的fbo 绑定绘制
    xrManager.tryXRFBOBind = function () {
        if (this.isBindXRFBO || !this.glBaseLayer.framebuffer)
            return;
        this.isBindXRFBO = true;
        var gl = m4m.framework.sceneMgr.app.webgl;
        if (!this._color) {
            this._color = new m4m.framework.cameraPostQueue_Color();
            this._color.renderTarget = new m4m.render.glRenderTarget(gl, this.glBaseLayer.framebufferWidth, this.glBaseLayer.framebufferHeight, true, false, this.glBaseLayer.framebuffer);
        }
        this.vrCameraL.postQueues.push(this._color);
        this.vrCameraR.postQueues.push(this._color);
    };
    //解除绑定
    xrManager.tryXRFBOUnBind = function () {
        if (!this.isBindXRFBO)
            return;
        this.isBindXRFBO = false;
        var LIdx = this.vrCameraL.postQueues.indexOf(this._color);
        this.vrCameraL.postQueues.splice(LIdx, 1);
        var RIdx = this.vrCameraR.postQueues.indexOf(this._color);
        this.vrCameraR.postQueues.splice(RIdx, 1);
    };
    /**
     * 设置参考空间类型
     * @param value 类型
     */
    xrManager.setReferenceSpaceType = function (value) {
        this.referenceSpaceType = value;
        if (this.isPresenting === true) {
            console.warn('当前正在运行，不能改变 ReferenceSpace 类型。');
        }
    };
    xrManager.setFoveation = function (foveation) {
        // 0 = no foveation = full resolution
        // 1 = maximum foveation = the edges render at lower resolution
        if (this.glBaseLayer !== null && this.glBaseLayer.fixedFoveation !== undefined) {
            this.glBaseLayer.fixedFoveation = foveation;
        }
    };
    ;
    /** 传感器事件 */
    xrManager.onSessionEvent = function (event) {
        // debugger;
        console.log("onSessionEvent :");
    };
    /** 传感结束 */
    xrManager.onSessionEndSuc = function () {
        var session = xrManager.session;
        if (!session)
            return;
        //移除事件监听
        session.removeEventListener('select', xrManager.onSessionEvent);
        session.removeEventListener('selectstart', xrManager.onSessionEvent);
        session.removeEventListener('selectend', xrManager.onSessionEvent);
        session.removeEventListener('squeeze', xrManager.onSessionEvent);
        session.removeEventListener('squeezestart', xrManager.onSessionEvent);
        session.removeEventListener('squeezeend', xrManager.onSessionEvent);
        session.removeEventListener('end', xrManager.onSessionEndSuc);
        session.removeEventListener('inputsourceschange', xrManager.onInputSourcesChange);
        xrManager.isPresenting = false;
        xrManager.cgMainLoop(false);
        xrManager.tryXRFBOUnBind();
        //相机
        this.vrCameraL.gameObject.visible = false;
        this.vrCameraR.gameObject.visible = false;
        //将引擎场景 root x 轴缩放 为 -1 , 为了处理 vrView projectionMatrix 为右手坐标系的问题
        var vTran = this._vrModelRoot.gameObject.transform;
        vTran.localScale.x = 1;
        vTran.localScale = vTran.localScale;
    };
    /** 输入源变化 */
    xrManager.onInputSourcesChange = function (event) {
        // debugger;
        console.log("onInputSourcesChange :");
    };
    /**
     * 更新相机
     */
    xrManager.updateCamera = function () {
        if (this._currentDepthNear !== this.vrCameraL.near || this._currentDepthFar !== this.vrCameraL.far) {
            // Note that the new renderState won't apply until the next frame. See #18320
            this.session.updateRenderState({
                depthNear: this.vrCameraL.near,
                depthFar: this.vrCameraL.far
            });
        }
    };
    xrManager.cgMainLoop = function (isXRLoopMode) {
        var _this = this;
        var session = this.session;
        if (!session || this.isXRLoop == isXRLoopMode)
            return;
        var app = m4m.framework.sceneMgr.app;
        if (isXRLoopMode) {
            var updateFun = xrManager.onUpdate.bind(xrManager);
            var scene = m4m.framework.sceneMgr.scene;
            scene.onLateUpdate = updateFun;
            this.cacheNormalMainLoop = app.loop;
            //新的循环
            var _loopFun_1 = function (time, xrFrame) {
                var now = Date.now() / 1000;
                // const now = time / 1000;
                app._deltaTime = now - app.lastTimer;
                app.totalTime = now - app.beginTimer;
                app.updateTimer = now - app.pretimer;
                var dt = app.deltaTime;
                _this._xrFrame = xrFrame;
                app.update(dt);
                if (app.stats != null)
                    app.stats.update();
                app.lastTimer = now;
                app.pretimer = now;
                // if (updateFun) updateFun(dt, xrFrame);
                session.requestAnimationFrame(_loopFun_1);
            };
            app.loop = function () { };
            //run loop
            _loopFun_1(null, null);
        }
        else {
            app.loop = this.cacheNormalMainLoop;
            this.cacheNormalMainLoop = null;
            //run loop
            app.loop();
        }
        this.isXRLoop = isXRLoopMode;
    };
    /** 更新 */
    xrManager.onUpdate = function (dt) {
        var xrFrame = this._xrFrame;
        if (!this.isPresenting || !xrFrame)
            return;
        var pose = xrFrame.getViewerPose(this.referenceSpace);
        //同步 传感器到场景相机
        if (pose) {
            var views = pose.views;
            var isVR = views.length == 2;
            if (isVR && this.vrCameraL && this.vrCameraR) {
                var gl = m4m.framework.sceneMgr.app.webgl;
                var w = this.glBaseLayer.framebufferWidth;
                var h = this.glBaseLayer.framebufferHeight;
                //layer.framebuffer 存在时将 画面绘制到 layer.framebuffer
                //bind framebuffer
                this.tryXRFBOBind();
                var app = m4m.framework.sceneMgr.app;
                var _loop_1 = function (i) {
                    var cam = i == 0 ? this_1.vrCameraL : this_1.vrCameraR;
                    var trans = cam.gameObject.transform;
                    //相机信息
                    var view = views[i];
                    var vTrans = view.transform;
                    var otherView = views[(i + 1) % 2]; //另外一个view
                    //viewport
                    var viewport = this_1.glBaseLayer.getViewport(view);
                    // const viewport = this.glBaseLayer.getViewport(otherView);
                    m4m.math.rectSet(cam.viewport, viewport.x / w, viewport.y / h, viewport.width / w, viewport.height / h);
                    //位移
                    var wPos = trans.getWorldPosition();
                    m4m.math.vec3Set(wPos, vTrans.position.x, -vTrans.position.y, vTrans.position.z);
                    //offset
                    m4m.math.vec3Add(this_1._offsetPos, wPos, wPos);
                    trans.setWorldPosition(wPos);
                    //旋转
                    var wRot = trans.getWorldRotate();
                    wRot.x = vTrans.orientation.x;
                    wRot.y = vTrans.orientation.y;
                    wRot.z = vTrans.orientation.z;
                    wRot.w = vTrans.orientation.w;
                    trans.setWorldRotate(wRot);
                    //相机投影矩阵
                    view.projectionMatrix;
                    var pmtx = cam["projectMatrix"];
                    view.projectionMatrix.forEach(function (v, i) {
                        pmtx.rawData[i] = v;
                    });
                };
                var this_1 = this;
                for (var i = 0; i < 2; i++) {
                    _loop_1(i);
                }
                this.updateCamera();
            }
        }
        //控制器（InputSources）更新处理
        //....
    };
    //是否在呈现
    xrManager.isPresenting = false;
    //参考空间类型
    xrManager.referenceSpaceType = "local-floor";
    //帧缓冲 缩放系数
    xrManager.framebufferScaleFactor = 1.0;
    //是否是XRLoop
    xrManager.isXRLoop = false;
    xrManager.isBindXRFBO = false;
    return xrManager;
}());
var test_loadMulBundle = /** @class */ (function () {
    function test_loadMulBundle() {
        this.timer = 0;
        this.bere = false;
    }
    test_loadMulBundle.prototype.refreshTexture = function (tran) {
        var meshrenderer = tran.gameObject.getComponentsInChildren("meshRenderer");
        var skinnmeshrenderer = tran.gameObject.getComponentsInChildren("skinnedMeshRenderer");
        for (var i = 0; i < meshrenderer.length; i++) {
            var v = meshrenderer[i];
            for (var j = 0; j < v.materials.length; j++) {
                for (var k in v.materials[j].statedMapUniforms) {
                    if (v.materials[j].statedMapUniforms[k].type == m4m.render.UniformTypeEnum.Texture) {
                        var textur = this.app.getAssetMgr().getAssetByName(v.materials[j].statedMapUniforms[k].resname);
                        v.materials[j].setTexture(k, textur);
                    }
                }
            }
        }
        for (var i = 0; i < skinnmeshrenderer.length; i++) {
            var v = skinnmeshrenderer[i];
            for (var j = 0; j < v.materials.length; j++) {
                for (var k in v.materials[j].statedMapUniforms) {
                    if (v.materials[j].statedMapUniforms[k].type == m4m.render.UniformTypeEnum.Texture) {
                        var textur = this.app.getAssetMgr().getAssetByName(v.materials[j].statedMapUniforms[k].resname);
                        v.materials[j].setTexture(k, textur);
                    }
                }
            }
        }
    };
    test_loadMulBundle.prototype.refreshAniclip = function (tran) {
        // let anipalyer = tran.gameObject.getComponentsInChildren("aniplayer") as m4m.framework.aniplayer[];
        // for(let i=0; i<anipalyer.length; i++)
        // {
        //     for(let j=0; j<anipalyer[i].clips.length; j++)
        //     {
        //         let v = anipalyer[i].clips[j];
        //         anipalyer[i].clips[j] = this.app.getAssetMgr().getAssetByName(v.getName()) as m4m.framework.animationClip;
        //     }
        //     anipalyer[i].playByIndex(0);
        // }
    };
    test_loadMulBundle.prototype.refreshLightMap = function (scene, rawscene) {
        scene.lightmaps = [];
        rawscene.resetLightMap(this.app.getAssetMgr());
        rawscene.useLightMap(this.app.getScene());
        rawscene.useFog(this.app.getScene());
    };
    test_loadMulBundle.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var names = ["MainCity", "1042_pata_shenyuan_01", "1030_huodongchuangguan", "xinshoucun_fuben_day", "chuangjue-01"];
        var name = names[0];
        // name="MainCity";
        var isloaded = false;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/scenes/" + name + "/meshprefab/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        var _scene = _this.app.getAssetMgr().getAssetByName(name + ".scene.json");
                        var _root = _scene.getSceneRoot();
                        _this.scene.addChild(_root);
                        _root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
                        _root.markDirty();
                        _this.app.getAssetMgr().load("res/scenes/" + name + "/textures/" + name + "texture.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.refreshTexture(_this.app.getScene().getRoot());
                                _this.refreshLightMap(_this.app.getScene(), _scene);
                            }
                        });
                        _this.app.getAssetMgr().load("res/scenes/" + name + "/aniclip/" + name + "aniclip.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.refreshAniclip(_this.app.getScene().getRoot());
                            }
                        });
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        //this.camera.postQueues.push(new m4m.framework.cameraPostQueue_Depth());
        // this.camera.near = 0.01;
        // this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(-20, 50, -20);
        // objCam.lookatPoint(new m4m.math.vector3(133.6694, 97.87, 67));
        objCam.lookatPoint(new m4m.math.vector3(100, 0, 100));
        objCam.markDirty(); //标记为需要刷新
        CameraController.instance().init(this.app, this.camera);
    };
    test_loadMulBundle.prototype.update = function (delta) {
        this.timer += delta;
        CameraController.instance().update(delta);
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.5);
        var z2 = Math.cos(this.timer * 0.5);
        var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 10, 30, z2 * 10);
        // objCam.markDirty();//标记为需要刷新
    };
    return test_loadMulBundle;
}());
var t;
(function (t) {
    var test_pathAsset = /** @class */ (function () {
        function test_pathAsset() {
            this.parentlist = [];
            this.dragonlist = [];
            this.traillist = [];
            this.guippaths = [];
            this.taskmgr = new m4m.framework.taskMgr();
            this.timer = 0;
        }
        test_pathAsset.prototype.start = function (app) {
            this.app = app;
            this.scene = this.app.getScene();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadTexture.bind(this));
            this.taskmgr.addTaskCall(this.loadpath.bind(this));
            this.taskmgr.addTaskCall(this.loadasset.bind(this));
            this.taskmgr.addTaskCall(this.initscene.bind(this));
            this.taskmgr.addTaskCall(this.addbtns.bind(this));
        };
        test_pathAsset.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_pathAsset.prototype.loadTexture = function (laststate, state) {
            var texnumber = 2;
            this.app.getAssetMgr().load("res/rock256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    texnumber--;
                    if (texnumber == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/sd_hlb_1.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    texnumber--;
                    if (texnumber == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
        };
        test_pathAsset.prototype.loadpath = function (laststate, state) {
            var pathnumber = 2;
            this.app.getAssetMgr().load("res/path/circlepath.path.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    pathnumber--;
                    if (pathnumber == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/path/circlepath_2.path.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    pathnumber--;
                    if (pathnumber == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
        };
        test_pathAsset.prototype.loadasset = function (laststate, state) {
            this.app.getAssetMgr().load("res/prefabs/rotatedLongTou/rotatedLongTou.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_pathAsset.prototype.initscene = function (laststate, state) {
            var _this = this;
            var objCam = new m4m.framework.transform();
            objCam.name = "cam_show";
            this.scene.addChild(objCam);
            this.showcamera = objCam.gameObject.addComponent("camera");
            this.showcamera.order = 0;
            this.showcamera.near = 0.01;
            this.showcamera.far = 1000;
            objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty();
            var mat = DBgetMat("rock256.png");
            var trans = DBgetAtrans(mat);
            this.scene.addChild(trans);
            trans.localScale.y = 0.1;
            trans.localScale.x = trans.localScale.z = 40;
            trans.localTranslate.y = -1;
            trans.markDirty();
            //-----------------------------------------资源----------------------------------------------------------------------
            var longtouprefab = this.app.getAssetMgr().getAssetByName("rotatedLongTou.prefab.json");
            var path = this.app.getAssetMgr().getAssetByName("circlepath.path.json");
            var path2 = this.app.getAssetMgr().getAssetByName("circlepath_2.path.json");
            //--------------------------------------------------------------------------------------------------------------
            {
                for (var i = 0; i < 3; i++) {
                    var parent = new m4m.framework.transform();
                    parent.gameObject.visible = false;
                    this.scene.addChild(parent);
                    this.parentlist.push(parent);
                    //------------------龙头----------------------------
                    var head = longtouprefab.getCloneTrans();
                    head.localScale.x = head.localScale.y = head.localScale.z = 4;
                    parent.addChild(head);
                    this.dragonlist.push(head);
                    var guidp = head.gameObject.addComponent("guidpath");
                    this.guippaths.push(guidp);
                    //-----------------挂拖尾---------------------------------
                    var trans = new m4m.framework.transform();
                    head.addChild(trans);
                    var trailmat = new m4m.framework.material();
                    //transparent_bothside.shader.json
                    //particles_blend.shader.json
                    var shader = this.app.getAssetMgr().getShader("particles_blend.shader.json");
                    var tex1 = this.app.getAssetMgr().getAssetByName("sd_hlb_1.png");
                    trailmat.setShader(shader);
                    trailmat.setTexture("_MainTex", tex1);
                    var trailrender = trans.gameObject.addComponent("trailRender");
                    this.traillist.push(trailrender);
                    trailrender.material = trailmat;
                    trailrender.setWidth(1.0); //调整拖尾宽度
                    trailrender.lookAtCamera = true;
                    trailrender.extenedOneSide = false;
                    trailrender.setspeed(0.25); //拖尾长度，越小越长
                    //--------------开关拖尾---------------------
                    //trailrender.play();
                    //this.trailrender.stop();
                }
                //------------------------------设置路径--------------------------------------------
                this.guippaths[0].setpathasset(path2, 50, function () {
                    //this.parentlist[0].gameObject.visible=false;
                    //this.traillist[0].stop();
                });
                this.guippaths[1].setpathasset(path, 50, function () {
                    _this.parentlist[1].gameObject.visible = false;
                    //this.traillist[1].stop();
                });
                this.guippaths[2].setpathasset(path2, 50, function () {
                    //this.parentlist[2].gameObject.visible=false;
                    //this.traillist[2].stop();
                });
                // {
                //     this.parentlist[0].gameObject.visible=true;
                //     var guidp=this.dragonlist[0].gameObject.addComponent("guidpath")as m4m.framework.guidpath;
                //     guidp.setpathasset(path2,50,()=>{
                //         this.parentlist[0].gameObject.visible=false;
                //         this.traillist[0].stop();
                //     });
                //     this.guippaths.push(guidp);
                //     //guidp.play();
                // }
                // {
                //     //---------------在非loop情况下，如果设置了委托，在引导走完后就执行oncomplete---------------------------------------------------------
                //     this.parentlist[1].gameObject.visible=true;
                //     this.parentlist[1].localTranslate.x=-5;
                //     this.parentlist[1].markDirty();
                //     var guidp=this.dragonlist[1].gameObject.addComponent("guidpath")as m4m.framework.guidpath;
                //     guidp.setpathasset(path,50,()=>{
                //         this.parentlist[1].gameObject.visible=false;
                //         this.traillist[1].stop();
                //     });
                //     this.guippaths.push(guidp);
                //     //guidp.play();
                // }
                // {
                //     this.parentlist[2].gameObject.visible=true;
                //     m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up,180,this.parentlist[2].localRotate);
                //     this.parentlist[2].markDirty();
                //     var guidp=this.dragonlist[2].gameObject.addComponent("guidpath")as m4m.framework.guidpath;
                //     guidp.setpathasset(path2,50,()=>{
                //         this.parentlist[2].gameObject.visible=false;
                //         this.traillist[2].stop();
                //     });
                //     guidp.play(2);
                //     this.guippaths.push(guidp);
                // }
            }
            state.finish = true;
        };
        test_pathAsset.prototype.update = function (delta) {
            this.taskmgr.move(delta);
        };
        test_pathAsset.prototype.addbtns = function () {
            var _this = this;
            this.addBtn("play", 10, 100, function () {
                for (var i = 0; i < _this.parentlist.length; i++) {
                    _this.parentlist[i].gameObject.visible = true;
                }
                for (var i_2 = 0; i_2 < _this.traillist.length; i_2++) {
                    _this.traillist[i_2].play();
                }
                _this.guippaths[0].play(2);
                _this.guippaths[1].play();
                _this.guippaths[2].play(2);
            });
            this.addBtn("stop", 10, 200, function () {
                for (var i = 0; i < _this.parentlist.length; i++) {
                    _this.parentlist[i].gameObject.visible = false;
                }
                for (var i_3 = 0; i_3 < _this.guippaths.length; i_3++) {
                    _this.traillist[i_3].stop();
                    _this.guippaths[i_3].stop();
                }
            });
        };
        test_pathAsset.prototype.addBtn = function (text, x, y, func) {
            var btn = document.createElement("button");
            btn.textContent = text;
            btn.onclick = function () {
                func();
            };
            btn.style.top = y + "px";
            btn.style.left = x + "px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        return test_pathAsset;
    }());
    t.test_pathAsset = test_pathAsset;
    function DBgetAtrans(mat, meshname) {
        if (meshname === void 0) { meshname = null; }
        var trans = new m4m.framework.transform();
        var meshf = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
        var meshr = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
        meshr.materials = [];
        meshr.materials.push(mat);
        if (meshname == null) {
            var mesh = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultMesh("cube");
            meshf.mesh = mesh;
        }
        else {
            var mesh = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName(meshname);
            meshf.mesh = mesh;
        }
        return trans;
    }
    t.DBgetAtrans = DBgetAtrans;
    function DBgetMat(texname, shaderstring) {
        if (texname === void 0) { texname = null; }
        if (shaderstring === void 0) { shaderstring = null; }
        var mat = new m4m.framework.material();
        if (shaderstring == null) {
            shaderstring = "diffuse.shader.json";
        }
        var shader = m4m.framework.sceneMgr.app.getAssetMgr().getShader(shaderstring);
        mat.setShader(shader);
        if (texname != null) {
            var tex = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName(texname);
            mat.setTexture("_MainTex", tex);
        }
        return mat;
    }
    t.DBgetMat = DBgetMat;
})(t || (t = {}));
var test_loadprefab = /** @class */ (function () {
    function test_loadprefab() {
        this.timer = 0;
    }
    test_loadprefab.prototype.refreshTexture = function (tran) {
        var meshrenderer = tran.gameObject.getComponentsInChildren("meshRenderer");
        var skinnmeshrenderer = tran.gameObject.getComponentsInChildren("skinnedMeshRenderer");
        this.renderer = meshrenderer;
        this.skinRenders = skinnmeshrenderer;
        for (var i = 0; i < meshrenderer.length; i++) {
            var v = meshrenderer[i];
            for (var j = 0; j < v.materials.length; j++) {
                for (var k in v.materials[j].statedMapUniforms) {
                    if (v.materials[j].statedMapUniforms[k].type == m4m.render.UniformTypeEnum.Texture) {
                        var textur = this.app.getAssetMgr().getAssetByName(v.materials[j].statedMapUniforms[k].resname);
                        v.materials[j].setTexture(k, textur);
                    }
                }
            }
        }
        for (var i = 0; i < skinnmeshrenderer.length; i++) {
            var v = skinnmeshrenderer[i];
            for (var j = 0; j < v.materials.length; j++) {
                for (var k in v.materials[j].statedMapUniforms) {
                    if (v.materials[j].statedMapUniforms[k].type == m4m.render.UniformTypeEnum.Texture) {
                        var textur = this.app.getAssetMgr().getAssetByName(v.materials[j].statedMapUniforms[k].resname);
                        v.materials[j].setTexture(k, textur);
                    }
                }
            }
        }
    };
    test_loadprefab.prototype.refreshAniclip = function (tran, name) {
        // let anipalyer = tran.gameObject.getComponentsInChildren("aniplayer") as m4m.framework.aniplayer[];
        // for(let i=0; i<anipalyer.length; i++)
        // {
        //     for (let key in anipalyer[i].clipnames){
        //         let j = anipalyer[i].clipnames[key];
        //         let v = anipalyer[i].clips[j]
        //         let clip = this.app.getAssetMgr().getAssetByName("gs_chuangjue_01_" + v.getName()) as m4m.framework.animationClip;
        //         if (clip){
        //             anipalyer[i].clips[j] = clip;
        //             if (anipalyer[i].clipnames[clip.getName()]){
        //             }else{
        //                 anipalyer[i].clipnames[clip.getName()] = j;
        //             }
        //         }                
        //     }
        //     // for(let j=0; j<anipalyer[i].clips.length; j++)
        //     // {
        //     //     let v = anipalyer[i].clips[j];
        //     //     let clip = this.app.getAssetMgr().getAssetByName(v.getName()) as m4m.framework.animationClip;
        //     //     if (clip){
        //     //         anipalyer[i].clips[j] = clip;
        //     //     }
        //     // }
        //     anipalyer[i].playCross(name,0.2);      
        //     anipalyer[i].playCross("gs_chuangjue_01_" + name,0.2); 
        // }
    };
    test_loadprefab.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        var names = ["elongmul", "0060_duyanshou", "Cube", "0001_fashion", "193_meirenyu"];
        var name = names[0];
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                // this.app.getAssetMgr().load("res/prefabs/" + name + "/meshprefab/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, 
                // (s) => 
                // {
                //     if(s.isfinish)
                //     {
                //         var _prefab: m4m.framework.prefab = this.app.getAssetMgr().getAssetByName(name + ".prefab.json") as m4m.framework.prefab;
                //         this.baihu = _prefab.getCloneTrans();
                //         this.scene.addChild(this.baihu);
                //         this.baihu.localScale = new m4m.math.vector3(50, 50, 50);
                //         this.baihu.localTranslate = new m4m.math.vector3(0, 0, 0);
                //         this.baihu.localEulerAngles = new m4m.math.vector3(0, 180, 0);
                //         objCam.localTranslate = new m4m.math.vector3(0, 20, -10);
                //         objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                //         objCam.markDirty();
                //         this.app.getAssetMgr().load("res/prefabs/" + name + "/textures/" + name + "texture.assetbundle.json", m4m.framework.AssetTypeEnum.Auto,
                //         (s) => 
                //         {
                //             if(s.isfinish)
                //             {
                //                 this.refreshTexture(this.baihu);
                //             }
                //         });
                //         this.app.getAssetMgr().load("res/prefabs/" + name + "/aniclip/resources/" + "Ready.FBAni.aniclip.bin", m4m.framework.AssetTypeEnum.Auto,
                //         (s) => 
                //         {
                //             if(s.isfinish)
                //             {
                //                 this.refreshAniclip(this.baihu);
                //             }
                //         });
                //     }
                // });
                name = "pc1";
                _this.app.getAssetMgr().load("res/prefabs/" + name + "/resources/" + "pc1_wait_idle1.FBAni.aniclip.bin", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        _this.app.getAssetMgr().load("res/prefabs/" + name + "/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                var _prefab = _this.app.getAssetMgr().getAssetByName(name + ".prefab.json");
                                _this.baihu = _prefab.getCloneTrans();
                                _this.scene.addChild(_this.baihu);
                                // this.baihu.localScale = new m4m.math.vector3(50, 50, 50);
                                _this.baihu.localTranslate = new m4m.math.vector3(0, 0, 0);
                                _this.baihu.localEulerAngles = new m4m.math.vector3(0, 180, 0);
                                objCam.localTranslate = new m4m.math.vector3(0, 0, -2);
                                objCam.lookat(_this.baihu);
                                objCam.markDirty();
                                var ani = _this.baihu.gameObject.getComponent("aniplayer");
                                // ani.clipnames;
                                _this.refreshTexture(_this.baihu);
                                _this.app.getAssetMgr().load("res/prefabs/" + name + "/resources/" + "pc1_wait_idle1.FBAni.aniclip.bin", m4m.framework.AssetTypeEnum.Auto, function (s) {
                                    if (s.isfinish) {
                                        _this.refreshAniclip(_this.baihu, "pc1_wait_idle1.FBAni.aniclip.bin");
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
        this.changeShader();
        // name="elong";
        // let isloaded= false;
        // this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
        // {
        //     if (state.isfinish)
        //     {
        //         this.app.getAssetMgr().loadCompressBundle("res/prefabs/" + name + "/" + name + ".assetbundle.json", 
        //             (s) =>
        //             {
        //                 console.log(s.curtask + "/" + s.totaltask);
        //                 console.log(s.curByteLength+"/"+s.totalByteLength);
        //                 if (s.bundleLoadState & m4m.framework.AssetBundleLoadState.Prefab && !isloaded)
        //                 {
        //                     isloaded = true;
        //                     var _prefab: m4m.framework.prefab = this.app.getAssetMgr().getAssetByName(name + ".prefab.json") as m4m.framework.prefab;
        //                     this.baihu = _prefab.getCloneTrans();
        //                     this.scene.addChild(this.baihu);
        //                     // this.baihu.localScale = new m4m.math.vector3(50, 50, 50);
        //                     this.baihu.localTranslate = new m4m.math.vector3(0, 0, 0);
        //                     this.baihu.localEulerAngles = new m4m.math.vector3(0, 180, 0);
        //                     // this.baihu.localEulerAngles = new m4m.math.vector3();
        //                     this.baihu = _prefab.getCloneTrans();
        //                     objCam.localTranslate = new m4m.math.vector3(0, 20, -10);
        //                     objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //                     objCam.markDirty();
        //                     this.renderer = this.baihu.gameObject.getComponentsInChildren("meshRenderer") as m4m.framework.meshRenderer[];
        //                     this.skinRenders = this.baihu.gameObject.getComponentsInChildren(m4m.framework.StringUtil.COMPONENT_SKINMESHRENDER) as m4m.framework.skinnedMeshRenderer[];
        //                     // this.changeShader();
        //                     // for(let i=0; i<22; i++)
        //                     // {
        //                     //     for(let j=0; j<22; j++)
        //                     //     {
        //                     //         let bp = _prefab.getCloneTrans();
        //                     //         bp.localTranslate = new m4m.math.vector3(i - 11, 0, j - 11);
        //                     //         bp.markDirty();
        //                     //         this.scene.addChild(bp);
        //                     //     }
        //                     // }
        //                 }
        //             });
        //     }
        // });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10000;
        this.camera.backgroundColor = new m4m.math.color(0.11, 0.11, 0.11, 1.0);
        // objCam.localTranslate = new m4m.math.vector3(0, 0, -30);
        CameraController.instance().init(this.app, this.camera);
        objCam.markDirty(); //标记为需要刷新
    };
    test_loadprefab.prototype.changeShader = function () {
        var _this = this;
        var btn = document.createElement("button");
        btn.textContent = "切换Shader到：diffuse.shader.json";
        btn.onclick = function () {
            var sh = _this.app.getAssetMgr().getShader("diffuse.shader.json");
            _this.change(sh);
        };
        btn.style.top = "160px";
        btn.style.position = "absolute";
        this.app.container.appendChild(btn);
        var btn2 = document.createElement("button");
        btn2.textContent = "切换Shader到：additive_alpha.shader.json";
        btn2.onclick = function () {
            var sh = _this.app.getAssetMgr().getShader("additive_alpha.shader.json");
            _this.change(sh);
        };
        btn2.style.top = "124px";
        btn2.style.position = "absolute";
        this.app.container.appendChild(btn2);
    };
    test_loadprefab.prototype.change = function (sha) {
        for (var j = 0; j < this.renderer.length; j++) {
            for (var i = 0; i < this.renderer[j].materials.length; i++) {
                this.renderer[j].materials[i].setShader(sha);
                // this.renderer[j].materials[i].setVector4("_TintColor", new m4m.math.vector4(0,1,0,1));
            }
        }
        for (var j = 0; j < this.skinRenders.length; j++) {
            for (var i = 0; i < this.skinRenders[j].materials.length; i++) {
                this.skinRenders[j].materials[i].setShader(sha);
                // this.renderer[j].materials[i].setVector4("_TintColor", new m4m.math.vector4(0,1,0,1));
            }
        }
    };
    test_loadprefab.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        CameraController.instance().update(delta);
    };
    return test_loadprefab;
}());
var testReload = /** @class */ (function () {
    function testReload() {
        //资源放置位置
        this.resRoot = "".concat(resRootPath, "prefab/");
        //关心的 部位
        this.careSubList = ["body", "face", "handL", "handR", "head", "leg"];
        //模型名字
        this.r_a_Name = "fs";
        this.r_b_Name = "0001_shengyi_male";
        this.uileft = 0;
        this.timer = 0;
    }
    testReload.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var objCam, hoverc, o2d, _prefab, r_a, r_b, _aniplayer;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("i am here.");
                        this.app = app;
                        this.scene = this.app.getScene();
                        objCam = new m4m.framework.transform();
                        objCam.name = "sth.";
                        this.scene.addChild(objCam);
                        this.camera = objCam.gameObject.addComponent("camera");
                        this.camera.near = 0.01;
                        this.camera.far = 10000;
                        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
                        hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 10;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                        o2d = new m4m.framework.overlay2D();
                        this.camera.addOverLay(o2d);
                        // await demoTool.loadbySync(`${resRootPath}shader/shader.assetbundle.json`, this.app.getAssetMgr());
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.app.getAssetMgr())];
                    case 1:
                        // await demoTool.loadbySync(`${resRootPath}shader/shader.assetbundle.json`, this.app.getAssetMgr());
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "font/STXINGKA.TTF.png"), this.app.getAssetMgr())];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "font/STXINGKA.font.json"), this.app.getAssetMgr())];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(this.resRoot).concat(this.r_a_Name, "/").concat(this.r_a_Name, ".assetbundle.json"), this.app.getAssetMgr())];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(this.resRoot).concat(this.r_b_Name, "/").concat(this.r_b_Name, ".assetbundle.json"), this.app.getAssetMgr())];
                    case 5:
                        _a.sent();
                        _prefab = this.app.getAssetMgr().getAssetByName("".concat(this.r_a_Name, ".prefab.json"), "".concat(this.r_a_Name, ".assetbundle.json"));
                        r_a = _prefab.getCloneTrans();
                        r_a.localScale = new m4m.math.vector3(1, 1, 1);
                        r_a.localTranslate = new m4m.math.vector3(0, 0, 0);
                        this.scene.addChild(r_a);
                        _prefab = this.app.getAssetMgr().getAssetByName("".concat(this.r_b_Name, ".prefab.json"), "".concat(this.r_b_Name, ".assetbundle.json"));
                        r_b = _prefab.getCloneTrans();
                        _aniplayer = r_a.gameObject.getComponent("aniplayer");
                        _aniplayer.autoplay = true;
                        //查找 共同的 部件
                        // 布置按钮
                        this.careSubList.forEach(function (v, i) {
                            _this.createChangeBtn(r_a, r_b, o2d, v);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    testReload.prototype.createChangeBtn = function (role, role1, o2d, part) {
        var _this = this;
        //设置UI
        var t2d_9 = new m4m.framework.transform2D();
        t2d_9.width = 120;
        t2d_9.height = 30;
        t2d_9.pivot.x = 0;
        t2d_9.pivot.y = 0;
        t2d_9.localTranslate.x = this.uileft;
        t2d_9.localTranslate.y = 0;
        var btn = t2d_9.addComponent("button");
        var img9 = t2d_9.addComponent("image2D");
        img9.imageType = m4m.framework.ImageType.Sliced;
        btn.targetImage = img9;
        btn.transition = m4m.framework.TransitionType.ColorTint; //颜色变换
        o2d.addChild(t2d_9);
        var lab = new m4m.framework.transform2D();
        var opt = m4m.framework.layoutOption;
        lab.layoutState = opt.H_CENTER | opt.V_CENTER;
        lab.name = "lab111";
        lab.width = 150;
        lab.height = 50;
        lab.markDirty();
        var label = lab.addComponent("label");
        label.text = "换" + part;
        label.fontsize = 25;
        label.color = new m4m.math.color(1, 0, 0, 1);
        // label.verticalOverflow = false;
        label.horizontalOverflow = false;
        t2d_9.addChild(lab);
        img9.sprite = this.app.getAssetMgr().getDefaultSprite("white_sprite");
        label.font = this.app.getAssetMgr().getAssetByName("STXINGKA.font.json"); //;
        this.uileft += 130;
        //事件简体
        var r_a_part;
        var r_b_part;
        var role_skinMeshRenders = role.gameObject.getComponentsInChildren("skinnedMeshRenderer");
        var role1_skinMeshRenders = role1.gameObject.getComponentsInChildren("skinnedMeshRenderer");
        btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            r_a_part = null;
            r_b_part = null;
            for (var key in role_skinMeshRenders) {
                var name_1 = role_skinMeshRenders[key].gameObject.getName();
                if (name_1.toLowerCase().indexOf(part.toLowerCase()) != -1) {
                    r_a_part = role_skinMeshRenders[key];
                    break;
                }
            }
            for (var key in role1_skinMeshRenders) {
                var name_2 = role1_skinMeshRenders[key].gameObject.getName();
                if (name_2.toLowerCase().indexOf(part.toLowerCase()) != -1) {
                    r_b_part = role1_skinMeshRenders[key];
                    break;
                }
            }
            if (!r_a_part || !r_b_part) {
                console.warn("\u66F4\u6362\u8282\u70B9 ".concat(part.toLowerCase(), " \u66F4\u6362\u5931\u8D25 \uFF01 \u68C0\u67E5\u4E00\u4E0B this.careSubList \u4E2D \u662F\u5426\u5305\u542B  "));
                return;
            }
            _this.excangeSub(r_a_part, r_b_part);
        }, this);
    };
    testReload.prototype.excangeSub = function (r_a_part, r_b_part) {
        //交换位置
        var role_part_parent = r_a_part.gameObject.transform.parent;
        r_b_part.gameObject.transform.parent.addChild(r_a_part.gameObject.transform);
        role_part_parent.addChild(r_b_part.gameObject.transform);
        var role_part_player = r_a_part.player;
        r_a_part._player = r_b_part.player;
        r_b_part._player = role_part_player;
    };
    testReload.prototype.update = function (delta) {
    };
    return testReload;
}());
/** 加载分步资源包 */
var test_f4skin = /** @class */ (function () {
    function test_f4skin() {
        this.timer = 0;
    }
    test_f4skin.prototype.boneConfig = function (bone, yOffset, rotate) {
        if (yOffset === void 0) { yOffset = 4; }
        if (rotate === void 0) { rotate = 10; }
        var mf = bone.gameObject.addComponent('meshFilter');
        mf.mesh = this.app.getAssetMgr().getDefaultMesh("cube");
        var mr = bone.gameObject.addComponent('meshRenderer');
        bone.localTranslate.x = yOffset;
        // m4m.math.quatFromEulerAngles(0, 0, rotate, bone.localRotate);
        bone.markDirty();
    };
    test_f4skin.prototype.assembSkeleton = function (segment) {
        var bones = [];
        for (var i = 0; i < segment; i++) {
            var bone = new m4m.framework.transform();
            bone.name = 'bone_' + i;
            bones[i] = bone;
            if (i) {
                this.boneConfig(bone);
                var parent_1 = bones[i - 1];
                parent_1.addChild(bone);
            }
            else {
                this.boneConfig(bone, 0);
                // bone.localTranslate.z = 0.5;
            }
        }
        return bones;
    };
    test_f4skin.prototype.createMesh = function (ctx) {
        var mesh = new m4m.framework.mesh();
        var NumVertsPerRow = 5;
        var NumVertsPerCol = 2;
        var CellSpacing = 2;
        var boneAmount = 3;
        var _NumCellsPerRow;
        var _NumCellsPerCol;
        var _Width;
        var _Depth;
        var _NumVertices;
        var _NumTriangles;
        _NumCellsPerRow = NumVertsPerRow - 1;
        _NumCellsPerCol = NumVertsPerCol - 1;
        _Width = _NumCellsPerRow * CellSpacing;
        _Depth = _NumCellsPerCol * CellSpacing;
        _NumVertices = NumVertsPerRow * NumVertsPerCol;
        _NumTriangles = _NumCellsPerRow * _NumCellsPerCol * 2;
        var data = mesh.data = new m4m.render.meshData();
        var _Vertices = data.pos = [];
        // let _UV: m4m.math.vector2[] = data.uv = [];
        // let _UV2: m4m.math.vector2[] = data.uv2 = [];
        var _Colours = data.color = [];
        var _BoneIndex = data.blendIndex = [];
        var _BoneWeight = data.blendWeight = [];
        var _Indices = data.trisindex = [];
        var StartZ = -1;
        var EndZ = _Depth;
        var StartX = 0;
        // const StartX = -(_Width / 2);
        var EndX = _Width;
        // const EndX = _Width / 2;
        var fUI = _NumCellsPerRow * 0.5 / _NumCellsPerRow;
        var fVI = _NumCellsPerCol * 0.5 / _NumCellsPerCol;
        var i = 0;
        var fWaterStep = 0.0;
        var bw = [
            [1, 0, 0, 0],
            [0.7, 0.3, 0, 0],
            [0.5, 0.5, 0, 0],
            [0, 0.6, 0.4, 0],
            [0, 0, 1, 0],
        ];
        var bi = [
            [0, 1, 2, 3],
            [0, 1, 2, 3],
            [0, 1, 2, 3],
            [0, 1, 2, 3],
            [0, 1, 2, 3],
        ];
        for (var z = StartZ; z <= EndZ; z += CellSpacing) {
            var j = 0;
            for (var x = StartX; x <= EndX; x += CellSpacing) {
                var iIndex = i * NumVertsPerRow + j;
                _Vertices[iIndex] = new m4m.math.vector3();
                _Colours[iIndex] = new m4m.math.vector4();
                _BoneIndex[iIndex] = new m4m.math.vector4();
                _BoneWeight[iIndex] = new m4m.math.vector4();
                // _UV[iIndex] = new m4m.math.vector2();
                // _UV2[iIndex] = new m4m.math.vector2();
                _Vertices[iIndex].x = x;
                _Vertices[iIndex].y = 0;
                _Vertices[iIndex].z = z;
                console.log('j ' + j);
                console.log('x ' + x);
                _BoneWeight[iIndex].x = _Colours[iIndex].x = bw[j][0];
                _BoneWeight[iIndex].y = _Colours[iIndex].y = bw[j][1];
                _BoneWeight[iIndex].z = _Colours[iIndex].z = bw[j][2];
                _BoneWeight[iIndex].w = bw[j][3];
                _Colours[iIndex].w = 1;
                _BoneIndex[iIndex].x = bi[j][0];
                _BoneIndex[iIndex].y = bi[j][1];
                _BoneIndex[iIndex].z = bi[j][2];
                _BoneIndex[iIndex].w = bi[j][3] = 1;
                // const absZ = Math.abs(z);
                // if(absZ < 1.0 && absZ >= 0.0) {
                //     _Colours[iIndex].y = 0;
                // }
                // _Colours[iIndex].x = Math.sin(fWaterStep);
                // // fWaterStep += 0.01 + this.RandomRange(0.01, 0.02);
                // _Colours[iIndex].z = 1; // Unnecessary
                // _Vertices[iIndex].z = z;
                // _UV[iIndex].x = j * fUI;
                // _UV[iIndex].y = i * fVI;
                // _UV2[iIndex].x = j * fUI;
                // _UV2[iIndex].y = i * fVI;
                ++j;
            }
            // fWaterStep += 0.3 + this.RandomRange(0.1, 1.4);
            ++i;
        }
        var iBaseIndex = 0;
        for (var i_4 = 0; i_4 < _NumCellsPerCol; ++i_4) {
            for (var j = 0; j < _NumCellsPerRow; ++j) {
                _Indices[iBaseIndex] = i_4 * NumVertsPerRow + j;
                _Indices[iBaseIndex + 1] = i_4 * NumVertsPerRow + j + 1;
                _Indices[iBaseIndex + 2] = (i_4 + 1) * NumVertsPerRow + j;
                _Indices[iBaseIndex + 3] = (i_4 + 1) * NumVertsPerRow + j;
                _Indices[iBaseIndex + 4] = i_4 * NumVertsPerRow + j + 1;
                _Indices[iBaseIndex + 5] = (i_4 + 1) * NumVertsPerRow + j + 1;
                iBaseIndex += 6;
            }
        }
        // this._Vertices = _Vertices;
        // this._UV = _UV;
        // this._UV2 = _UV2;
        // this._Colours = _Colours;
        // this._Indices = _Indices;
        // this._Position = this.m_transform.localTranslate;
        // Update mesh
        // const mf = this.gameObject.getComponent('meshFilter') as m4m.framework.meshFilter;
        mesh.glMesh = new m4m.render.glMesh();
        var vf = m4m.render.VertexFormatMask.Position
            | m4m.render.VertexFormatMask.Color
            | m4m.render.VertexFormatMask.BlendIndex4
            | m4m.render.VertexFormatMask.BlendWeight4;
        mesh.glMesh.initBuffer(ctx, vf, _Vertices.length, m4m.render.MeshTypeEnum.Dynamic);
        // create binary buffer
        var bs = 3 + 4 + 4 + 4; // byteStride
        // const bs = 3 + 4;	// byteStride
        // const bs = 3 + 4 + 4;	// byteStride
        var vbo = new Float32Array(_Vertices.length * bs);
        for (var v = 0; v < _Vertices.length; v++) {
            var cur = vbo.subarray(v * bs); // offset
            var position = cur.subarray(0, 3);
            var color = cur.subarray(3, 7);
            var boneIndex = cur.subarray(7, 11);
            var boneWeight = cur.subarray(11, 15);
            // let uv = cur.subarray(7, 9);
            // let uv2 = cur.subarray(9);
            position[0] = _Vertices[v].x;
            position[1] = _Vertices[v].y;
            position[2] = _Vertices[v].z;
            boneIndex[0] = _BoneIndex[v].x;
            boneIndex[1] = _BoneIndex[v].y;
            boneIndex[2] = _BoneIndex[v].z;
            boneIndex[3] = _BoneIndex[v].w;
            boneWeight[0] = _BoneWeight[v].x;
            boneWeight[1] = _BoneWeight[v].y;
            boneWeight[2] = _BoneWeight[v].z;
            boneWeight[3] = _BoneWeight[v].w;
            color[0] = _Colours[v].x;
            color[1] = _Colours[v].y;
            color[2] = _Colours[v].z;
            color[3] = _Colours[v].w;
            // uv[0] = _UV[v].x;
            // uv[1] = _UV[v].y;
            // uv2[0] = _UV2[v].x;
            // uv2[1] = _UV2[v].y;
        }
        var ebo = new Uint16Array(_Indices);
        mesh.glMesh.uploadVertexData(ctx, vbo);
        mesh.glMesh.addIndex(ctx, ebo.length);
        mesh.glMesh.uploadIndexData(ctx, 0, ebo);
        mesh.submesh = [];
        var sm = new m4m.framework.subMeshInfo();
        sm.matIndex = 0;
        sm.useVertexIndex = 0;
        sm.start = 0;
        sm.size = ebo.length;
        sm.line = false;
        mesh.submesh.push(sm);
        mesh.glMesh.uploadIndexSubData(ctx, 0, ebo);
        mesh.glMesh.initVAO();
        return mesh;
    };
    test_f4skin.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var objCam, sample, mr, joints, loadNameRes, pf, orig, anip11, cName, _a, f4, f5, anim, _b, anip, anip2, bite;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        console.log("i am here.");
                        this.app = app;
                        this.scene = this.app.getScene();
                        m4m.framework.assetMgr.openGuid = false;
                        objCam = new m4m.framework.transform();
                        objCam.name = "sth.";
                        this.scene.addChild(objCam);
                        this.camera = objCam.gameObject.addComponent("camera");
                        this.camera.near = 0.01;
                        this.camera.far = 100;
                        objCam.localTranslate = new m4m.math.vector3(0, 10, -10); //?
                        objCam.markDirty(); //标记为需要刷新
                        return [4 /*yield*/, util.loadShader(app.getAssetMgr())];
                    case 1:
                        _c.sent();
                        sample = new m4m.framework.transform();
                        mr = sample.gameObject.addComponent('f4skinnedMeshRenderer');
                        mr.materials = [];
                        mr.materials[0] = new m4m.framework.material('mat');
                        // debugger
                        mr.materials[0].setShader(this.app.getAssetMgr().getShader("f4skin.shader.json"));
                        mr.mesh = this.createMesh(this.app.webgl);
                        joints = this.assembSkeleton(3);
                        this.scene.addChild(sample);
                        this.scene.addChild(joints[0]);
                        this.bones = mr.bones = joints;
                        mr.initStaticPoseMatrices();
                        mr.initBoneMatrices();
                        // mr.materials[0].setTexture("boneSampler", mr.boneMatricesTexture);
                        objCam.lookat(sample);
                        loadNameRes = "PF_PlayerSharkAlien";
                        // let loadNameRes = "DragonHigh_prefab_boss";
                        return [4 /*yield*/, util.loadModel(this.app.getAssetMgr(), loadNameRes)];
                    case 2:
                        // let loadNameRes = "DragonHigh_prefab_boss";
                        _c.sent();
                        pf = this.app.getAssetMgr().getAssetByName("".concat(loadNameRes, ".prefab.json"), "".concat(loadNameRes, ".assetbundle.json")).getCloneTrans();
                        orig = pf.clone();
                        this.scene.addChild(orig);
                        anip11 = orig.gameObject.getComponentsInChildren("keyFrameAniPlayer")[0];
                        cName = anip11.clips[0].getName();
                        anip11.play(cName);
                        _a = pf.gameObject.getComponentsInChildren('f4skinnedMeshRenderer'), f4 = _a[0], f5 = _a[1];
                        f4.materials[0].setShader(this.app.getAssetMgr().getShader("f4skin.shader.json"));
                        pf.gameObject.getComponentsInChildren("ParticleSystem").forEach(function (v) {
                            var ps = v;
                            ps.main.loop = true;
                            ps.play();
                        });
                        anim = f5.gameObject.transform.parent;
                        anim.parent.removeChild(anim);
                        f4.bones[3].addChild(anim);
                        pf.localTranslate.x = 0;
                        pf.localTranslate.z -= 2;
                        pf.localTranslate.y = 4;
                        console.log(f4);
                        window['f4'] = f4;
                        window['f5'] = f5;
                        this.f4 = pf;
                        _b = pf.gameObject.getComponentsInChildren("keyFrameAniPlayer"), anip = _b[0], anip2 = _b[1];
                        console.log(anip);
                        console.log(anip2);
                        // anip.playByName('bite.keyframeAniclip.json');
                        // anip2.play();
                        anip.play();
                        window['anip'] = anip2;
                        bite = function (value) {
                            if (value === void 0) { value = 190; }
                            anip.rewind();
                            anip.play('bite.keyframeAniclip.json');
                            setTimeout(function () {
                                anip2.rewind();
                                anip2.play();
                            }, value);
                        };
                        window['bite'] = bite;
                        app.showFps();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_f4skin.prototype.rotate = function (bone, valuey, valuez) {
        m4m.math.quatFromEulerAngles(0, valuey, valuez, bone.localRotate);
    };
    test_f4skin.prototype.update = function (delta) {
        this.timer += delta;
        if (this.bones && this.bones.length) {
            this.rotate(this.bones[0], Math.sin(this.timer * 2) * 50, Math.cos(this.timer * 4) * 40 * 0);
            this.rotate(this.bones[1], Math.sin(this.timer * 2) * 80, Math.cos(this.timer * 4) * -80 * 0);
            this.rotate(this.bones[2], Math.sin(this.timer * 2) * 60, Math.cos(this.timer * 4) * 80 * 0);
        }
        if (window['f4']) {
            m4m.math.quatFromEulerAngles(0, this.timer * 10, 0, this.f4.localRotate);
        }
    };
    return test_f4skin;
}());
var test_3DPhysics_baseShape = /** @class */ (function () {
    function test_3DPhysics_baseShape() {
        this.mrs = [];
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_baseShape.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_baseShape.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_floor = physics3dDemoTool.mats["white"];
        //构建物体-------------------
        //底面
        var trans = new m4m.framework.transform();
        trans.localScale.x = 20;
        trans.localScale.y = 0.01;
        trans.localScale.z = 20;
        this.scene.addChild(trans);
        physics3dDemoTool.attachMesh(trans, mat_floor, "cube");
        //box
        var trans2 = new m4m.framework.transform();
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        this.scene.addChild(trans2);
        var mr2 = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 15;
        trans3.localPosition.x = -0.2;
        trans3.localPosition.z = 0.2;
        this.scene.addChild(trans3);
        var mr3 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        var mr_cl = physics3dDemoTool.attachMesh(cylinder_mid, mat_activated, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0), new m4m.framework.OimoJSPlugin());
        var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.PlaneImpostor, { mass: 0, restitution: 0.1, friction: 0.9 });
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6, friction: 0.5, disableBidirectionalTransformation: true });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 1, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 1, restitution: 0.6, friction: 0.5 });
        this.mrs.push(mr2, mr3, mr_cl);
    };
    test_3DPhysics_baseShape.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_baseShape;
}());
/**
 * 3d物理 复合物理对象 compound
 */
var test_3DPhysics_compound = /** @class */ (function () {
    function test_3DPhysics_compound() {
        this.mrs = [];
        this.types = ['box', 'box', 'box', 'box', 'box', 'box', 'box', 'box'];
        // private types = [ 'box'];
        this.sizes = [30, 5, 30, 4, 30, 4, 4, 30, 4, 4, 30, 4, 4, 30, 4, 4, 30, 4, 4, 30, 4, 23, 10, 3];
        this.positions = [0, 0, 0, 12, -16, 12, -12, -16, 12, 12, -16, -12, -12, -16, -12, 12, 16, -12, -12, 16, -12, 0, 25, -12];
        this.chairId = 0;
        this.guiMsg = "复合物理对象 demo ";
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.cachePickInfo = new m4m.framework.pickinfo();
        this.cacheRota = new m4m.math.quaternion();
        this.cache_y = 0;
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_compound.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        return [4 /*yield*/, demoTool.loadbySync("./".concat(resRootPath, "prefab/Capsule/Capsule.assetbundle.json"), this.astMgr)];
                    case 2:
                        _a.sent();
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    //创建一把 椅子
    test_3DPhysics_compound.prototype.crateChair = function () {
        var chairTran = new m4m.framework.transform();
        m4m.math.vec3Set(chairTran.localPosition, 0, 3, 5);
        m4m.math.vec3SetAll(chairTran.localScale, 3);
        this.scene.addChild(chairTran);
        chairTran.name = "chair_".concat(this.chairId);
        this.chairId++;
        var len = this.types.length;
        var mat = physics3dDemoTool.mats["activated"];
        var mesh, n, m;
        var sizes = this.sizes;
        var positions = this.positions;
        var tag = "_chairItype_";
        var subs = [];
        var scale = 3;
        for (var i = 0; i < len; i++) {
            var sunTran = new m4m.framework.transform();
            sunTran.name = "sub_".concat(len);
            n = i * 3;
            // m = new THREE.Matrix4().makeTranslation( positions[n+0], positions[n+1], positions[n+2] );
            m4m.math.vec3Set(sunTran.localPosition, positions[n + 0] / 100 * scale, positions[n + 1] / 100 * scale, positions[n + 2] / 100 * scale);
            m4m.math.vec3Set(sunTran.localScale, sizes[n + 0] / 100 * scale, sizes[n + 1] / 100 * scale, sizes[n + 2] / 100 * scale);
            chairTran.addChild(sunTran);
            var meshName = "cube";
            // if(i==1 || i==2 || i==3 || i==4 || i==5 || i==6) meshName = "cylinder";
            physics3dDemoTool.attachMesh(sunTran, mat, meshName, true);
            var itype = meshName == "cylinder" ? m4m.framework.ImpostorType.CylinderImpostor : m4m.framework.ImpostorType.BoxImpostor;
            sunTran[tag] = itype;
            subs.push(sunTran);
        }
        subs.forEach(function (c) {
            new m4m.framework.PhysicsImpostor(c, c[tag], { mass: 0.5 });
        });
        // new m4m.framework.PhysicsImpostor(chairTran, m4m.framework.ImpostorType.NoImpostor, { mass: 1,friction:0.8, disableBidirectionalTransformation : true});
        new m4m.framework.PhysicsImpostor(chairTran, m4m.framework.ImpostorType.NoImpostor, { mass: 1, friction: 0.8 });
        var mr = chairTran.gameObject.addComponent("meshRenderer");
        this.mrs.push(mr);
        return chairTran;
    };
    /** 创建胶囊体 */
    test_3DPhysics_compound.prototype.crateCapsule = function (showCollisionMesh) {
        if (showCollisionMesh === void 0) { showCollisionMesh = false; }
        var mat_activated = physics3dDemoTool.mats["activated"];
        //组合 碰撞体--------------------
        //父层级
        var combination = new m4m.framework.transform();
        combination.name = "Capsule";
        combination.localPosition.y = 10;
        this.scene.addChild(combination);
        //显示模型
        //外部加载mesh (capsule)
        var p1 = this.astMgr.getAssetByName("Capsule.prefab.json", "Capsule.assetbundle.json");
        var capsule = p1.getCloneTrans();
        capsule.name = "capsule";
        combination.addChild(capsule);
        //top sphere
        var sphere_top = new m4m.framework.transform();
        sphere_top.name = "sphere_top";
        sphere_top.gameObject.visible = showCollisionMesh;
        sphere_top.localPosition.y = 0.5;
        m4m.math.vec3SetAll(sphere_top.localScale, 0.5);
        combination.addChild(sphere_top);
        physics3dDemoTool.attachMesh(sphere_top, mat_activated, "sphere", true);
        //mid 
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder_mid";
        cylinder_mid.gameObject.visible = showCollisionMesh;
        m4m.math.vec3Set(cylinder_mid.localScale, 1, 0.5, 1);
        combination.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_activated, "cylinder", true);
        //bottom sphere
        var sphere_bottom = new m4m.framework.transform();
        sphere_bottom.gameObject.visible = showCollisionMesh;
        sphere_bottom.name = "sphere_bottom";
        sphere_bottom.localPosition.y = -0.5;
        m4m.math.vec3SetAll(sphere_bottom.localScale, 0.5);
        combination.addChild(sphere_bottom);
        physics3dDemoTool.attachMesh(sphere_bottom, mat_activated, "sphere", true);
        //组合 碰撞体
        var s_top_Impostor = new m4m.framework.PhysicsImpostor(sphere_top, m4m.framework.ImpostorType.SphereImpostor, { mass: 1, restitution: 0.3, disableBidirectionalTransformation: true });
        var c_mid_Impostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 1, restitution: 0.3 });
        var s_bottom_Impostor = new m4m.framework.PhysicsImpostor(sphere_bottom, m4m.framework.ImpostorType.SphereImpostor, { mass: 1, restitution: 0.3 });
        var combImpostor = new m4m.framework.PhysicsImpostor(combination, m4m.framework.ImpostorType.NoImpostor, { mass: 1, restitution: 0.3 });
        var mr = combination.gameObject.addComponent("meshRenderer");
        this.mrs.push(mr);
        return combination;
    };
    test_3DPhysics_compound.prototype.init = function () {
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0), new m4m.framework.OimoJSPlugin());
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_yellow = physics3dDemoTool.mats["yellow"];
        var mat_white = physics3dDemoTool.mats["white"];
        //构建物体-------------------
        //底面
        var trans = new m4m.framework.transform();
        this.floor = trans;
        trans.localScale.x = 20;
        trans.localScale.y = 0.01;
        trans.localScale.z = 20;
        this.scene.addChild(trans);
        physics3dDemoTool.attachMesh(trans, mat_white, "cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 15;
        trans3.localPosition.x = -0.2;
        trans3.localPosition.z = 0.2;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.PlaneImpostor, { mass: 0, restitution: 0.1, friction: 0.9 });
        //chair 复合物体 需要放置在 静态地板之后 不然会有异常（omio 的BUG）
        var _c = this.crateChair();
        this.crateCapsule();
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2, restitution: 0.5, kinematic: true });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //apply Target set
        this.targetTran = _c;
        //鼠标事件
        this.iptMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onPonitMove, this);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_compound.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        //方法
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseTarget');
        folderFun.add(this, 'applyReset');
    };
    //重置
    test_3DPhysics_compound.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    test_3DPhysics_compound.prototype.impulseTarget = function () {
        this.doImpulse(this.targetTran.physicsImpostor);
    };
    test_3DPhysics_compound.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    //移动 到射线点
    test_3DPhysics_compound.prototype.onPonitMove = function (_a) {
        var x = _a[0], y = _a[1];
        var viewPos = m4m.poolv2();
        viewPos.x = x;
        viewPos.y = y;
        console.log("x: ".concat(x, " ,y :").concat(y));
        var ray = this.camera.creatRayByScreen(viewPos, this.app);
        var mf = this.floor.gameObject.getComponent("meshFilter");
        var isinsrt = mf.mesh.intersects(ray, this.floor.getWorldMatrix(), this.cachePickInfo);
        if (!isinsrt || !this.cachePickInfo || !this.cachePickInfo.hitposition)
            return;
        var pos = this.cachePickInfo.hitposition;
        console.log("pos  x: ".concat(pos.x, " ,y :").concat(pos.y, " , z: ").concat(pos.z));
        //同步ctr box 位置
        pos.y += 0.55;
        this.boxTran.physicsImpostor.kinematicSetPosition(pos); //更新动力学 位置
        m4m.poolv2_del(viewPos);
    };
    test_3DPhysics_compound.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_compound;
}());
/**
 * 3d物理 爆炸
 */
var test_3DPhysics_explode = /** @class */ (function () {
    function test_3DPhysics_explode() {
        this.mrs = [];
        this.redSphere = new m4m.framework.transform();
        this.boxList = [];
        this.guiMsg = "中心点爆炸 样例 ";
        this.enumArr = [];
        this.optStrs = [];
        this.freezeDic = {};
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.delta = 0;
        this.movespeed = 10;
        this.explodeFroce = 100; //爆炸冲击力
        this.explodeRadius = 10; //爆炸冲击半径（线性衰减）
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_explode.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_explode.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["yellow"];
        var mat_white = physics3dDemoTool.mats["white"];
        var mat_purple = physics3dDemoTool.mats["purple"];
        //构建物体-------------------
        //底面
        var trans = new m4m.framework.transform();
        this.floor = trans;
        trans.localScale.x = 20;
        trans.localScale.y = 0.01;
        trans.localScale.z = 20;
        this.scene.addChild(trans);
        physics3dDemoTool.attachMesh(trans, mat_white, "cube");
        //爆炸点 qiu
        var redSphere = new m4m.framework.transform();
        m4m.math.vec3SetAll(redSphere.localScale, 0.5);
        this.redSphere = redSphere;
        redSphere.name = "redSphere";
        m4m.math.vec3Set(redSphere.localPosition, 1, 3, 1);
        this.scene.addChild(redSphere);
        physics3dDemoTool.attachMesh(redSphere, mat_purple, "sphere");
        var boxList = [];
        this.boxList = boxList;
        //堆一个塔
        var gap = 0.3;
        var size = 1;
        var posOffset = new m4m.math.vector3(0, 0.2, 0);
        var w = 2;
        var d = 2;
        var h = 3;
        for (var i = 0; i < w; i++) {
            for (var j = 0; j < d; j++) {
                for (var k = 0; k < h; k++) {
                    var boxtran = new m4m.framework.transform();
                    boxtran.name = "box_".concat(i, "_").concat(j, "_").concat(k);
                    boxtran.localPosition.x = posOffset.x + i * size + gap;
                    boxtran.localPosition.z = posOffset.z + j * size + gap;
                    boxtran.localPosition.y = posOffset.y + k * size + gap;
                    this.scene.addChild(boxtran);
                    var mr = physics3dDemoTool.attachMesh(boxtran, mat_activated, "cube");
                    boxList.push(mr);
                    this.mrs.push(mr);
                }
            }
        }
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0), new m4m.framework.OimoJSPlugin());
        var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.PlaneImpostor, { mass: 0, restitution: 0.1, friction: 0.9 });
        boxList.forEach(function (box) {
            new m4m.framework.PhysicsImpostor(box.gameObject.transform, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6, friction: 0.5 });
        });
        //apply Target set
        // this.targetTran = this.cylinderTran;
        //鼠标事件
        //this.iptMgr.addPointListener(m4m.event.PointEventEnum.PointMove,this.onPonitMove,this);
        this.iptMgr.addKeyListener(m4m.event.KeyEventEnum.KeyDown, this.keyDown, this);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_explode.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        gui.add(this, "explodeFroce", 1, 100); //爆点 推力
        gui.add(this, "explodeRadius", 0.1, 10); //爆炸冲击半径
        //方法
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        //folderFun.add(this, 'impulseTarget' );
        folderFun.add(this, 'doExplode');
        folderFun.add(this, 'applyReset');
    };
    test_3DPhysics_explode.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    test_3DPhysics_explode.prototype.impulseTarget = function () {
        if (!this.targetTran)
            return;
        this.doImpulse(this.targetTran.physicsImpostor);
    };
    test_3DPhysics_explode.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_explode.prototype.doExplode = function () {
        this.explode(this.redSphere.localPosition);
    };
    /** 移动 ↑ ↓ ← → 7 4  ， 爆炸 0 */
    test_3DPhysics_explode.prototype.keyDown = function (_a) {
        var keyCode = _a[0];
        switch (keyCode) {
            case m4m.event.KeyCode.ArrowUp:
                this.redSphere.localPosition.y += this.delta * this.movespeed;
                break;
            case m4m.event.KeyCode.ArrowDown:
                this.redSphere.localPosition.y -= this.delta * this.movespeed;
                break;
            case m4m.event.KeyCode.ArrowLeft:
                this.redSphere.localPosition.x -= this.delta * this.movespeed;
                break;
            case m4m.event.KeyCode.ArrowRight:
                this.redSphere.localPosition.x += this.delta * this.movespeed;
                break;
            case m4m.event.KeyCode.Numpad7:
                this.redSphere.localPosition.z += this.delta * this.movespeed;
                break;
            case m4m.event.KeyCode.Numpad4:
                this.redSphere.localPosition.z -= this.delta * this.movespeed;
                break;
        }
        this.redSphere.localPosition = this.redSphere.localPosition;
    };
    /** 爆炸 */
    test_3DPhysics_explode.prototype.explode = function (point) {
        var _this = this;
        if (!point)
            return;
        this.boxList.forEach(function (box) {
            if (box) {
                var tv3 = m4m.poolv3();
                m4m.math.vec3Subtract(box.gameObject.transform.localPosition, point, tv3);
                var len = m4m.math.vec3Length(tv3);
                m4m.math.vec3Normalize(tv3, tv3);
                len = Math.min(len, _this.explodeRadius);
                var rate = 1 - (len / _this.explodeRadius);
                if (rate > 0.00001) {
                    var froce = rate * _this.explodeFroce; //承受的力
                    m4m.math.vec3ScaleByNum(tv3, froce, tv3);
                    box.gameObject.transform.physicsImpostor.applyImpulse(tv3, box.gameObject.transform.localPosition);
                }
                m4m.poolv3_del(tv3);
            }
        });
    };
    test_3DPhysics_explode.prototype.update = function (delta) {
        this.tcount += delta;
        this.delta = delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_explode;
}());
/**
 * 3d物理 位置 和 旋转冻结
 */
var test_3DPhysics_freeze = /** @class */ (function () {
    function test_3DPhysics_freeze() {
        this.mrs = [];
        this.guiMsg = "冻结测试demo ";
        this.enumArr = [];
        this.optStrs = [];
        this.freezeDic = {};
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.cachePickInfo = new m4m.framework.pickinfo();
        this.cacheRota = new m4m.math.quaternion();
        this.cache_y = 0;
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_freeze.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_freeze.prototype.init = function () {
        var _this = this;
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        var mat_white = physics3dDemoTool.mats["white"];
        //构建物体-------------------
        //底面
        var trans = new m4m.framework.transform();
        this.floor = trans;
        trans.localScale.x = 20;
        trans.localScale.y = 0.01;
        trans.localScale.z = 20;
        this.scene.addChild(trans);
        physics3dDemoTool.attachMesh(trans, mat_white, "cube");
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 15;
        trans3.localPosition.x = -0.2;
        trans3.localPosition.z = 0.2;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        this.cylinderTran = cylinder_mid;
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        var mr2 = physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0), new m4m.framework.OimoJSPlugin());
        var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.PlaneImpostor, { mass: 0, restitution: 0.1, friction: 0.9 });
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2, restitution: 0.5, kinematic: true });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 1, friction: 0.5 });
        this.mrs.push(mr1, mr2);
        //apply Target set
        this.targetTran = this.cylinderTran;
        //Freeze
        var ft = m4m.framework.FreezeType;
        var arr = [ft.Position_x, ft.Position_y, ft.Position_z, ft.Rotation_x, ft.Rotation_y, ft.Rotation_z];
        this.enumArr = arr;
        var opts = [true, false, false, true, true, false];
        arr.forEach(function (o, i) {
            var str = ft[o];
            _this.optStrs.push(str);
            _this.freezeDic[str] = opts[i];
        });
        //this.applyFreezeOpt();
        //鼠标事件
        this.iptMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onPonitMove, this);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_freeze.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        //冻结选项
        var folderFreeze = gui.addFolder("Freeze (冻结选项)");
        this.optStrs.forEach(function (o) {
            folderFreeze.add(_this.freezeDic, o);
        });
        folderFreeze.open();
        //方法
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseTarget');
        folderFun.add(this, 'applyFreezeOpt');
        folderFun.add(this, 'applyReset');
    };
    test_3DPhysics_freeze.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    //执行冻结
    test_3DPhysics_freeze.prototype.applyFreezeOpt = function () {
        var _this = this;
        var phy = this.targetTran.physicsImpostor;
        if (!phy)
            return;
        this.enumArr.forEach(function (o, i) {
            var str = _this.optStrs[i];
            var b = _this.freezeDic[str];
            phy.setFreeze(o, b);
        });
    };
    test_3DPhysics_freeze.prototype.impulseTarget = function () {
        this.doImpulse(this.targetTran.physicsImpostor);
    };
    test_3DPhysics_freeze.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    //移动 到射线点
    test_3DPhysics_freeze.prototype.onPonitMove = function (_a) {
        var x = _a[0], y = _a[1];
        var viewPos = m4m.poolv2();
        viewPos.x = x;
        viewPos.y = y;
        console.log("x: ".concat(x, " ,y :").concat(y));
        var ray = this.camera.creatRayByScreen(viewPos, this.app);
        var mf = this.floor.gameObject.getComponent("meshFilter");
        var isinsrt = mf.mesh.intersects(ray, this.floor.getWorldMatrix(), this.cachePickInfo);
        if (!isinsrt || !this.cachePickInfo || !this.cachePickInfo.hitposition)
            return;
        var pos = this.cachePickInfo.hitposition;
        console.log("pos  x: ".concat(pos.x, " ,y :").concat(pos.y, " , z: ").concat(pos.z));
        //同步ctr box 位置
        pos.y += 0.55;
        this.boxTran.physicsImpostor.kinematicSetPosition(pos); //更新动力学 位置
        m4m.poolv2_del(viewPos);
    };
    test_3DPhysics_freeze.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_freeze;
}());
/**
 * 3d物理 球嵌套关节 joint ballandSocket
 */
var test_3DPhysics_joint_ballandSocket = /** @class */ (function () {
    function test_3DPhysics_joint_ballandSocket() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.mrs = [];
        this.guiMsg = "球嵌套关节测试demo ballandSocket";
        this.force = new m4m.math.vector3(-50, 0, -3);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_ballandSocket.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_ballandSocket.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        // //底面
        // let trans=new m4m.framework.transform();
        // trans.localScale.x= 20;
        // trans.localScale.y= 0.01;
        // trans.localScale.z= 20;
        // this.scene.addChild(trans);
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        m4m.math.vec3SetAll(trans3.localScale, 0.5);
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //sphere mid
        var mid_sphere = new m4m.framework.transform();
        mid_sphere.name = "sphere_1";
        mid_sphere.localPosition.y = 8;
        m4m.math.vec3SetAll(mid_sphere.localScale, 0.5);
        this.scene.addChild(mid_sphere);
        physics3dDemoTool.attachMesh(mid_sphere, mat_stick, "sphere");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(mid_sphere, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var phyJ = m4m.framework.PhysicsJoint;
        var joint1 = new phyJ(phyJ.BallAndSocketJoint, {
            mainPivot: new m4m.math.vector3(0, 0, 0),
            connectedPivot: new m4m.math.vector3(0, -2, 0),
        });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_joint_ballandSocket.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'applyReset');
    };
    //重置
    test_3DPhysics_joint_ballandSocket.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    test_3DPhysics_joint_ballandSocket.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_ballandSocket.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_ballandSocket.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_joint_ballandSocket;
}());
/**
 * 3d物理 距离关节(不随锚点旋转) joint distance
 */
var test_3DPhysics_joint_distance = /** @class */ (function () {
    function test_3DPhysics_joint_distance() {
        this.mrs = [];
        this.guiMsg = "铰链关节测试demo distance";
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_distance.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_distance.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        // //底面
        // let trans=new m4m.framework.transform();
        // trans.localScale.x= 20;
        // trans.localScale.y= 0.01;
        // trans.localScale.z= 20;
        // this.scene.addChild(trans);
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "cube");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var dist = 20;
        var phyJ = m4m.framework.DistanceJoint;
        var joint1 = new phyJ({ maxDistance: dist });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        joint1.updateDistance(dist, dist); //Oimo 默认minDistance 为0
        //圆柱朝向
        m4m.math.quatFromEulerAngles(90, 0, 0, cylinder_mid.localRotate);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_joint_distance.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'applyReset');
    };
    //重置
    test_3DPhysics_joint_distance.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    test_3DPhysics_joint_distance.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_distance.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_distance.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_joint_distance;
}());
/**
 * 3d物理 铰链关节 joint hinge
 */
var test_3DPhysics_joint_hinge = /** @class */ (function () {
    function test_3DPhysics_joint_hinge() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.mrs = [];
        this.guiMsg = "铰链关节测试demo hinge";
        this.force = new m4m.math.vector3(-50, 0, 0);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_hinge.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_hinge.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        // //底面
        // let trans=new m4m.framework.transform();
        // trans.localScale.x= 20;
        // trans.localScale.y= 0.01;
        // trans.localScale.z= 20;
        // this.scene.addChild(trans);
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var jointData = {
            mainPivot: new m4m.math.vector3(0, 0, 0),
            connectedPivot: new m4m.math.vector3(0, -2, 0),
            mainAxis: new m4m.math.vector3(0, 0, 1),
            connectedAxis: new m4m.math.vector3(0, 0, 0),
            nativeParams: {}
        };
        var phyJ = m4m.framework.PhysicsJoint;
        var joint1 = new phyJ(phyJ.HingeJoint, jointData);
        // let joint1 = new m4m.framework.HingeJoint({
        //     mainPivot: new m4m.math.vector3(0, 0, 0),
        //     connectedPivot: new m4m.math.vector3(0, -2, 0),
        //     mainAxis: new m4m.math.vector3(0, 0, 1),
        //     connectedAxis: new m4m.math.vector3(0, 0, 0),
        //     nativeParams: {
        //     }
        // });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        //圆柱朝向
        m4m.math.quatFromEulerAngles(90, 0, 0, cylinder_mid.localRotate);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_joint_hinge.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'applyReset');
    };
    //重置
    test_3DPhysics_joint_hinge.prototype.applyReset = function () {
        physics3dDemoTool.resetObj(this.mrs);
    };
    test_3DPhysics_joint_hinge.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_hinge.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_hinge.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_joint_hinge;
}());
/**
 * 3d物理 棱柱形滑竿关节(不能旋转) joint prismatic
 */
var test_3DPhysics_joint_prismatic = /** @class */ (function () {
    function test_3DPhysics_joint_prismatic() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.mrs = [];
        this.guiMsg = "棱柱形滑竿关节测试demo prismatic";
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, -1, 1);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_prismatic.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_prismatic.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        // //底面
        // let trans=new m4m.framework.transform();
        // trans.localScale.x= 20;
        // trans.localScale.y= 0.01;
        // trans.localScale.z= 20;
        // this.scene.addChild(trans);
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        // trans2.localPosition.y = 5;
        trans2.localPosition.x = -1.5;
        // trans2.localPosition.z =0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var phyJ = m4m.framework.PhysicsJoint;
        var joint1 = new phyJ(phyJ.PrismaticJoint, {
            mainAxis: new m4m.math.vector3(1, 0, 0),
            collision: true
        });
        // let joint1 = new m4m.framework.HingeJoint({
        //     mainPivot: new m4m.math.vector3(0, 0, 0),
        //     connectedPivot: new m4m.math.vector3(0, -2, 0),
        //     mainAxis: new m4m.math.vector3(0, 0, 1),
        //     connectedAxis: new m4m.math.vector3(0, 0, 0),
        //     nativeParams: {
        //     }
        // });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        //圆柱朝向
        m4m.math.quatFromEulerAngles(90, 0, 0, cylinder_mid.localRotate);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_joint_prismatic.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
    };
    test_3DPhysics_joint_prismatic.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_prismatic.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_prismatic.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_joint_prismatic;
}());
/**
 * 3d物理 滑竿关节 joint slider
 */
var test_3DPhysics_joint_slider = /** @class */ (function () {
    function test_3DPhysics_joint_slider() {
        this.mrs = [];
        this.guiMsg = "滑竿关节测试demo slider";
        this.force = new m4m.math.vector3(-10, 0, 5);
        this.contactlocalPoint = new m4m.math.vector3(0, -1, 1);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_slider.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_slider.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        // trans2.localPosition.y=5;
        trans2.localPosition.x = -1.5;
        // trans2.localPosition.z=0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var phyJ = m4m.framework.PhysicsJoint;
        var joint1 = new phyJ(phyJ.SliderJoint, {
            mainAxis: new m4m.math.vector3(1, 0, 0),
            collision: true
        });
        // let joint1 = new m4m.framework.HingeJoint({
        //     mainPivot: new m4m.math.vector3(0, 0, 0),
        //     connectedPivot: new m4m.math.vector3(0, -2, 0),
        //     mainAxis: new m4m.math.vector3(0, 0, 1),
        //     connectedAxis: new m4m.math.vector3(0, 0, 0),
        //     nativeParams: {
        //     }
        // });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        //圆柱朝向
        m4m.math.quatFromEulerAngles(90, 0, 0, cylinder_mid.localRotate);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_joint_slider.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
    };
    test_3DPhysics_joint_slider.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_slider.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_slider.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_joint_slider;
}());
/**
 * 3d物理 车轮关节 joint wheel(hinge2)
 */
var test_3DPhysics_joint_wheel = /** @class */ (function () {
    function test_3DPhysics_joint_wheel() {
        this.mrs = [];
        this.connectedPivot = new m4m.math.vector3(-2, 0, 0);
        this.mainPivot = new m4m.math.vector3(0, -1.5, 0);
        this.tempV3 = new m4m.math.vector3();
        this.guiMsg = "车轮关节测试demo wheel(hinge2)";
        this.force = new m4m.math.vector3(0, 10, 0);
        this.contactlocalPoint = new m4m.math.vector3(0, -0.5, 0.45);
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_joint_wheel.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_joint_wheel.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_joint = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localScale.x = 0.5;
        this.scene.addChild(trans2);
        var mr2 = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere mid
        var mid_sphere = new m4m.framework.transform();
        mid_sphere.name = "sphere_1";
        mid_sphere.localPosition.y = 8;
        m4m.math.vec3SetAll(mid_sphere.localScale, 0.5);
        this.scene.addChild(mid_sphere);
        var mr_cl = physics3dDemoTool.attachMesh(mid_sphere, mat_joint, "sphere");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(mid_sphere, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr2);
        //Add Joint
        var phyJ = m4m.framework.PhysicsJoint;
        var joint1 = new phyJ(phyJ.WheelJoint, {
            mainPivot: this.mainPivot,
            connectedPivot: this.connectedPivot,
            mainAxis: new m4m.math.vector3(0, 1, 0),
            connectedAxis: new m4m.math.vector3(1, 0, 0),
            nativeParams: {}
        });
        cylinderImpostor.addJoint(boxImpostor, joint1);
        //GUI
        this.setGUI();
        //
        this.addDisplayObj();
    };
    //辅助显示连接轴
    test_3DPhysics_joint_wheel.prototype.addDisplayObj = function () {
        var mat_pole = physics3dDemoTool.mats["purple"];
        var diameter = 0.25;
        var m_y = Math.abs(this.mainPivot.y);
        var m_x = Math.abs(this.connectedPivot.x);
        //横杆
        this.pole = new m4m.framework.transform();
        this.scene.addChild(this.pole);
        var _pole = new m4m.framework.transform();
        this.pole.addChild(_pole);
        m4m.math.vec3Set(_pole.localScale, m_x, diameter, diameter);
        m4m.math.vec3Set(_pole.localPosition, -_pole.localScale.x / 2, 0, 0);
        physics3dDemoTool.attachMesh(_pole, mat_pole, "cube");
        //竖杆
        this.pole_1 = new m4m.framework.transform();
        this.scene.addChild(this.pole_1);
        var _pole_1 = new m4m.framework.transform();
        m4m.math.vec3Set(_pole_1.localScale, diameter, m_y, diameter);
        m4m.math.vec3Set(_pole_1.localPosition, 0, _pole_1.localScale.y / 2, 0);
        this.pole_1.addChild(_pole_1);
        physics3dDemoTool.attachMesh(_pole_1, mat_pole, "cube");
    };
    test_3DPhysics_joint_wheel.prototype.syncDisplayRT = function () {
        if (!this.boxTran || !this.pole)
            return;
        var bPos = this.boxTran.localPosition;
        m4m.math.vec3Clone(bPos, this.pole.localPosition);
        //屏蔽x 轴的旋转
        m4m.math.quatClone(this.boxTran.localRotate, this.pole.localRotate);
        this.pole.localPosition = this.pole.localPosition;
        this.pole.localRotate = this.pole.localRotate;
        //
        m4m.math.vec3Set(this.pole_1.localPosition, 0, bPos.y, 0);
        this.pole_1.localPosition = this.pole_1.localPosition;
    };
    test_3DPhysics_joint_wheel.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
    };
    test_3DPhysics_joint_wheel.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_joint_wheel.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_joint_wheel.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
        //同步辅助显示
        this.syncDisplayRT();
    };
    return test_3DPhysics_joint_wheel;
}());
var test_3DPhysics_kinematic = /** @class */ (function () {
    function test_3DPhysics_kinematic() {
        this.mrs = [];
        this.cachePickInfo = new m4m.framework.pickinfo();
        this.cacheRota = new m4m.math.quaternion();
        this.cache_y = 0;
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_kinematic.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.iptMgr = physics3dDemoTool.iptMgr;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_kinematic.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_floor = physics3dDemoTool.mats["white"];
        //构建物体
        //底面
        var trans = new m4m.framework.transform();
        this.floor = trans;
        trans.localScale.x = 20;
        trans.localScale.y = 0.01;
        trans.localScale.z = 20;
        this.scene.addChild(trans);
        var mr = physics3dDemoTool.attachMesh(trans, mat_floor, "cube");
        //box ctr 操控的box
        var ctrBox = new m4m.framework.transform();
        this.ctrBox = ctrBox;
        this.ctrBox.localPosition.y = 3;
        this.scene.addChild(ctrBox);
        var mr_ctr = physics3dDemoTool.attachMesh(ctrBox, mat_activated, "cube");
        //box
        var trans2 = new m4m.framework.transform();
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        this.scene.addChild(trans2);
        var mr2 = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.localPosition.y = 10;
        trans3.localPosition.x = -0.2;
        trans3.localPosition.z = 0.2;
        this.scene.addChild(trans3);
        var mr3 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        var mr_cl = physics3dDemoTool.attachMesh(cylinder_mid, mat_activated, "cylinder");
        //初始化 物理
        this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0), new m4m.framework.OimoJSPlugin());
        var ctrBoxImpostor = new m4m.framework.PhysicsImpostor(ctrBox, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.8, kinematic: true });
        var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.PlaneImpostor, { mass: 0, restitution: 0.3 });
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.3 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 1, restitution: 0.3 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 1, restitution: 0.6, friction: 0.5 });
        this.mrs.push(mr_cl, mr3, mr2, mr_ctr);
        //鼠标事件
        this.iptMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onPonitMove, this);
    };
    test_3DPhysics_kinematic.prototype.onPonitMove = function (_a) {
        var x = _a[0], y = _a[1];
        var viewPos = m4m.poolv2();
        viewPos.x = x;
        viewPos.y = y;
        console.log("x: ".concat(x, " ,y :").concat(y));
        var ray = this.camera.creatRayByScreen(viewPos, this.app);
        var mf = this.floor.gameObject.getComponent("meshFilter");
        var isinsrt = mf.mesh.intersects(ray, this.floor.getWorldMatrix(), this.cachePickInfo);
        if (!isinsrt || !this.cachePickInfo || !this.cachePickInfo.hitposition)
            return;
        var pos = this.cachePickInfo.hitposition;
        console.log("pos  x: ".concat(pos.x, " ,y :").concat(pos.y, " , z: ").concat(pos.z));
        //同步ctr box 位置
        pos.y += 0.55;
        this.ctrBox.physicsImpostor.kinematicSetPosition(pos); //更新动力学 位置
        m4m.poolv2_del(viewPos);
    };
    test_3DPhysics_kinematic.prototype.updateRoate = function () {
        if (!this.ctrBox)
            return;
        this.cache_y += 3;
        m4m.math.quatFromEulerAngles(0, this.cache_y, 0, this.cacheRota);
        this.ctrBox.physicsImpostor.kinematicSetRotation(this.cacheRota); //更新动力学 旋转
    };
    test_3DPhysics_kinematic.prototype.update = function (delta) {
        this.updateRoate();
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_kinematic;
}());
/**
 * 3d物理 铰链马达 motor hinge
 */
var test_3DPhysics_motor_hinge = /** @class */ (function () {
    function test_3DPhysics_motor_hinge() {
        this.mrs = [];
        this.guiMsg = "铰链马达测试demo hinge";
        this.motorSpeed = 10;
        this.force = new m4m.math.vector3(-50, 0, 0);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_motor_hinge.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_motor_hinge.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        trans2.localPosition.y = 5;
        trans2.localPosition.x = -0.3;
        trans2.localPosition.z = 0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "cylinder");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var jointData = {
            mainPivot: new m4m.math.vector3(0, 0, 0),
            connectedPivot: new m4m.math.vector3(0, -2, 0),
            mainAxis: new m4m.math.vector3(0, 0, 1),
            connectedAxis: new m4m.math.vector3(0, 0, 0),
            nativeParams: {}
        };
        var phyJ = m4m.framework.MotorEnabledJoint;
        var joint1 = new phyJ(phyJ.HingeJoint, jointData);
        this.targetMotor = joint1;
        cylinderImpostor.addJoint(boxImpostor, joint1);
        joint1.setMotor(this.motorSpeed);
        //圆柱朝向
        m4m.math.quatFromEulerAngles(90, 0, 0, cylinder_mid.localRotate);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_motor_hinge.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        gui.add(this, "motorSpeed", 1, 100);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'changeMotorSpeed');
    };
    test_3DPhysics_motor_hinge.prototype.changeMotorSpeed = function () {
        if (!this.targetMotor)
            return;
        this.targetMotor.setMotor(this.motorSpeed);
    };
    test_3DPhysics_motor_hinge.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_motor_hinge.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_motor_hinge.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_motor_hinge;
}());
/**
 * 3d物理 滑竿马达 motor slider
 */
var test_3DPhysics_motor_slider = /** @class */ (function () {
    function test_3DPhysics_motor_slider() {
        this.mrs = [];
        this.guiMsg = "滑竿马达测试demo slider";
        this.force = new m4m.math.vector3(10, 0, 0);
        this.contactlocalPoint = new m4m.math.vector3(0, 0, 0);
        this.tempV3 = new m4m.math.vector3();
        this.motorSpeed = 10;
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_motor_slider.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_motor_slider.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_stick = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        // //底面
        // let trans=new m4m.framework.transform();
        // trans.localScale.x= 20;
        // trans.localScale.y= 0.01;
        // trans.localScale.z= 20;
        // this.scene.addChild(trans);
        // let mf=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER) as m4m.framework.meshFilter;
        // let mr=trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER) as m4m.framework.meshRenderer;
        // mr.materials[0] = mat_floor;
        // mf.mesh=this.astMgr.getDefaultMesh("cube");
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        // trans2.localPosition.y=5;
        trans2.localPosition.x = -4;
        // trans2.localPosition.z=0.3;
        trans2.localScale.z = 2;
        trans2.localScale.y = 3;
        this.scene.addChild(trans2);
        var mr = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere
        var trans3 = new m4m.framework.transform();
        trans3.name = "sphere";
        trans3.localPosition.y = 8;
        trans3.localPosition.x = -3;
        this.scene.addChild(trans3);
        var mr1 = physics3dDemoTool.attachMesh(trans3, mat_activated, "sphere");
        //cylinder
        var cylinder_mid = new m4m.framework.transform();
        cylinder_mid.name = "cylinder";
        cylinder_mid.localPosition.y = 8;
        this.scene.addChild(cylinder_mid);
        physics3dDemoTool.attachMesh(cylinder_mid, mat_stick, "sphere");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        // let boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.6 ,friction: 0.5});
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var sphereImpostor = new m4m.framework.PhysicsImpostor(trans3, m4m.framework.ImpostorType.SphereImpostor, { mass: 0.5, restitution: 0.6, friction: 0.5 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(cylinder_mid, m4m.framework.ImpostorType.SphereImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr, mr1);
        //Add Joint
        var phyJ = m4m.framework.MotorEnabledJoint;
        var joint1 = new phyJ(phyJ.SliderJoint, {
            mainAxis: new m4m.math.vector3(1, 0, 0),
            collision: true
        });
        this.targetMotor = joint1;
        cylinderImpostor.addJoint(boxImpostor, joint1);
        joint1.setMotor(this.motorSpeed);
        //GUI
        this.setGUI();
    };
    test_3DPhysics_motor_slider.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        gui.add(this, "motorSpeed", 1, 100);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'changeMotorSpeed');
    };
    test_3DPhysics_motor_slider.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_motor_slider.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_motor_slider.prototype.changeMotorSpeed = function () {
        if (!this.targetMotor)
            return;
        this.targetMotor.setMotor(this.motorSpeed);
    };
    test_3DPhysics_motor_slider.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
    };
    return test_3DPhysics_motor_slider;
}());
/**
 * 3d物理 车轮马达 motor wheel(hinge2)
 */
var test_3DPhysics_motor_wheel = /** @class */ (function () {
    function test_3DPhysics_motor_wheel() {
        this.mrs = [];
        this.connectedPivot = new m4m.math.vector3(-2, 0, 0);
        this.mainPivot = new m4m.math.vector3(0, -1.5, 0);
        this.tempV3 = new m4m.math.vector3();
        this.motorSpeed = 10;
        this.guiMsg = "车轮马达测试demo wheel(hinge2)";
        this.force = new m4m.math.vector3(0, 10, 0);
        this.contactlocalPoint = new m4m.math.vector3(0, -0.5, 0.45);
        this.tcount = 0;
        this.time = 0.5;
    }
    test_3DPhysics_motor_wheel.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, physics3dDemoTool.init(app)];
                    case 1:
                        _a.sent();
                        this.app = app;
                        this.scene = physics3dDemoTool.scene;
                        this.astMgr = physics3dDemoTool.astMgr;
                        this.camera = physics3dDemoTool.camera;
                        this.init();
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_3DPhysics_motor_wheel.prototype.init = function () {
        var mat_activated = physics3dDemoTool.mats["activated"];
        var mat_sleeping = physics3dDemoTool.mats["sleeping"];
        var mat_joint = physics3dDemoTool.mats["uvTest"];
        //构建物体-------------------
        //box
        var trans2 = new m4m.framework.transform();
        this.boxTran = trans2;
        trans2.name = "box";
        m4m.math.vec3Set(trans2.localPosition, -this.connectedPivot.x, -this.mainPivot.y, 0);
        trans2.localScale.x = 0.5;
        this.scene.addChild(trans2);
        var mr2 = physics3dDemoTool.attachMesh(trans2, mat_activated, "cube");
        //sphere mid
        var mid_sphere = new m4m.framework.transform();
        mid_sphere.name = "sphere_1";
        mid_sphere.localPosition.y = 8;
        m4m.math.vec3SetAll(mid_sphere.localScale, 0.5);
        this.scene.addChild(mid_sphere);
        var mr_cl = physics3dDemoTool.attachMesh(mid_sphere, mat_joint, "sphere");
        //初始化 物理世界-----------------------
        this.scene.enablePhysics(new m4m.math.vector3(0, 0, 0), new m4m.framework.OimoJSPlugin());
        var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 2 });
        var cylinderImpostor = new m4m.framework.PhysicsImpostor(mid_sphere, m4m.framework.ImpostorType.CylinderImpostor, { mass: 0, friction: 0.5 });
        this.mrs.push(mr2);
        //Add Joint
        var phyJ = m4m.framework.MotorEnabledJoint;
        var joint1 = new phyJ(phyJ.WheelJoint, {
            mainPivot: this.mainPivot,
            connectedPivot: this.connectedPivot,
            mainAxis: new m4m.math.vector3(0, 1, 0),
            connectedAxis: new m4m.math.vector3(1, 0, 0),
            nativeParams: {}
        });
        this.targetMotor = joint1;
        cylinderImpostor.addJoint(boxImpostor, joint1);
        joint1.setMotor(1, 100);
        //GUI
        this.setGUI();
        //
        this.addDisplayObj();
    };
    //辅助显示连接轴
    test_3DPhysics_motor_wheel.prototype.addDisplayObj = function () {
        var mat_pole = physics3dDemoTool.mats["purple"];
        var diameter = 0.25;
        var m_y = Math.abs(this.mainPivot.y);
        var m_x = Math.abs(this.connectedPivot.x);
        //横杆
        this.pole = new m4m.framework.transform();
        this.scene.addChild(this.pole);
        var _pole = new m4m.framework.transform();
        this.pole.addChild(_pole);
        m4m.math.vec3Set(_pole.localScale, m_x, diameter, diameter);
        m4m.math.vec3Set(_pole.localPosition, -_pole.localScale.x / 2, 0, 0);
        physics3dDemoTool.attachMesh(_pole, mat_pole, "cube");
        //竖杆
        this.pole_1 = new m4m.framework.transform();
        this.scene.addChild(this.pole_1);
        var _pole_1 = new m4m.framework.transform();
        m4m.math.vec3Set(_pole_1.localScale, diameter, m_y, diameter);
        m4m.math.vec3Set(_pole_1.localPosition, 0, _pole_1.localScale.y / 2, 0);
        this.pole_1.addChild(_pole_1);
        physics3dDemoTool.attachMesh(_pole_1, mat_pole, "cube");
    };
    test_3DPhysics_motor_wheel.prototype.syncDisplayRT = function () {
        if (!this.boxTran || !this.pole)
            return;
        var bPos = this.boxTran.localPosition;
        m4m.math.vec3Clone(bPos, this.pole.localPosition);
        //屏蔽x 轴的旋转
        m4m.math.quatClone(this.boxTran.localRotate, this.pole.localRotate);
        this.pole.localPosition = this.pole.localPosition;
        this.pole.localRotate = this.pole.localRotate;
        //
        m4m.math.vec3Set(this.pole_1.localPosition, 0, bPos.y, 0);
        this.pole_1.localPosition = this.pole_1.localPosition;
    };
    test_3DPhysics_motor_wheel.prototype.changeMotorSpeed = function () {
        if (!this.targetMotor)
            return;
        this.targetMotor.setMotor(this.motorSpeed);
    };
    test_3DPhysics_motor_wheel.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'guiMsg');
        //force
        var folderF = gui.addFolder("force (冲量)");
        var limitf = 100;
        folderF.add(this.force, 'x', -limitf, limitf);
        folderF.add(this.force, 'y', -limitf, limitf);
        folderF.add(this.force, 'z', -limitf, limitf);
        var folderC = gui.addFolder("contactPoint (施加点)");
        var limitc = 3;
        folderC.add(this.contactlocalPoint, 'x', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'y', -limitc, limitc);
        folderC.add(this.contactlocalPoint, 'z', -limitc, limitc);
        gui.add(this, "motorSpeed", 1, 100);
        var folderFun = gui.addFolder("触发方法");
        folderFun.open();
        folderFun.add(this, 'impulseBox');
        folderFun.add(this, 'changeMotorSpeed');
    };
    test_3DPhysics_motor_wheel.prototype.impulseBox = function () {
        this.doImpulse(this.boxTran.physicsImpostor);
    };
    test_3DPhysics_motor_wheel.prototype.doImpulse = function (phyImpostor) {
        var pos = this.tempV3;
        m4m.math.vec3Add(phyImpostor.object.getWorldPosition(), this.contactlocalPoint, pos);
        phyImpostor.applyImpulse(this.force, pos);
    };
    test_3DPhysics_motor_wheel.prototype.update = function (delta) {
        this.tcount += delta;
        if (this.tcount > this.time) {
            physics3dDemoTool.ckBodySleeped(this.mrs);
            this.tcount = 0;
        }
        //同步辅助显示
        this.syncDisplayRT();
    };
    return test_3DPhysics_motor_wheel;
}());
/** GPU 压缩纹理测试 */
var test_CompressTexture = /** @class */ (function () {
    function test_CompressTexture() {
        this.texType = "PNG";
        this.texTypeFileMap = {
            PNG: "".concat(resRootPath, "texture/Scene02_shiwu_01.png"),
            ASTC: "".concat(resRootPath, "texture/Scene02_shiwu_01_5x5.astc"),
            PVR: "".concat(resRootPath, "texture/Scene02_shiwu_01.pvr"),
            S3TC: "".concat(resRootPath, "texture/Scene02_shiwu_01.dds"),
            ETC: "".concat(resRootPath, "texture/Scene02_shiwu_01.ktx"),
        };
    }
    test_CompressTexture.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene, objCam, camera, hoverc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        return [4 /*yield*/, datGui.init()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, util.loadShader(app.getAssetMgr())];
                    case 2:
                        _a.sent();
                        scene = m4m.framework.sceneMgr.scene;
                        objCam = new m4m.framework.transform();
                        objCam.name = "sth.";
                        scene.addChild(objCam);
                        camera = objCam.gameObject.addComponent("camera");
                        camera.near = 0.01;
                        camera.far = 120;
                        camera.fov = Math.PI * 0.3;
                        camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = camera.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 10;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                        //模型
                        this.model = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube).gameObject.renderer;
                        this.model.materials[0].setShader(app.getAssetMgr().getShader("simple.shader.json"));
                        //
                        scene.addChild(this.model.gameObject.transform);
                        //GUI
                        this.setGUI();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_CompressTexture.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        var title = { str: "GPU压缩纹理" };
        gui.add(title, "str");
        //force
        gui.add(this, "texType", ["PNG", "ASTC", "PVR", "S3TC", "ETC"]).name("\u7EB9\u7406\u7C7B\u578B");
        //方法
        gui.add(this, "changeTexture").name("\u52A0\u8F7D\u66FF\u6362\u7EB9\u7406");
    };
    test_CompressTexture.prototype.changeTexture = function () {
        return __awaiter(this, void 0, void 0, function () {
            var file, tex, mat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        file = this.texTypeFileMap[this.texType];
                        if (!file)
                            return [2 /*return*/];
                        return [4 /*yield*/, util.loadTex(file, this.app.getAssetMgr())];
                    case 1:
                        tex = _a.sent();
                        mat = this.model.materials[0];
                        mat.setTexture("_MainTex", tex);
                        return [2 /*return*/];
                }
            });
        });
    };
    test_CompressTexture.prototype.update = function (delta) {
    };
    return test_CompressTexture;
}());
/** 表面贴花 样例 */
var test_Decal = /** @class */ (function () {
    function test_Decal() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.buildingPname = "Map_Castle_dajiwuA";
        this.texName = "EF_decal_yp.png";
        this.inited = false;
        this.dec = "点击模型发射贴上弹痕";
        this.Y_ag = 0;
    }
    test_Decal.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.assetMgr = this.app.getAssetMgr();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.assetMgr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "texture/").concat(this.texName), this.assetMgr)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "prefab/").concat(this.buildingPname, "/").concat(this.buildingPname, ".assetbundle.json"), this.assetMgr)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, datGui.init()];
                    case 4:
                        _a.sent();
                        this.init();
                        this.inited = true;
                        return [2 /*return*/, null];
                }
            });
        });
    };
    test_Decal.prototype.init = function () {
        this.initCamera();
        //建筑
        var bPrefb = this.assetMgr.getAssetByName("".concat(this.buildingPname, ".prefab.json"), "".concat(this.buildingPname, ".assetbundle.json"));
        var bTrans = bPrefb.getCloneTrans();
        this.building = bTrans;
        var mf = bTrans.gameObject.getComponent("meshFilter");
        m4m.math.vec3SetAll(bTrans.localScale, 5);
        this.scene.addChild(bTrans);
        //贴花模板
        var templateD = new m4m.framework.transform();
        var mr = templateD.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        mr.materials[0] = new m4m.framework.material();
        mr.materials[0].setShader(this.assetMgr.getShader("particles_blend.shader.json"));
        mr.materials[0].setTexture("_Main_Tex", this.assetMgr.getAssetByName(this.texName));
        //Manager
        var mgr = new m4m.framework.transform();
        this.scene.addChild(mgr);
        var decal = mgr.gameObject.addComponent("decalCreater");
        decal.tempTex = mr;
        decal.targetMF = mf;
        decal.camera = this.camera;
        //adtUI
        var gui = new dat.GUI();
        ;
        gui.add(this, 'dec');
    };
    test_Decal.prototype.initCamera = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 50;
        this.camera.fov = Math.PI * 0.3;
        this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
    };
    test_Decal.prototype.update = function (delta) {
        if (!this.inited)
            return;
        this.Y_ag += delta * 30;
        m4m.math.quatFromEulerAngles(0, this.Y_ag, 0, this.building.localRotate);
        this.building.localRotate = this.building.localRotate;
    };
    return test_Decal;
}());
/** GPU 实例渲染模式  */
var test_GPU_instancing = /** @class */ (function () {
    function test_GPU_instancing() {
        this.createCount = 20000;
        this.mats = [];
        this.mrArr = [];
        this.isInstancing = true;
        this.modelType = "";
        this.subRange = 10;
        this._batcher = false;
        this._isStatic = true;
        this._needUpdate = true;
        this._needFillRenderer = true;
        this.loadedTest = false;
        this.count = 0;
    }
    test_GPU_instancing.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene, objCam, cam, hoverc, _dat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), app.getAssetMgr())];
                    case 1:
                        _a.sent();
                        // await demoTool.loadbySync(`${resRootPath}shader/customShader/customShader.assetbundle.json`, app.getAssetMgr());  //项目shader
                        return [4 /*yield*/, datGui.init()];
                    case 2:
                        // await demoTool.loadbySync(`${resRootPath}shader/customShader/customShader.assetbundle.json`, app.getAssetMgr());  //项目shader
                        _a.sent();
                        scene = this._scene = app.getScene();
                        this.cubeRoot = new m4m.framework.transform();
                        this.cubeRoot.localTranslate.y = -5;
                        scene.addChild(this.cubeRoot);
                        this._app = app;
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        cam = objCam.gameObject.addComponent("camera");
                        cam.near = 0.01;
                        cam.far = 120;
                        cam.fov = Math.PI * 0.3;
                        this.cam = cam;
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 30;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
                        this.initMaterails();
                        //绘制xx  个物体
                        this.refresh();
                        //
                        app.showDrawCall();
                        app.showFps();
                        _dat = new dat.GUI();
                        _dat.add(this, "modelType", ["", "bullet_11"]);
                        _dat.add(this, 'isInstancing').listen();
                        _dat.add(this, 'instanceSwitch');
                        _dat.add(this, 'batcherSwitch');
                        _dat.add(this, 'isStatic').listen();
                        ;
                        _dat.add(this, 'needUpdate').listen();
                        ;
                        _dat.add(this, 'needFillRenderer').listen();
                        ;
                        _dat.add(this, 'createCount');
                        _dat.add(this, 'refresh');
                        //
                        m4m.framework.transform.prototype["checkToTop"] = function () { }; //去掉检查优化
                        return [2 /*return*/];
                }
            });
        });
    };
    test_GPU_instancing.prototype.batcherSwitch = function () {
        this._batcher = !this._batcher;
        if (this._batcher) {
            // this.cubeRoot.parent.removeChild(this.cubeRoot);
            this.mrArr.forEach(function (mr) {
                var tran = mr.gameObject.transform;
                tran.needGpuInstancBatcher = true;
            });
            this.needFillRenderer = false;
        }
        else {
            // this._scene.addChild(this.cubeRoot);
            this.mrArr.forEach(function (mr) {
                var tran = mr.gameObject.transform;
                tran.needGpuInstancBatcher = true;
            });
            this.needFillRenderer = true;
        }
        this._scene.refreshGpuInstancBatcher();
    };
    test_GPU_instancing.prototype.refresh = function () {
        this.cubeRoot.removeAllChild();
        this.cubeRoot.gameObject.isStatic = this.isStatic;
        this.mrArr.length = 0;
        this.mats.length = 0;
        if (!this.modelType) {
            this.createByNum(this.createCount);
        }
        else {
            this.loadTest(this.modelType);
        }
    };
    Object.defineProperty(test_GPU_instancing.prototype, "isStatic", {
        get: function () { return this._isStatic; },
        set: function (v) {
            this._isStatic = v;
            this.cubeRoot.gameObject.isStatic = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(test_GPU_instancing.prototype, "needUpdate", {
        get: function () { return this._needUpdate; },
        set: function (v) {
            this._needUpdate = v;
            this.cubeRoot.needUpdate = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(test_GPU_instancing.prototype, "needFillRenderer", {
        get: function () { return this._needFillRenderer; },
        set: function (v) {
            this._needFillRenderer = v;
            this.cubeRoot.needFillRenderer = v;
        },
        enumerable: false,
        configurable: true
    });
    test_GPU_instancing.prototype.loadTest = function (modelName) {
        return __awaiter(this, void 0, void 0, function () {
            var url, m, count, range, i, tran, mrs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "".concat(resRootPath, "prefab/").concat(modelName, "/").concat(modelName, ".assetbundle.json");
                        if (!!this.loadedTest) return [3 /*break*/, 2];
                        return [4 /*yield*/, demoTool.loadbySync(url, this._app.getAssetMgr())];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.loadedTest = true;
                        m = this._app.getAssetMgr().getAssetByName("".concat(modelName, ".prefab.json"), "".concat(modelName, ".assetbundle.json"));
                        count = this.createCount;
                        range = this.subRange;
                        for (i = 0; i < count; i++) {
                            tran = m.getCloneTrans();
                            this.cubeRoot.addChild(tran);
                            m4m.math.vec3Set(tran.localTranslate, Math.random() * range, Math.random() * range, Math.random() * range);
                            tran.localTranslate = tran.localTranslate;
                            if (this.isInstancing) {
                                gpuInstanceMgr.setToGupInstance(tran, url, this.mats);
                            }
                            mrs = tran.gameObject.getComponentsInChildren("meshRenderer");
                            mrs.forEach(function (v) {
                                _this.mrArr.push(v);
                                // v.gameObject.transform.enableCulling = false;
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    test_GPU_instancing.prototype.createByNum = function (num) {
        if (num < 1)
            num = 1;
        var count = 0;
        while (count < num) {
            this.createOne(this._app, this.isInstancing);
            count++;
        }
    };
    test_GPU_instancing.prototype.instanceSwitch = function () {
        var _this = this;
        this.isInstancing = !this.isInstancing;
        this.mats.forEach(function (v) {
            v.enableGpuInstancing = _this.isInstancing;
        });
    };
    test_GPU_instancing.prototype.initMaterails = function () {
        this._mat_ins = new m4m.framework.material("GPU_Instancing");
        this.instanceShBase = this._app.getAssetMgr().getShader("demo_gpu_instancing.shader.json");
        this._mat_ins.setShader(this.instanceShBase);
    };
    test_GPU_instancing.prototype.createOne = function (app, needInstance) {
        var obj = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, app);
        obj.gameObject.transform.enableCulling = false;
        obj.name = "cube_".concat(++this.count);
        this.cubeRoot.addChild(obj);
        var range = this.subRange;
        var scaleRange = 1;
        var rotRnage = 180;
        //位置
        m4m.math.vec3Set(obj.localPosition, this.getRandom(range), this.getRandom(range), this.getRandom(range));
        //缩放
        var s = this.getRandom(scaleRange) + 0.5;
        m4m.math.vec3Set(obj.localScale, s, s, s);
        //旋转
        m4m.math.quatFromEulerAngles(this.getRandom(rotRnage), this.getRandom(rotRnage), this.getRandom(rotRnage), obj.localRotate);
        //change materail
        var mr = obj.gameObject.getComponent("meshRenderer");
        var mat = this._mat_ins;
        mr.materials[0] = mat.clone();
        mr.materials[0].enableGpuInstancing = needInstance;
        mr.materials[0].setVector4("a_particle_color", new m4m.math.vector4(Math.random(), Math.random(), Math.random(), 1));
        this.mats.push(mr.materials[0]);
        this.mrArr.push(mr);
    };
    test_GPU_instancing.prototype.lookAtCamera = function (trans) {
        if (!this.cam)
            return;
        //朝向玩家
        var camPos = this.cam.gameObject.transform.localPosition;
        var tempQuat = test_GPU_instancing.help_quat;
        // m4m.math.quatLookat(trans.getWorldPosition(), camPos,tempQuat);
        m4m.math.quat2Lookat(trans.getWorldPosition(), camPos, tempQuat);
        trans.setWorldRotate(tempQuat);
    };
    test_GPU_instancing.prototype.getRandom = function (range) {
        return range * Math.random() * (Math.random() > 0.5 ? 1 : -1);
    };
    test_GPU_instancing.prototype.update = function (delta) {
    };
    test_GPU_instancing.help_quat = new m4m.math.quaternion();
    return test_GPU_instancing;
}());
var gpuInstanceMgr = /** @class */ (function () {
    function gpuInstanceMgr() {
    }
    /**
     * 设置材质渲染到 gupInstance
     * @param tran   需要设置的对象
     * @param resUrl 资源的URL （去重操作）
     */
    gpuInstanceMgr.setToGupInstance = function (tran, resUrl, mats) {
        if (this.SetedMap[resUrl] || !tran)
            return;
        if (resUrl)
            this.SetedMap[resUrl] = true;
        var mrs = tran.gameObject.getComponentsInChildren("meshRenderer");
        for (var i = 0, len = mrs.length; i < len; i++) {
            var mr = mrs[i];
            for (var j = 0, len_1 = mr.materials.length; j < len_1; j++) {
                var mat = mr.materials[j];
                var canUseGpuIns = this.ckCanUseGpuInstance(mat);
                if (!canUseGpuIns)
                    continue;
                mat.enableGpuInstancing = true;
                this.fillParameters(mat);
                if (mats) {
                    mats.push(mat);
                }
            }
        }
    };
    gpuInstanceMgr.fillParameters = function (mat) {
        var staMap = mat.statedMapUniforms;
        for (var key in staMap) {
            var val = staMap[key];
            if (typeof (val) == "number") {
                mat.setFloat(key, val);
                continue;
            }
            if (val instanceof m4m.math.vector4) {
                mat.setVector4(key, val);
                continue;
            }
        }
    };
    gpuInstanceMgr.ckCanUseGpuInstance = function (mat) {
        if (!mat)
            return false;
        var sh = mat.getShader();
        if (!sh)
            return false;
        if (!sh.passes["instance"] && !sh.passes["instance_fog"]) {
            console.warn("shader ".concat(sh.getName(), " , \u6CA1\u6709 instance \u901A\u9053, \u65E0\u6CD5\u4F7F\u7528 gupInstance \u529F\u80FD."));
            return false;
        }
        return true;
    };
    gpuInstanceMgr.SetedMap = {};
    return gpuInstanceMgr;
}());
/** HDR + glTF 样例 */
var HDR_sample = /** @class */ (function () {
    function HDR_sample() {
        this.dec = "GLTF HDR";
        this.isEnableGUI = true;
        /** 是否显示 实时灯源模型 */
        this.isShowLightModel = false;
        this.sceneConfig = "\n    {\"preZ\":true,\"materials\":[{\"name\":\"floor_wood\",\"transparent\":false,\"color\":\"#8f4117\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0.23,\"emissionIntensity\":1,\"uvRepeat\":[20,20],\"parallaxOcclusionScale\":0,\"diffuseMap\":\"floor_wood.png\",\"normalMap\":\"floor_wood_nm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.33,\"roughness\":0.64,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery\"]},{\"name\":\"Tiles_Color\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":[10,10],\"parallaxOcclusionScale\":0.08,\"diffuseMap\":\"Tiles_Color.png\",\"normalMap\":\"Tiles_Normal.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.8,\"roughness\":0.88,\"metalnessMap\":\"Marble01_Roughness.png\",\"roughnessMap\":\"Marble01_Roughness.png\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$1\"]},{\"name\":\"LiRirong\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"LiRirong.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$2\"]},{\"name\":\"Bottom\",\"transparent\":false,\"color\":\"#262626\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"black.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$3\",\"RongGallery$5\",\"RongGallery$7\",\"RongGallery$9\",\"Wall$1\"]},{\"name\":\"Glass1\",\"transparent\":true,\"color\":\"#006e9f\",\"emission\":\"#000000\",\"alpha\":0.503501952,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$4\"]},{\"name\":\"Spontaneouslight\",\"transparent\":false,\"color\":\"#ececec\",\"emission\":\"#0e0e0d\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":[1,1],\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Spontaneouslight.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"Spontaneouslight.png\",\"metalness\":0.72,\"roughness\":0.4,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$6\",\"RongGallery$8\",\"RongGallery$10\",\"Top2\"]},{\"name\":\"Wall2\",\"transparent\":false,\"color\":\"#919191\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0.65,\"emissionIntensity\":23.8,\"uvRepeat\":[3,3],\"parallaxOcclusionScale\":0.04,\"diffuseMap\":\"Wall_White1.png\",\"normalMap\":\"Wall_White_nm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.32,\"roughness\":0.24,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"RongGallery$11\",\"Top\",\"Wall\"]},{\"name\":\"wall_blue\",\"transparent\":false,\"color\":\"#bad2f5\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":[8,8],\"parallaxOcclusionScale\":0.01,\"diffuseMap\":\"wall_blue.png\",\"normalMap\":\"wall_nm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":1,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"outWall1\",\"Wall$2\"]},{\"name\":\"Gallery_text\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Gallery_text.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.21699999272823334,\"roughness\":0.7650000005960464,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Gallery_text\"]},{\"name\":\"threshold\",\"transparent\":false,\"color\":\"#6a6a6a\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"black.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.07500000298023224,\"roughness\":0.17799997329711914,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"threshold (1)\",\"threshold\"]},{\"name\":\"wood_d\",\"transparent\":false,\"color\":\"#733232\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":200,\"uvRepeat\":[2,2],\"parallaxOcclusionScale\":0.05,\"diffuseMap\":\"wood_d.png\",\"normalMap\":\"wood_Normal.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.4,\"roughness\":0.45,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Chair (3)\",\"Chair (4)\",\"Chair (5)\",\"Chair (6)\",\"Chair (7)\",\"Chair (8)\",\"Chair (9)\",\"Chair (10)\",\"Chair (11)\",\"Chair (12)\",\"Chair (13)\",\"Chair (14)\",\"Chair (15)\",\"Chair (16)\",\"Chair (17)\",\"Chair (18)\",\"Chair (1)\",\"Chair (2)\",\"Chair\",\"Doorframe\",\"Doorframe (1)\"]},{\"name\":\"label\",\"transparent\":false,\"color\":\"#ececec\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"label.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.19200000166893005,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Label\",\"Label (1)\",\"Label (2)\",\"Label (3)\",\"Label (4)\",\"Label (5)\",\"Label (6)\",\"Label (7)\",\"Label (8)\",\"Label (9)\",\"Label (10)\",\"Label (11)\",\"Label (12)\",\"Label (13)\",\"Label (14)\",\"Label (15)\",\"Label (16)\",\"Label (17)\",\"Label (18)\",\"Label (19)\",\"Label (20)\",\"Label (21)\",\"Label (22)\",\"Label (23)\",\"Label (24)\",\"Label (25)\",\"Label (26)\",\"Label (27)\",\"Label (28)\",\"Label (29)\",\"Label (30)\",\"Label (31)\",\"Label (32)\",\"Label (33)\",\"Label (34)\",\"Label (35)\",\"Label (36)\",\"Label (37)\",\"Label (38)\",\"Label (39)\",\"Label (40)\",\"Label (41)\",\"Label (42)\",\"Label (43)\",\"Label (44)\",\"Label (45)\",\"Label (46)\",\"Label (47)\"]},{\"name\":\"Frame_25\",\"transparent\":false,\"color\":\"#b9b9b9\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame21.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq\"]},{\"name\":\"Frame_8\",\"transparent\":false,\"color\":\"#e0e0e0\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame15.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nh\",\"Frame_nh (2)\"]},{\"name\":\"Frame_b\",\"transparent\":false,\"color\":\"#cacaca\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame_b.png\",\"normalMap\":\"Frame_bnm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.675000011920929,\"roughness\":0.7100000083446503,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_bv\",\"Frame_bv\",\"Frame_bv\",\"Frame_bv\",\"Frame_bv\"]},{\"name\":\"Frame_22\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame21.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_bv$1\",\"Frame_bv$1\",\"Frame_bv$1\",\"Frame_bv$1\",\"Frame_bv$1\"]},{\"name\":\"Frame_a\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame_a.png\",\"normalMap\":\"Frame_anm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.11900000274181366,\"roughness\":0.8680000007152557,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_av\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_aq\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_ah (2)\",\"Frame_aq\",\"Frame_aq\"]},{\"name\":\"Frame_19\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame21.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_av$1\",\"Frame_nq (7)\"]},{\"name\":\"Frame_5\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_h_4.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\",\"Frame_aq$1\"]},{\"name\":\"Frame_1\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_h_4.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_1\"]},{\"name\":\"Frame_2\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame2.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.03999999910593033,\"roughness\":0.7759999930858612,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_2\"]},{\"name\":\"Frame_9\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame15.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.15600000321865082,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_3\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\",\"Frame_ah (2)$1\"]},{\"name\":\"Frame_4\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame2.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_4\",\"Frame_nh (1)\"]},{\"name\":\"Frame_15\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame18.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_5\"]},{\"name\":\"Frame_16\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame18.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (10)\"]},{\"name\":\"Frame_20\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame21.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (5)\"]},{\"name\":\"Frame_21\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame21.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (6)\"]},{\"name\":\"Frame_18\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame18.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (9)\"]},{\"name\":\"Frame_17\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame18.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (8)\"]},{\"name\":\"art_h_1\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_h_1.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (2)\"]},{\"name\":\"art_v_3\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_v_3.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (4)\"]},{\"name\":\"Frame_11\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame22.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nh (6)\"]},{\"name\":\"art_v_2\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_v_2.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (12)\"]},{\"name\":\"Frame_14\",\"transparent\":false,\"color\":\"#d4d4d4\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame22.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nh (5)\",\"Frame_nh\"]},{\"name\":\"Frame_3\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_h_4.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nh (4)\"]},{\"name\":\"Frame_13\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Frame22.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nh (7)\"]},{\"name\":\"art_h_7\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"art_h_7.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0.7430000007152557,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Frame_nq (3)\"]},{\"name\":\"Exit\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Exit.png\",\"normalMap\":\"Exitnm.png\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.5519999861717224,\"roughness\":0.4570000171661377,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"exit\",\"exit (2)\",\"exit (1)\"]},{\"name\":\"door01\",\"transparent\":false,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"door01.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.6639999747276306,\"roughness\":0.5290000140666962,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Door01\"]},{\"name\":\"Glass01\",\"transparent\":true,\"color\":\"#ffffff\",\"emission\":\"#000000\",\"alpha\":0.05490196,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"Glass01.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.47099998593330383,\"roughness\":0.15200001001358032,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Door01$1\"]},{\"name\":\"point_lighter_ao\",\"transparent\":false,\"color\":\"#000000\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0.699999988079071,\"roughness\":0.17000001668930054,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\",\"Pointlight (9)\"]},{\"name\":\"light\",\"transparent\":false,\"color\":\"#c9c9c9\",\"emission\":\"#fffffe\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"light.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"spotlight 1$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\",\"Pointlight (9)$1\"]},{\"name\":\"spotlight\",\"transparent\":false,\"color\":\"#000000\",\"emission\":\"#000000\",\"alpha\":1,\"alphaCutoff\":0,\"emissionIntensity\":1,\"uvRepeat\":{\"0\":1,\"1\":1},\"parallaxOcclusionScale\":0.02,\"diffuseMap\":\"spotlight.png\",\"normalMap\":\"\",\"parallaxOcclusionMap\":\"\",\"emissiveMap\":\"\",\"metalness\":0,\"roughness\":0.6579999923706055,\"metalnessMap\":\"\",\"roughnessMap\":\"\",\"type\":\"pbrMetallicRoughness\",\"targetMeshes\":[\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"Joint (4)\",\"Joint (6)\",\"Joint (7)\",\"Joint (8)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"stick1 (4)\",\"stick1 (6)\",\"stick1 (7)\",\"stick1 (8)\",\"spotlight 1\",\"Joint\",\"spotlight 1\",\"stick\",\"Joint (1)\",\"stick1\",\"stick1 (1)\",\"Joint\",\"spotlight 1\",\"stick\",\"Joint (1)\",\"stick1\",\"stick1 (1)\",\"Joint\",\"spotlight 1\",\"stick\",\"Joint (1)\",\"stick1\",\"stick1 (1)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"Joint (3)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (3)\",\"Joint (4)\",\"stick1\",\"stick1 (1)\",\"Joint (5)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (3)\",\"Joint (4)\",\"stick1 (1)\",\"stick1\",\"Joint (5)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"Joint (3)\",\"Joint (4)\",\"stick1 (1)\",\"stick1\",\"Joint (5)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"Joint (4)\",\"Joint (5)\",\"Joint (6)\",\"Joint (7)\",\"Joint (8)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"stick1 (4)\",\"stick1 (5)\",\"stick1 (6)\",\"stick1 (7)\",\"stick1 (8)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"Joint (3)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"Joint (3)\",\"stick1 (3)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"Joint (1)\",\"Joint (2)\",\"stick1\",\"stick1 (1)\",\"stick1 (2)\",\"Joint\",\"spotlight 1\",\"stick\",\"Joint (1)\",\"stick1\",\"stick1 (1)\",\"Joint\",\"spotlight 1\",\"stick\",\"spotlight 1\",\"spotlight 1\",\"Joint (3)\",\"stick1\",\"Joint (4)\",\"stick1 (1)\",\"Joint (5)\",\"stick1 (2)\",\"stick1 (3)\"]}],\"takes\":[],\"textureFlipY\":false,\"zUpToYUp\":false,\"shadow\":true,\"environment\":\"auto\",\"viewControl\":{\"center\":[-1.5810825948372709,-0.32943921837648704,-0.9510663665344571],\"alpha\":4.391482546857949,\"beta\":-73.35563343334012,\"distance\":2.432148623182876},\"ground\":{\"show\":true,\"grid\":false},\"mainLight\":{\"shadow\":false,\"shadowQuality\":\"medium\",\"intensity\":0.0000184,\"color\":\"#fff\",\"alpha\":0.7964601769911517,\"beta\":14.33628318584069,\"$padAngle\":[0.07964601769911495,0.008849557522123908]},\"secondaryLight\":{\"shadow\":true,\"shadowQuality\":\"medium\",\"intensity\":1.08,\"color\":\"#fff\",\"alpha\":60,\"beta\":-125,\"$padAngle\":[0.23893805309734506,0.34513274336283184]},\"tertiaryLight\":{\"shadow\":true,\"shadowQuality\":\"medium\",\"intensity\":0.88,\"color\":\"#fff\",\"alpha\":43.80530973451327,\"beta\":43.00884955752211,\"$padAngle\":[0.23893805309734506,0.48672566371681414]},\"ambientLight\":{\"intensity\":0.88,\"color\":\"#fff\"},\"ambientCubemapLight\":{\"texture\":\"./asset/texture/pisa.hdr\",\"$texture\":\"pisa\",\"$textureOptions\":[\"pisa\",\"Barce_Rooftop_C\",\"Factory_Catwalk\",\"Grand_Canyon_C\",\"Ice_Lake\",\"Hall\",\"Old_Industrial_Hall\"],\"exposure\":3,\"diffuseIntensity\":0.18,\"specularIntensity\":0.68},\"postEffect\":{\"enable\":true,\"bloom\":{\"enable\":true,\"intensity\":0.6},\"depthOfField\":{\"enable\":false,\"focalDistance\":3.64,\"focalRange\":0.98,\"blurRadius\":5,\"fstop\":9.96,\"quality\":\"medium\",\"$qualityOptions\":[\"low\",\"medium\",\"high\",\"ultra\"]},\"screenSpaceAmbientOcclusion\":{\"enable\":true,\"radius\":1.74,\"quality\":\"medium\",\"intensity\":1,\"$qualityOptions\":[\"low\",\"medium\",\"high\",\"ultra\"]},\"screenSpaceReflection\":{\"enable\":false,\"physical\":false,\"quality\":\"medium\",\"maxRoughness\":0.8,\"$qualityOptions\":[\"low\",\"medium\",\"high\",\"ultra\"]},\"colorCorrection\":{\"enable\":true,\"exposure\":0.26,\"brightness\":0.06,\"contrast\":0.98,\"saturation\":1.2,\"lookupTexture\":\"\"},\"FXAA\":{\"enable\":false}}}\n    ";
        this.gltfModels = [
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/artRoom/"),
                file: 'artRoom.gltf',
                scale: 1,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/pbrLightMap/"),
                file: 'pbrLightMap.gltf',
                scale: 1,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/002LightMap/"),
                file: '002LightMap.gltf',
                scale: 1,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/FlightHelmet/glTF/"),
                file: 'FlightHelmet.gltf',
                scale: 20,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/realtimeLight/"),
                file: 'realtimeLight.gltf',
                scale: 1,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/transparentTest/"),
                file: 'transparentTest.gltf',
                scale: 1,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/"),
                file: '2CylinderEngine.glb',
                scale: 0.05,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/"),
                file: 'AlphaBlendModeTest.glb',
                scale: 5,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/"),
                file: 'BoomBox.glb',
                scale: 100,
                cb: function (root) { }
            },
            {
                gltfFolder: "".concat(resRootPath, "pbrRes/"),
                file: 'lightmapBGL.glb',
                scale: 1,
                cb: function (root) { }
            },
            // {
            //     gltfFolder: 'res/pbrRes/model/',
            //     file: 'demo.gltf',
            //     scale: 2,
            //     cb: (root) => root.localTranslate.x += 0,
            // },
            // {
            //     gltfFolder: 'res/pbrRes/BoomBoxWithAxes/glTF/',
            //     file: 'BoomBoxWithAxes.gltf',
            //     scale: 300,
            //     cb: (root) => root.localTranslate.x += 8,
            // },
        ];
        this.HDRList = ["helipad"];
        this.HDRpath = "".concat(resRootPath, "pbrRes/HDR/");
        this._HDR = "helipad";
        this._Model = "FlightHelmet";
        this.ModelList = [];
        this._enableLight = true;
    }
    HDR_sample.prototype._load = function (path, type) {
        var _this = this;
        if (type === void 0) { type = m4m.framework.AssetTypeEnum.Auto; }
        return new Promise(function (resolve) {
            var _a;
            (_a = _this.assetMgr) === null || _a === void 0 ? void 0 : _a.load(path, type, function (res) {
                if (res.isfinish)
                    resolve(res);
                else
                    resolve(null);
            });
        });
    };
    HDR_sample.prototype.load = function (path, name, type) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._load(path + name, type)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.assetMgr.getAssetByName(name)];
                }
            });
        });
    };
    HDR_sample.prototype.loadCubeTexture = function (folder, images) {
        if (images === void 0) { images = [
            'negx.hdr',
            'negy.hdr',
            'negz.hdr',
            'posx.hdr',
            'posy.hdr',
            'posz.hdr',
        ]; }
        return __awaiter(this, void 0, void 0, function () {
            var tex, cubeTex;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(images.map(function (n) { return _this.load(folder, n); }))];
                    case 1:
                        tex = _a.sent();
                        cubeTex = new m4m.framework.texture(folder.split('/').pop());
                        cubeTex.glTexture = new m4m.render.glTextureCube(this.app.webgl, m4m.render.TextureFormatEnum.RGBA, true, true);
                        cubeTex.use();
                        cubeTex.glTexture.uploadImages(tex[0], tex[1], tex[2], tex[3], tex[4], tex[5], WebGL2RenderingContext.LINEAR_MIPMAP_LINEAR, WebGL2RenderingContext.LINEAR, WebGL2RenderingContext.TEXTURE_CUBE_MAP);
                        return [2 /*return*/, cubeTex];
                }
            });
        });
    };
    HDR_sample.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var href, scene, objCam, cam, hoverc, par;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        href = globalThis.gltfViewHREF || window.location.href;
                        this.urlParameter = new URL(href).searchParams;
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.assetMgr = this.app.getAssetMgr();
                        scene = app.getScene();
                        scene.autoCollectlightCamera = true;
                        scene.addChild(this.modelRoot = new m4m.framework.transform());
                        scene.addChild(this.lightRoot = new m4m.framework.transform());
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        cam = objCam.gameObject.addComponent("camera");
                        cam.near = 0.1;
                        cam.far = 1000;
                        // cam.fov = Math.PI * 0.3;
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 30;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                        par = this.urlParameter;
                        if (par.has('file'))
                            this.isEnableGUI = false;
                        if (!this.isEnableGUI) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.enableGUI()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this._Model = par.get('file');
                        if (this._Model)
                            this._Model.replace(".gltf", "");
                        this.toLoad();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    HDR_sample.prototype.toLoadGLTF = function (gltfModels) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var config, ambientCubemapLight, mainLight, secondaryLight, tertiaryLight, exp, env, irradianceSH, skybox, mf_c, mr_c, realtimeLights, loadGLTF, par, i, len, cfg, root, hexToRgb, addLightModel, count_1, lightCount_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        config = JSON.parse(this.sceneConfig);
                        console.log(config);
                        ambientCubemapLight = config.ambientCubemapLight, mainLight = config.mainLight, secondaryLight = config.secondaryLight, tertiaryLight = config.tertiaryLight;
                        // const tex = await this.load<m4m.framework.texture>(HDRpath, 'flower_road_2k.hdr');
                        // mr.materials[0].setTexture("_MainTex", tex);
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.app.getAssetMgr())];
                    case 1:
                        // const tex = await this.load<m4m.framework.texture>(HDRpath, 'flower_road_2k.hdr');
                        // mr.materials[0].setTexture("_MainTex", tex);
                        _b.sent();
                        exp = (_a = ambientCubemapLight.exposure) !== null && _a !== void 0 ? _a : 4;
                        return [4 /*yield*/, this.loadCubeTexture("".concat(this.HDRpath).concat(this._HDR, "/"))];
                    case 2:
                        env = _b.sent();
                        return [4 /*yield*/, this.loadCubeTexture("".concat(this.HDRpath).concat(this._HDR, "_diff/"))];
                    case 3:
                        irradianceSH = _b.sent();
                        skybox = new m4m.framework.transform();
                        skybox.enableCulling = false; //skybox 不会被视锥剔除
                        // this.scene.addChild(skybox);
                        this.modelRoot.addChild(skybox);
                        mf_c = skybox.gameObject.addComponent("meshFilter");
                        mf_c.mesh = this.assetMgr.getDefaultMesh("cube");
                        mr_c = skybox.gameObject.addComponent("meshRenderer");
                        mr_c.materials[0] = new m4m.framework.material("skyboxmat");
                        mr_c.materials[0].setShader(this.assetMgr.getShader("skybox.shader.json"));
                        // let pass = mr_c.materials[0].getShader().passes["base"][0];
                        // pass.state_showface = m4m.render.ShowFaceStateEnum.CW;
                        mr_c.materials[0].setCubeTexture("u_sky", env);
                        mr_c.materials[0].setFloat("u_Exposure", exp);
                        realtimeLights = [];
                        loadGLTF = function (_a) {
                            var gltfFolder = _a.gltfFolder, file = _a.file, scale = _a.scale;
                            return __awaiter(_this, void 0, void 0, function () {
                                var rtLights, root, gltf;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, this.load(gltfFolder, file)];
                                        case 1:
                                            gltf = _b.sent();
                                            return [4 /*yield*/, gltf.load(this.assetMgr, this.app.webgl, gltfFolder, null, env, irradianceSH, exp, ambientCubemapLight.specularIntensity, ambientCubemapLight.diffuseIntensity)];
                                        case 2:
                                            root = _b.sent();
                                            rtLights = gltf.getRealtimeLights();
                                            if (rtLights) {
                                                realtimeLights = rtLights;
                                            }
                                            m4m.math.vec3SetAll(root.localScale, scale !== null && scale !== void 0 ? scale : 1);
                                            root.localScale.x *= -1;
                                            // this.app.getScene().addChild(root);
                                            this.modelRoot.addChild(root);
                                            return [2 /*return*/, root];
                                    }
                                });
                            });
                        };
                        par = this.urlParameter;
                        exp = par.has('exp') ? parseFloat(par.get('exp')) : exp;
                        if (!gltfModels)
                            gltfModels = [];
                        if (par.has('folder')) {
                            gltfModels.push({
                                gltfFolder: par.get('folder'),
                                file: par.get('file'),
                                scale: par.get('scale') ? parseFloat(par.get('scale')) : 1,
                                cb: function (root) { return root.localTranslate.x += par.get('x') ? parseFloat(par.get('x')) : 0; },
                            });
                        }
                        i = 0, len = gltfModels.length;
                        _b.label = 4;
                    case 4:
                        if (!(i < len)) return [3 /*break*/, 7];
                        cfg = gltfModels[i];
                        return [4 /*yield*/, loadGLTF(cfg)];
                    case 5:
                        root = _b.sent();
                        if (cfg.cb)
                            cfg.cb(root);
                        _b.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 4];
                    case 7:
                        hexToRgb = function (hex) {
                            return hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (m, r, g, b) { return '#' + r + r + g + g + b + b; })
                                .substring(1).match(/.{2}/g)
                                .map(function (x) { return parseInt(x, 16); });
                        };
                        addLightModel = function (rot, pos, color) {
                            if (!_this.isShowLightModel)
                                return;
                            //灯源模型显示
                            var lCube = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube);
                            var renderer = lCube.gameObject.renderer;
                            var sh = m4m.framework.sceneMgr.app.getAssetMgr().getShader("simple.shader.json");
                            if (sh) {
                                renderer.materials[0].setShader(sh);
                                renderer.materials[0].setVector4("_MainColor", new m4m.math.vector4(color[0], color[1], color[2], 1));
                            }
                            lCube.localScale = new m4m.math.vector3(0.2, 0.2, 0.6);
                            lCube.localPosition = pos;
                            lCube.localRotate = rot;
                            _this.lightRoot.addChild(lCube);
                        };
                        //gltf有实时灯光 ,走gltf 实时灯光配置
                        if (realtimeLights.length > 0) {
                            realtimeLights.forEach(function (l, i) {
                                //
                                var node = new m4m.framework.transform();
                                node.name = "Light_".concat(m4m.framework.LightTypeEnum[l.type], "_").concat(i);
                                var comp = node.gameObject.addComponent("light");
                                comp.type = l.type;
                                //shadow
                                if (l.shadowQuality != m4m.framework.ShadowQualityType.None) {
                                    l.shadowQuality;
                                }
                                if (comp.type == m4m.framework.LightTypeEnum.Spot || comp.type == m4m.framework.LightTypeEnum.Point) {
                                    //range
                                    comp.range = l.range;
                                    if (comp.type == m4m.framework.LightTypeEnum.Spot) {
                                        //spotAngelCos
                                        comp.spotAngelCos = Math.cos(l.spotAngle * 0.5 * Math.PI / 180);
                                    }
                                }
                                //intensity
                                comp.intensity = l.intensity;
                                //color
                                m4m.math.colorSet(comp.color, l.color[0], l.color[1], l.color[2], l.color[3]);
                                //RTS
                                var pos = node.localPosition;
                                m4m.math.vec3Set(pos, l.pos[0], l.pos[1], l.pos[2]);
                                node.localPosition = pos;
                                var rot = node.localRotate;
                                m4m.math.quatFromEulerAngles(l.angles[0], l.angles[1], 0, rot);
                                node.localRotate = rot;
                                _this.lightRoot.addChild(node);
                                //灯源模型显示
                                addLightModel(rot, pos, l.color);
                            });
                        }
                        else {
                            count_1 = 0;
                            lightCount_1 = 3;
                            [mainLight, secondaryLight, tertiaryLight].map(function (light) {
                                // return;
                                var lightObj = new m4m.framework.transform();
                                lightObj.name = "Light" + light.name;
                                var mlight = lightObj.gameObject.addComponent("light");
                                mlight.type = m4m.framework.LightTypeEnum.Direction;
                                m4m.math.quatFromEulerAngles(light.alpha, light.beta, 0, lightObj.localRotate);
                                mlight.intensity = light.intensity;
                                var rgb = hexToRgb(light.color).map(function (x) { return x / 255; });
                                mlight.color.r = rgb[0];
                                mlight.color.g = rgb[1];
                                mlight.color.b = rgb[2];
                                lightObj.markDirty();
                                // this.scene.addChild(lightObj);
                                _this.lightRoot.addChild(lightObj);
                                //灯源模型显示
                                var val = count_1 / lightCount_1 * Math.PI * 2;
                                var s = 5;
                                addLightModel(lightObj.localRotate, new m4m.math.vector3(Math.sin(val) * s, 0, Math.cos(val) * s), rgb);
                                count_1++;
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    HDR_sample.prototype.enableGUI = function () {
        return __awaiter(this, void 0, void 0, function () {
            var gui;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ModelList = this.gltfModels.map(function (val) { return val.file.split(".")[0]; });
                        return [4 /*yield*/, datGui.init()];
                    case 1:
                        _a.sent();
                        gui = new dat.GUI();
                        ;
                        gui.add(this, 'dec');
                        //
                        gui.add(this, "_HDR", this.HDRList).name("天空盒");
                        gui.add(this, "Model", this.ModelList).name("快捷选择");
                        gui.add(this, "Model").listen().name("模型名");
                        gui.add(this, "enableLight").name("开启灯光");
                        gui.add(this, "isShowLightModel").name("显示光源模型");
                        gui.add(this, "toLoad").name("加载");
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(HDR_sample.prototype, "Model", {
        get: function () { return this._Model; },
        set: function (val) { this._Model = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HDR_sample.prototype, "enableLight", {
        get: function () { return this._enableLight; },
        set: function (val) {
            this._enableLight = val;
            this.lightRoot.children.forEach(function (l) { l.gameObject.visible = val; });
        },
        enumerable: false,
        configurable: true
    });
    HDR_sample.prototype.toLoad = function () {
        this.clearGLTF();
        if (!this._Model) {
            console.warn("\u6CA1\u6709\u6307\u5B9A model !");
            return;
        }
        var par = this.urlParameter;
        var model;
        var needCKModels = true;
        if (!this.isEnableGUI && !par.get('folder')) {
            needCKModels = false;
        } //没配置路径，走固定路径关掉查指定配置
        if (needCKModels) {
            //在默认配置指向中找
            for (var i = 0, len = this.gltfModels.length; i < len; i++) {
                var obj = this.gltfModels[i];
                if (obj && obj.file.indexOf(this._Model) != -1) {
                    model = obj;
                    break;
                }
            }
        }
        //没有默认配置指向 ，走固定结构
        if (!model) {
            var _scale = 1;
            var _cb = function (root) { };
            //获取后缀
            var suffix = "";
            var idx = this._Model.lastIndexOf(".");
            if (idx != -1) {
                suffix = this._Model.substring(idx);
            }
            suffix = suffix ? suffix : ".gltf";
            var _file = void 0;
            var _gltfFolder = void 0;
            if (suffix == ".gltf") {
                _file = "".concat(this._Model).concat(suffix);
                _gltfFolder = "".concat(resRootPath, "pbrRes/").concat(this._Model, "/");
            }
            else {
                //可能是 .glb
                _file = this._Model;
                _gltfFolder = "".concat(resRootPath, "pbrRes/");
            }
            if (!this.isEnableGUI) {
                //没有GUI的选择输入，看是否有有效 url 参数。
                _gltfFolder = par.get('folder') || _gltfFolder;
                _scale = par.get('scale') ? parseFloat(par.get('scale')) : 1;
            }
            model = {
                gltfFolder: _gltfFolder,
                file: _file,
                scale: _scale,
                cb: _cb
            };
        }
        this.toLoadGLTF([model]);
    };
    HDR_sample.prototype.clearGLTF = function () {
        this.lightRoot.removeAllChild();
        this.modelRoot.removeAllChild();
    };
    HDR_sample.prototype.update = function (delta) {
    };
    return HDR_sample;
}());
/**
 * 高度图地形样例
 */
var TerrainWidthHeight = /** @class */ (function () {
    function TerrainWidthHeight(w, h) {
        this.width = 1;
        this.height = 1;
        this.width = w;
        this.height = h;
    }
    return TerrainWidthHeight;
}());
var test_Heightmap_terrain = /** @class */ (function () {
    function test_Heightmap_terrain(useOldTerrain) {
        this.nFrame = 0;
        this.mtrlRoot = new m4m.framework.transform2D;
        this.texRoot = new m4m.framework.transform2D;
        this.bk = new m4m.framework.transform2D;
        this.btn = [new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D];
        this.page = [new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D];
        this.heightScaleCtrl = new m4m.framework.transform2D;
        this.textureUVScaleCtrl = [new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D];
        this.textureUVInputCtrls = [
            [new m4m.framework.transform2D, new m4m.framework.transform2D],
            [new m4m.framework.transform2D, new m4m.framework.transform2D],
            [new m4m.framework.transform2D, new m4m.framework.transform2D],
            [new m4m.framework.transform2D, new m4m.framework.transform2D]
        ];
        this.saveToPHP = new m4m.framework.transform2D;
        this.loadFromPHP = new m4m.framework.transform2D;
        this.iptFrame_HeightScale = [new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D];
        this.mtr = [];
        this.texs = [];
        this.textureLayer = [
            new m4m.framework.transform2D,
            new m4m.framework.transform2D,
            new m4m.framework.transform2D,
            new m4m.framework.transform2D,
            new m4m.framework.transform2D,
            new m4m.framework.transform2D,
            new m4m.framework.transform2D
        ];
        this.brushSizeBtns = [new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D, new m4m.framework.transform2D];
        /// 这个以后要改为从服务端json或php，现在只是为了导入旧地图
        test_Heightmap_terrain.nUseOldTerrain = useOldTerrain;
        if (useOldTerrain == 0) {
            test_Heightmap_terrain.genTerrainUseHeightScale = 15.0;
        }
        else if (useOldTerrain == 1) {
            test_Heightmap_terrain.genTerrainUseHeightScale = 500.0;
        }
        else {
            test_Heightmap_terrain.genTerrainUseHeightScale = 200.0;
        }
    }
    test_Heightmap_terrain.getHeightmapPixels = function (heightmap) {
        var pixelReader = heightmap.glTexture.getReader(true); //只读灰度信息
        var w = heightmap.glTexture.width;
        var h = heightmap.glTexture.height;
        var array = new Uint8Array(w * h);
        var uDiv = 1.0; //(w - 1) / (w - 1);
        var vDiv = 1.0; //(h - 1) / (h - 1);
        for (var row = 0; row < h; row++) {
            for (var column = 0; column < w; column++) {
                var u = Math.floor(column * uDiv) / w;
                //var v = Math.floor(((h - 1) - row) * vDiv) / h;
                var v = Math.floor((row) * vDiv) / h;
                var index = row * w + column;
                var color = pixelReader.getPixel(u, v) & 0xff;
                //console.log("color=" + color);
                color = color & 0xff;
                //console.log("color 1=" + color);
                array[index] = color;
            }
        }
        return array;
    };
    test_Heightmap_terrain.getHeightmapPixels1 = function (heightmap, brushDtatIndex) {
        var pixelReader = heightmap.glTexture.getReader(false); //true只读灰度信息，false读rgba
        var w = heightmap.glTexture.width;
        var h = heightmap.glTexture.height;
        var array = new Uint8Array(w * h);
        var uDiv = 1.0; //(w - 1) / (w - 1);
        var vDiv = 1.0; //(h - 1) / (h - 1);
        for (var row = 0; row < h; row++) {
            for (var column = 0; column < w; column++) {
                var u = Math.floor(column * uDiv) / w;
                //var v = Math.floor(((h - 1) - row) * vDiv) / h;
                var v = Math.floor((row) * vDiv) / h;
                var index = row * w + column;
                var color = pixelReader.getPixel(u, v);
                //console.log("color=" + color + ", r:" + color.r + " g:" + color.g + " b:" + color.b + " a:" + color.a );
                array[index] = color.r;
            }
        }
        return array;
    };
    test_Heightmap_terrain.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene, assetMgr, gl, objCam, hoverc, callback, callModify, callTestHit, hold, planeNode, planeMR, texNames, texUrl, _a, terrainMesh, tSH;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        test_Heightmap_terrain.app = app;
                        test_Heightmap_terrain.mouseDown = false;
                        scene = app.getScene();
                        assetMgr = app.getAssetMgr();
                        gl = app.webgl;
                        test_Heightmap_terrain.gl = app.webgl;
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        test_Heightmap_terrain.cam = objCam.gameObject.addComponent("camera");
                        test_Heightmap_terrain.cam.near = 0.01;
                        test_Heightmap_terrain.cam.far = 2000;
                        test_Heightmap_terrain.cam.fov = Math.PI * 0.3;
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = test_Heightmap_terrain.cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 18;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
                        callback = this.ApplayNewHeight;
                        this.worldX = 10000;
                        this.worldZ = 10000;
                        callModify = this.OnModify;
                        callTestHit = this.TestHit;
                        //font
                        test_Heightmap_terrain.app.getAssetMgr().load("".concat(resRootPath, "font/\u65B9\u6B63\u7C97\u5706_GBK.TTF.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                test_Heightmap_terrain.app.getAssetMgr().load("".concat(resRootPath, "font/\u65B9\u6B63\u7C97\u5706_GBK.font.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                                    if (s1.isfinish)
                                        test_Heightmap_terrain.font_ = test_Heightmap_terrain.app.getAssetMgr().getAssetByName("方正粗圆_GBK.font.json"); //;
                                    _this.addbtn('0', '0', "Modify", _this);
                                    _this.afterAddButton();
                                    _this.OnPage(0);
                                });
                            }
                        });
                        test_Heightmap_terrain.app.container.addEventListener("mousedown", function (e) {
                            console.log("mousedown");
                            test_Heightmap_terrain.mouseDown = true;
                        }, false);
                        hold = this.bk;
                        test_Heightmap_terrain.app.container.addEventListener("mouseup", function (e) {
                            console.log("mouseup");
                            test_Heightmap_terrain.mouseDown = false;
                            //test_Heightmap_terrain.bUpdatePickedTexture = false;
                        }, false);
                        test_Heightmap_terrain.app.container.addEventListener("keydown", function (e) {
                            console.log("keydown:" + e.code);
                            if (e.code == "ShiftLeft" || e.code == "ShiftRight") {
                                test_Heightmap_terrain.shifKey = true;
                            }
                            if (e.code == "AltRight") {
                                console.log("Alt key down");
                                test_Heightmap_terrain.altKey = true;
                            }
                            if (e.code == "AltLeft") {
                                test_Heightmap_terrain.altKey = true;
                            }
                            if (e.code == "KeyT") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_0"]);
                            }
                            if (e.code == "KeyY") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_1"]);
                            }
                            if (e.code == "KeyU") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_2"]);
                            }
                            if (e.code == "KeyI") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_3"]);
                            }
                            if (e.code == "KeyO") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_4"]);
                            }
                            if (e.code == "KeyP") {
                                console.log(test_Heightmap_terrain.dictBrushData["1_5"]);
                            }
                        }, false);
                        test_Heightmap_terrain.app.container.addEventListener("keyup", function (e) {
                            console.log("keyup:" + e + " code:" + e.code);
                            if (e.code == "ShiftLeft" || e.code == "ShiftRight") {
                                test_Heightmap_terrain.shifKey = false;
                            }
                            if (e.code == "AltLeft" || e.code == "AltRight") {
                                test_Heightmap_terrain.altKey = false;
                            }
                        }, false);
                        //2dUI root
                        this.rooto2d = new m4m.framework.overlay2D();
                        test_Heightmap_terrain.cam.addOverLay(this.rooto2d);
                        planeNode = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Plane);
                        planeMR = planeNode.gameObject.getComponent("meshRenderer");
                        test_Heightmap_terrain.planeMF = planeNode.gameObject.getComponent("meshFilter");
                        texNames = ["1001qijizhisen 1_256.jpg", "1001qijizhisen_SplatAlpha 0.jpg", "t_terrain_forest_d.png", "t_terrain_rock_d.png", "t_terrain_rock02_d.png", "t_terrain_tilefloor02_d.png", "rock1.png", "grass2.png", "dirt2.png", "sand1.png", "mask.png"];
                        if (test_Heightmap_terrain.nUseOldTerrain == 0) {
                            texNames = ["129_San.png", "San.png", "t_terrain_forest_d.png", "t_terrain_rock_d.png", "t_terrain_rock02_d.png", "t_terrain_tilefloor02_d.png", "rock1.png", "grass2.png", "dirt2.png", "sand1.png", "mask.png"];
                        }
                        else if (test_Heightmap_terrain.nUseOldTerrain == 1) {
                            texNames = ["1028_zhuchengyewai_256.jpg", "1028_zhuchengyewai_SplatAlpha 0.jpg", "t_terrain_forest_d.png", "t_terrain_rock_d.png", "t_terrain_rock02_d.png", "t_terrain_tilefloor02_d.png", "rock1.png", "grass2.png", "dirt2.png", "sand1.png", "mask.png"];
                        }
                        texUrl = [];
                        texNames.forEach(function (n) {
                            texUrl.push("".concat(resRootPath, "texture/").concat(n));
                        });
                        _a = this;
                        return [4 /*yield*/, util.loadTextures(texUrl, assetMgr)];
                    case 1:
                        _a.texs = _b.sent();
                        //this.heightData = test_Heightmap_terrain.getHeightmapPixels(texs[0]);
                        console.log(this.heightData);
                        if (test_Heightmap_terrain.nUseOldTerrain == 0) {
                            terrainMesh = genElevationMesh(gl, this.texs[0], 255, 0, 15);
                        }
                        else if (test_Heightmap_terrain.nUseOldTerrain == 1) {
                            terrainMesh = genElevationMesh(gl, this.texs[0], 255, 0, 500);
                        }
                        else {
                            terrainMesh = genElevationMesh(gl, this.texs[0], 255, 0, 200);
                        }
                        test_Heightmap_terrain.planeMF.mesh = terrainMesh;
                        //材质
                        this.mtr[0] = planeMR.materials[0];
                        //加载 shader 包
                        return [4 /*yield*/, util.loadShader(assetMgr)];
                    case 2:
                        //加载 shader 包
                        _b.sent();
                        tSH = assetMgr.getShader("terrain_rgb_control.shader.json");
                        this.mtr[0].setShader(tSH);
                        //纹理
                        this.mtr[0].setTexture("_Control", this.texs[1]);
                        this.mtr[0].setTexture("_Splat0", this.texs[2]);
                        this.mtr[0].setTexture("_Splat1", this.texs[3]);
                        this.mtr[0].setTexture("_Splat2", this.texs[4]);
                        this.mtr[0].setTexture("_Splat3", this.texs[5]);
                        //缩放和平铺
                        // mtr.setVector4(`_Splat0_ST`, new m4m.math.vector4(26.7, 26.7, 0, 0));
                        // mtr.setVector4(`_Splat1_ST`, new m4m.math.vector4(16, 16, 0, 0));
                        // mtr.setVector4(`_Splat2_ST`, new m4m.math.vector4(26.7, 26.7, 0, 0));
                        // mtr.setVector4(`_Splat3_ST`, new m4m.math.vector4(26.7, 26.7, 0, 0));
                        if (test_Heightmap_terrain.nUseOldTerrain == 0) {
                            this.mtr[0].setVector4("_Splat0_ST", new m4m.math.vector4(1.0, 1.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat1_ST", new m4m.math.vector4(1.0, 1.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat2_ST", new m4m.math.vector4(1.0, 1.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat3_ST", new m4m.math.vector4(1.0, 1.0, 0.0, 0.0));
                            this.mtr[0].setVector4("v_useTextureOrGPU", new m4m.math.vector4(1.0, 1.0, 0.01, 0.0));
                            this.mtr[0].setVector4("_HeightScale", new m4m.math.vector4(15.0, 15.0, 15.0, 15.0));
                        }
                        else if (test_Heightmap_terrain.nUseOldTerrain == 1) {
                            this.mtr[0].setVector4("_Splat0_ST", new m4m.math.vector4(10.0, 10.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat1_ST", new m4m.math.vector4(4.0, 4.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat2_ST", new m4m.math.vector4(4.0, 4.0, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat3_ST", new m4m.math.vector4(3.0, 3.0, 0.0, 0.0));
                            this.mtr[0].setVector4("v_useTextureOrGPU", new m4m.math.vector4(0.0, 0.0, 0.01, 0.0));
                        }
                        else {
                            this.mtr[0].setVector4("_Splat0_ST", new m4m.math.vector4(12, 12, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat1_ST", new m4m.math.vector4(7.2, 7.2, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat2_ST", new m4m.math.vector4(12, 12, 0.0, 0.0));
                            this.mtr[0].setVector4("_Splat3_ST", new m4m.math.vector4(12, 12, 0.0, 0.0));
                            this.mtr[0].setVector4("v_useTextureOrGPU", new m4m.math.vector4(0.0, 0.0, 0.01, 0.0));
                        }
                        //添加到场景
                        scene.addChild(planeNode);
                        return [2 /*return*/];
                }
            });
        });
    };
    test_Heightmap_terrain.prototype.OnModify = function () {
        console.log("Modify mesh");
        if (this.worldX < 10000 && this.worldZ < 10000) {
            this.gridX = Math.floor(this.worldX - -0.5 * test_Heightmap_terrain.widthAndHeight.width);
            this.gridZ = Math.floor(this.worldZ - -0.5 * test_Heightmap_terrain.widthAndHeight.height);
            //console.log("grid:" + this.gridX + ", " + this.gridZ);
        }
    };
    test_Heightmap_terrain.prototype.ApplayNewHeight = function (AddOrMinus) {
        //console.log("ApplayNewHeight called grid:"+ this.gridX + ", " + this.gridZ);
        //console.log("selectedBrush" + test_Heightmap_terrain.selectedBrush);
        //console.log("selectedBrushSize" + test_Heightmap_terrain.selectedBrushSize);
        var curSize = 32;
        if (test_Heightmap_terrain.selectedBrushSize == 0) {
            curSize = 16.0;
        }
        else if (test_Heightmap_terrain.selectedBrushSize == 1) {
            curSize = 32.0;
        }
        else if (test_Heightmap_terrain.selectedBrushSize == 2) {
            curSize = 64.0;
        }
        else if (test_Heightmap_terrain.selectedBrushSize == 3) {
            curSize = 128.0;
        }
        else if (test_Heightmap_terrain.selectedBrushSize == 4) {
            curSize = 256.0;
        }
        var logArray = new Array(curSize);
        for (var row = 0; row < curSize; row++) {
            logArray[row] = new Array(curSize);
        }
        var logBrushArray = new Array(curSize);
        for (var row = 0; row < curSize; row++) {
            logBrushArray[row] = new Array(curSize);
        }
        var logHeights_ = new Array(curSize);
        for (var row = 0; row < curSize; row++) {
            logHeights_[row] = new Array(curSize);
        }
        console.log(test_Heightmap_terrain._heights_);
        for (var row = 0; row < curSize; row++) {
            for (var column = 0; column < curSize; column++) {
                var curY = Math.floor(this.gridZ - curSize / 2) + row;
                if (curY < 0)
                    continue;
                if (curY >= test_Heightmap_terrain.widthAndHeight.height)
                    continue;
                var curX = Math.floor(this.gridX - curSize / 2) + column;
                if (curX < 0)
                    continue;
                if (curX >= test_Heightmap_terrain.widthAndHeight.width)
                    continue;
                var index = curY * test_Heightmap_terrain.widthAndHeight.width + curX;
                logArray[row][column] = index;
                if (AddOrMinus == false) {
                    var __index = row * curSize + column;
                    var delta = 0;
                    var key = test_Heightmap_terrain.selectedBrushSize + "_" + test_Heightmap_terrain.selectedBrush;
                    delta = 0.2 * test_Heightmap_terrain.dictBrushData[key][__index];
                    logBrushArray[row][column] = delta;
                    logHeights_[row][column] = test_Heightmap_terrain._heights_[index];
                    if (Math.abs(delta) > 0.0001) {
                        //console.log("delta:" + delta);
                        var f = test_Heightmap_terrain._heights_[index] + delta;
                        test_Heightmap_terrain._heights_[index] = f <= 255 ? f : 255;
                    }
                }
                else {
                    var __index = row * curSize + column;
                    var delta = 0;
                    var key = test_Heightmap_terrain.selectedBrushSize + "_" + test_Heightmap_terrain.selectedBrush;
                    delta = 0.2 * test_Heightmap_terrain.dictBrushData[key][__index];
                    if (Math.abs(delta) > 0.0001) {
                        var f = test_Heightmap_terrain._heights_[index] - delta;
                        test_Heightmap_terrain._heights_[index] = f >= 0 ? f : 0;
                    }
                }
            }
        }
        //console.log(logArray);
        //console.log(logBrushArray);
        //console.log(logHeights_);
        //console.log(test_Heightmap_terrain._heights_);
        var newMesh = UpdateElevationMesh(test_Heightmap_terrain.gl, 255, 0, test_Heightmap_terrain.genTerrainUseHeightScale);
        test_Heightmap_terrain.planeMF.mesh = newMesh;
    };
    test_Heightmap_terrain.BrushTextureLoadFinished = function (brushIndex, brushSize) {
        //console.log("BrushTextureLoadFinished brushIndex:" + brushIndex + ", brushSize:" + brushSize );
        var _name = "brush_" + String(brushIndex) + "_" + String(brushSize) + ".png";
        var texture0 = test_Heightmap_terrain.app.getAssetMgr().getAssetByName(_name);
        if (texture0 == null)
            console.log(_name + " is null. FAIL");
        else {
            console.log(_name + " is not null. ok");
            var key = String(brushSize) + "_" + String(brushIndex);
            test_Heightmap_terrain.dictBrushData[key] = new Uint8Array(test_Heightmap_terrain.getHeightmapPixels1(texture0, 0));
        }
    };
    test_Heightmap_terrain.prototype.addbtn = function (top, left, text, app_) {
        var _this = this;
        console.log("addbtn called");
        this.bk.name = "background";
        this.bk.width = 105 * 3;
        this.bk.height = 105 * 5;
        this.bk.pivot.x = 0;
        this.bk.pivot.y = 0;
        this.bk.localTranslate.x = 0;
        this.bk.localTranslate.y = 0;
        this.rooto2d.addChild(this.bk);
        var background = this.bk.addComponent("rawImage2D");
        this.page[0].name = "vertex";
        this.page[1].name = "uv";
        this.page[2].name = "texture";
        this.page[0].width = 103;
        this.page[1].width = 103;
        this.page[2].width = 103;
        this.page[0].height = 75;
        this.page[1].height = 75;
        this.page[2].height = 75;
        this.page[0].pivot.x = 0;
        this.page[1].pivot.x = 0;
        this.page[2].pivot.x = 0;
        this.page[0].pivot.y = 0;
        this.page[1].pivot.y = 0;
        this.page[2].pivot.y = 0;
        this.page[0].localTranslate.x = 0;
        this.page[1].localTranslate.x = 105;
        this.page[2].localTranslate.x = 210;
        this.page[0].localTranslate.y = 0;
        this.page[1].localTranslate.y = 0;
        this.page[2].localTranslate.y = 0;
        var page0Btn = this.page[0].addComponent("button");
        var page1Btn = this.page[1].addComponent("button");
        var page2Btn = this.page[2].addComponent("button");
        var page0BtnBack = this.page[0].addComponent("rawImage2D");
        var page1BtnBack = this.page[1].addComponent("rawImage2D");
        var page2BtnBack = this.page[2].addComponent("rawImage2D");
        page0BtnBack.image = this.texs[10];
        page1BtnBack.image = this.texs[10];
        page2BtnBack.image = this.texs[10];
        var labPage0 = new m4m.framework.transform2D();
        labPage0.name = "labPage0";
        labPage0.width = 103;
        labPage0.height = 73;
        labPage0.pivot.x = 0;
        labPage0.pivot.y = 0;
        labPage0.localTranslate.x = 1;
        labPage0.localTranslate.y = 1;
        var labelGeometry = labPage0.addComponent("label");
        var txtlabPage0 = "刷地形";
        if (test_Heightmap_terrain.font_ != null)
            console.log("font is not null, OK");
        else
            console.log("font is null, Fail");
        labelGeometry.font = test_Heightmap_terrain.font_;
        labelGeometry.text = txtlabPage0;
        labelGeometry.fontsize = 30;
        labelGeometry.color = new m4m.math.color(1, 0, 0, 1);
        this.page[0].addChild(labPage0);
        var labPage1 = new m4m.framework.transform2D();
        labPage1.name = "labPage1";
        labPage1.width = 103;
        labPage1.height = 73;
        labPage1.pivot.x = 0;
        labPage1.pivot.y = 0;
        labPage1.localTranslate.x = 1;
        labPage1.localTranslate.y = 1;
        var labelMaterial = labPage1.addComponent("label");
        var txtlabPage1 = "高度\nUV比例";
        labelMaterial.font = test_Heightmap_terrain.font_;
        labelMaterial.text = txtlabPage1;
        labelMaterial.fontsize = 30;
        labelMaterial.color = new m4m.math.color(1, 0, 0, 1);
        this.page[1].addChild(labPage1);
        var labPage2 = new m4m.framework.transform2D();
        labPage2.name = "labPage2";
        labPage2.width = 103;
        labPage2.height = 73;
        labPage2.pivot.x = 0;
        labPage2.pivot.y = 0;
        labPage2.localTranslate.x = 1;
        labPage2.localTranslate.y = 1;
        var labelTex = labPage2.addComponent("label");
        var txtlabPage2 = "Texture";
        labelTex.font = test_Heightmap_terrain.font_;
        labelTex.text = txtlabPage2;
        labelTex.fontsize = 30;
        labelTex.color = new m4m.math.color(1, 0, 0, 1);
        this.page[2].addChild(labPage2);
        page0Btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnPage(0);
        }, this);
        page1Btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnPage(1);
        }, this);
        page2Btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnPage(2);
        }, this);
        this.bk.addChild(this.page[0]);
        this.bk.addChild(this.page[1]);
        this.bk.addChild(this.page[2]);
        for (var i = 0; i < 11; i++) {
            var row = Math.floor(i / 3);
            var col = i % 3;
            this.btn[i].name = "btn" + i;
            this.btn[i].width = i < 6 ? 100 : 35;
            this.btn[i].height = i < 6 ? 100 : 35;
            this.btn[i].pivot.x = 0;
            this.btn[i].pivot.y = 0;
            this.btn[i].localTranslate.x = i < 6 ? 105 * col : 40 * (i - 6);
            this.btn[i].localTranslate.y = i < 6 ? 105 * row + 80 : 105 * 2 + 20 + 80;
            this.page[0].addChild(this.btn[i]);
            if (this.btn[i].getComponent("button") == null) {
                var btn_b = this.btn[i].addComponent("button");
                btn_b.pressedColor = new m4m.math.color(1, 1, 1, 1);
                btn_b.transition = m4m.framework.TransitionType.SpriteSwap;
                if (this.btn[i].getComponent("image2D") == null) {
                    btn_b.targetImage = this.btn[i].addComponent("image2D");
                }
            }
            if (i >= 6) {
                var lab = new m4m.framework.transform2D();
                lab.name = "lab";
                lab.width = 40;
                lab.height = 40;
                lab.pivot.x = 0;
                lab.pivot.y = 0;
                lab.localTranslate.x = 5;
                lab.localTranslate.y = 0;
                //lab.markDirty();
                var label = lab.addComponent("label");
                var txt = "刷" + String(i - 6 + 1);
                //label.font = _font;
                label.font = test_Heightmap_terrain.font_;
                label.text = txt;
                label.fontsize = 18;
                label.color = new m4m.math.color(1, 0, 0, 1);
                this.btn[i].addChild(lab);
            }
        }
        var loadIndexRow = [0, 1, 2, 3, 4, 5];
        var loadIndexColumn = [0, 1, 2, 3, 4];
        for (var iiii = 0; iiii < 6; iiii++) {
            var _loop_2 = function () {
                _name = "atlas/1/brush_" + loadIndexRow[iiii] + "_" + loadIndexColumn[jjjj] + ".png";
                texName = "".concat(resRootPath) + _name;
                console.log("texName:" + texName);
                var a = {
                    i: iiii,
                    j: jjjj,
                };
                test_Heightmap_terrain.app.getAssetMgr().load(texName, m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        console.log(a, iiii, jjjj);
                        test_Heightmap_terrain.BrushTextureLoadFinished(a.i, a.j);
                    }
                });
            };
            var _name, texName;
            for (var jjjj = 0; jjjj < 5; jjjj++) {
                _loop_2();
            }
        }
        //root 
        this.mtrlRoot.name = "MaterialRoot";
        this.mtrlRoot.width = 1;
        this.mtrlRoot.height = 1;
        this.mtrlRoot.pivot.x = 0;
        this.mtrlRoot.pivot.y = 0;
        this.mtrlRoot.localTranslate.x = 0;
        this.mtrlRoot.localTranslate.y = 0;
        this.rooto2d.addChild(this.mtrlRoot);
        // left text
        this.heightScaleCtrl.width = 300;
        this.heightScaleCtrl.height = 40;
        this.heightScaleCtrl.pivot.x = 0;
        this.heightScaleCtrl.pivot.y = 0;
        this.heightScaleCtrl.localTranslate.x = 18;
        this.heightScaleCtrl.localTranslate.y = 90;
        //this.rooto2d.addChild(this.heightScaleCtrl);
        this.mtrlRoot.addChild(this.heightScaleCtrl);
        //this.heightScaleCtrl.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.BOTTOM;
        //this.heightScaleCtrl.setLayoutValue(m4m.framework.layoutOption.H_CENTER, 0);
        //this.heightScaleCtrl.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
        var leftTextLabel = this.heightScaleCtrl.addComponent("label");
        leftTextLabel.font = test_Heightmap_terrain.font_;
        leftTextLabel.fontsize = 19;
        leftTextLabel.color = new m4m.math.color(1, 0, 0, 1);
        leftTextLabel.text = "高度比例";
        //输入框
        this.iptFrame_HeightScale[0].width = 190;
        this.iptFrame_HeightScale[0].height = 40;
        this.iptFrame_HeightScale[0].pivot.x = 0;
        this.iptFrame_HeightScale[0].pivot.y = 0;
        this.iptFrame_HeightScale[0].localTranslate.x = 300 - 190;
        this.iptFrame_HeightScale[0].localTranslate.y = 0;
        this.heightScaleCtrl.addChild(this.iptFrame_HeightScale[0]);
        var ipt0 = this.iptFrame_HeightScale[0].addComponent("inputField");
        ipt0.LineType = m4m.framework.lineType.SingleLine; //单行输入
        ipt0.onTextSubmit = function (t) {
            console.log("HeightScale.x:".concat(t));
            var scale = Number(t);
            _this.mtr[0].setVector4("_HeightScale", new m4m.math.vector4(scale, scale, scale, scale));
        };
        var img_t0 = new m4m.framework.transform2D;
        img_t0.width = this.iptFrame_HeightScale[0].width;
        img_t0.height = this.iptFrame_HeightScale[0].height;
        this.iptFrame_HeightScale[0].addChild(img_t0);
        ipt0.frameImage = img_t0.addComponent("image2D");
        ipt0.frameImage.imageType = m4m.framework.ImageType.Sliced;
        ipt0.frameImage.imageBorder.l = 10;
        ipt0.frameImage.imageBorder.t = 2;
        ipt0.frameImage.imageBorder.r = 10;
        ipt0.frameImage.imageBorder.b = 2;
        var text_t = new m4m.framework.transform2D;
        text_t.width = this.iptFrame_HeightScale[0].width;
        text_t.height = this.iptFrame_HeightScale[0].height;
        this.iptFrame_HeightScale[0].addChild(text_t);
        ipt0.TextLabel = text_t.addComponent("label");
        ipt0.TextLabel.font = test_Heightmap_terrain.font_;
        ipt0.TextLabel.fontsize = 19;
        ipt0.TextLabel.color = new m4m.math.color(1, 1, 1, 1);
        text_t.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.V_CENTER;
        text_t.setLayoutValue(m4m.framework.layoutOption.H_CENTER, 0);
        text_t.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
        var p_t = new m4m.framework.transform2D;
        p_t.width = this.iptFrame_HeightScale[0].width;
        p_t.height = this.iptFrame_HeightScale[0].height;
        this.iptFrame_HeightScale[0].addChild(p_t);
        ipt0.PlaceholderLabel = p_t.addComponent("label");
        ipt0.PlaceholderLabel.text = "SingleLine Enter text...";
        ipt0.PlaceholderLabel.font = test_Heightmap_terrain.font_;
        ipt0.PlaceholderLabel.fontsize = 19;
        ipt0.PlaceholderLabel.color = new m4m.math.color(0.6, 0.6, 0.6, 1);
        var inputSuit = [
            [this.textureUVInputCtrls[0][0], this.textureUVInputCtrls[0][1]],
            [this.textureUVInputCtrls[1][0], this.textureUVInputCtrls[1][1]],
            [this.textureUVInputCtrls[2][0], this.textureUVInputCtrls[2][1]],
            [this.textureUVInputCtrls[3][0], this.textureUVInputCtrls[3][1]],
        ];
        var yPos = 90 + 55;
        for (var iRow = 0; iRow < 4; iRow++) {
            ///textureUVScaleCtrl
            this.textureUVScaleCtrl[iRow].width = 190;
            this.textureUVScaleCtrl[iRow].height = 38;
            this.textureUVScaleCtrl[iRow].pivot.x = 0;
            this.textureUVScaleCtrl[iRow].pivot.y = 0;
            this.textureUVScaleCtrl[iRow].localTranslate.x = 18;
            this.textureUVScaleCtrl[iRow].localTranslate.y = yPos;
            yPos += 40;
            this.mtrlRoot.addChild(this.textureUVScaleCtrl[iRow]);
            var labelTextureScale = this.textureUVScaleCtrl[iRow].addComponent("label");
            labelTextureScale.font = test_Heightmap_terrain.font_;
            labelTextureScale.fontsize = 19;
            labelTextureScale.color = new m4m.math.color(1, 0, 0, 1);
            var iUV = iRow + 1;
            labelTextureScale.text = "UV" + iUV + "比例";
            ///2个输入框
            //输入框
            this.textureUVInputCtrls[iRow][0].width = 90;
            this.textureUVInputCtrls[iRow][0].height = 38;
            this.textureUVInputCtrls[iRow][0].pivot.x = 0;
            this.textureUVInputCtrls[iRow][0].pivot.y = 0;
            this.textureUVInputCtrls[iRow][0].localTranslate.x = 90;
            this.textureUVInputCtrls[iRow][0].localTranslate.y = 0;
            this.textureUVInputCtrls[iRow][1].width = 90;
            this.textureUVInputCtrls[iRow][1].height = 38;
            this.textureUVInputCtrls[iRow][1].pivot.x = 0;
            this.textureUVInputCtrls[iRow][1].pivot.y = 0;
            this.textureUVInputCtrls[iRow][1].localTranslate.x = 180;
            this.textureUVInputCtrls[iRow][1].localTranslate.y = 0;
            this.textureUVScaleCtrl[iRow].addChild(this.textureUVInputCtrls[iRow][0]);
            this.textureUVScaleCtrl[iRow].addChild(this.textureUVInputCtrls[iRow][1]);
            var ipt00 = this.textureUVInputCtrls[iRow][0].addComponent("inputField");
            ipt00.LineType = m4m.framework.lineType.SingleLine; //单行输入
            ipt00.onTextSubmit = function (t) {
                console.log("UV .x:".concat(t));
                var scale = Number(t);
                var input00 = inputSuit[0][0].getComponent("inputField");
                var u0 = Number(input00.text);
                var input01 = inputSuit[0][1].getComponent("inputField");
                var v0 = Number(input01.text);
                var input10 = inputSuit[1][0].getComponent("inputField");
                var u1 = Number(input10.text);
                var input11 = inputSuit[1][1].getComponent("inputField");
                var v1 = Number(input11.text);
                var input20 = inputSuit[2][0].getComponent("inputField");
                var u2 = Number(input20.text);
                var input21 = inputSuit[2][1].getComponent("inputField");
                var v2 = Number(input21.text);
                var input30 = inputSuit[3][0].getComponent("inputField");
                var u3 = Number(input30.text);
                var input31 = inputSuit[3][1].getComponent("inputField");
                var v3 = Number(input30.text);
                if (u0 == 0) {
                    u0 = 1;
                    input00.text = "1";
                }
                if (v0 == 0) {
                    v0 = 1;
                    input01.text = "1";
                }
                if (u1 == 0) {
                    u1 = 1;
                    input10.text = "1";
                }
                if (v1 == 0) {
                    v1 = 1;
                    input11.text = "1";
                }
                if (u2 == 0) {
                    u2 = 1;
                    input20.text = "1";
                }
                if (v2 == 0) {
                    v2 = 1;
                    input21.text = "1";
                }
                if (u3 == 0) {
                    u3 = 1;
                    input30.text = "1";
                }
                if (v3 == 0) {
                    v3 = 1;
                    input31.text = "1";
                }
                console.log(u0 + "," + v0);
                console.log(u1 + "," + v1);
                console.log(u2 + "," + v2);
                console.log(u3 + "," + v3);
                _this.mtr[0].setVector4("_Splat0_ST", new m4m.math.vector4(u0, v0, 0, 0));
                _this.mtr[0].setVector4("_Splat1_ST", new m4m.math.vector4(u1, v1, 0, 0));
                _this.mtr[0].setVector4("_Splat2_ST", new m4m.math.vector4(u2, v2, 0, 0));
                _this.mtr[0].setVector4("_Splat3_ST", new m4m.math.vector4(u3, v3, 0, 0));
            };
            var ipt11 = this.textureUVInputCtrls[iRow][1].addComponent("inputField");
            ipt11.LineType = m4m.framework.lineType.SingleLine; //单行输入
            ipt11.onTextSubmit = function (t) {
                console.log("UV .y:".concat(t));
                var scale = Number(t);
                var input00 = inputSuit[0][0].getComponent("inputField");
                var u0 = Number(input00.text);
                var input01 = inputSuit[0][1].getComponent("inputField");
                var v0 = Number(input01.text);
                var input10 = inputSuit[1][0].getComponent("inputField");
                var u1 = Number(input10.text);
                var input11 = inputSuit[1][1].getComponent("inputField");
                var v1 = Number(input11.text);
                var input20 = inputSuit[2][0].getComponent("inputField");
                var u2 = Number(input20.text);
                var input21 = inputSuit[2][1].getComponent("inputField");
                var v2 = Number(input21.text);
                var input30 = inputSuit[3][0].getComponent("inputField");
                var u3 = Number(input30.text);
                var input31 = inputSuit[3][1].getComponent("inputField");
                var v3 = Number(input30.text);
                if (u0 == 0) {
                    u0 = 1;
                    input00.text = "1";
                }
                if (v0 == 0) {
                    v0 = 1;
                    input01.text = "1";
                }
                if (u1 == 0) {
                    u1 = 1;
                    input10.text = "1";
                }
                if (v1 == 0) {
                    v1 = 1;
                    input11.text = "1";
                }
                if (u2 == 0) {
                    u2 = 1;
                    input20.text = "1";
                }
                if (v2 == 0) {
                    v2 = 1;
                    input21.text = "1";
                }
                if (u3 == 0) {
                    u3 = 1;
                    input30.text = "1";
                }
                if (v3 == 0) {
                    v3 = 1;
                    input31.text = "1";
                }
                console.log(u0 + "," + v0);
                console.log(u1 + "," + v1);
                console.log(u2 + "," + v2);
                console.log(u3 + "," + v3);
                _this.mtr[0].setVector4("_Splat0_ST", new m4m.math.vector4(u0, v0, 0, 0));
                _this.mtr[0].setVector4("_Splat1_ST", new m4m.math.vector4(u1, v1, 0, 0));
                _this.mtr[0].setVector4("_Splat2_ST", new m4m.math.vector4(u2, v2, 0, 0));
                _this.mtr[0].setVector4("_Splat3_ST", new m4m.math.vector4(u3, v3, 0, 0));
            };
            var img_u = new m4m.framework.transform2D;
            img_u.width = this.textureUVInputCtrls[iRow][0].width;
            img_u.height = this.textureUVInputCtrls[iRow][0].height;
            this.textureUVInputCtrls[iRow][0].addChild(img_u);
            if (img_u.getComponent("image2D") == null)
                ipt00.frameImage = img_u.addComponent("image2D");
            //ipt00.frameImage.imageType = m4m.framework.ImageType.Sliced;
            //ipt00.frameImage.imageBorder.l = 10;
            //ipt00.frameImage.imageBorder.t = 2;
            //ipt00.frameImage.imageBorder.r = 10;
            //ipt00.frameImage.imageBorder.b = 2;
            var img_v = new m4m.framework.transform2D;
            img_v.width = this.textureUVInputCtrls[iRow][1].width;
            img_v.height = this.textureUVInputCtrls[iRow][1].height;
            this.textureUVInputCtrls[iRow][1].addChild(img_v);
            if (img_v.getComponent("image2D") == null)
                ipt11.frameImage = img_v.addComponent("image2D");
            //ipt11.frameImage.imageType = m4m.framework.ImageType.Sliced;
            //ipt11.frameImage.imageBorder.l = 10;
            //ipt11.frameImage.imageBorder.t = 2;
            //ipt11.frameImage.imageBorder.r = 10;
            //ipt11.frameImage.imageBorder.b = 2;
            var text_x = new m4m.framework.transform2D;
            text_x.width = this.textureUVInputCtrls[iRow][0].width;
            text_x.height = this.textureUVInputCtrls[iRow][0].height;
            this.textureUVInputCtrls[iRow][0].addChild(text_x);
            ipt00.TextLabel = text_x.addComponent("label");
            ipt00.TextLabel.font = test_Heightmap_terrain.font_;
            ipt00.TextLabel.fontsize = 24;
            ipt00.TextLabel.color = new m4m.math.color(1, 1, 1, 1);
            text_x.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.V_CENTER;
            text_x.setLayoutValue(m4m.framework.layoutOption.H_CENTER, 0);
            text_x.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
            var text_y = new m4m.framework.transform2D;
            text_y.width = this.textureUVInputCtrls[iRow][1].width;
            text_y.height = this.textureUVInputCtrls[iRow][1].height;
            this.textureUVInputCtrls[iRow][1].addChild(text_y);
            ipt11.TextLabel = text_y.addComponent("label");
            ipt11.TextLabel.font = test_Heightmap_terrain.font_;
            ipt11.TextLabel.fontsize = 24;
            ipt11.TextLabel.color = new m4m.math.color(1, 1, 1, 1);
            text_y.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.V_CENTER;
            text_y.setLayoutValue(m4m.framework.layoutOption.H_CENTER, 0);
            text_y.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
            var p_tx = new m4m.framework.transform2D;
            p_tx.width = this.textureUVInputCtrls[iRow][0].width;
            p_tx.height = this.textureUVInputCtrls[iRow][0].height;
            this.textureUVInputCtrls[iRow][0].addChild(p_tx);
            ipt00.PlaceholderLabel = p_tx.addComponent("label");
            ipt00.PlaceholderLabel.text = "U scale ...";
            ipt00.PlaceholderLabel.font = test_Heightmap_terrain.font_;
            ipt00.PlaceholderLabel.fontsize = 24;
            ipt00.PlaceholderLabel.color = new m4m.math.color(0.6, 0.6, 0.6, 1);
            var p_t1 = new m4m.framework.transform2D;
            p_t1.width = this.textureUVInputCtrls[iRow][1].width;
            p_t1.height = this.textureUVInputCtrls[iRow][1].height;
            this.textureUVInputCtrls[iRow][1].addChild(p_t1);
            ipt11.PlaceholderLabel = p_t1.addComponent("label");
            ipt11.PlaceholderLabel.text = "V scale ...";
            ipt11.PlaceholderLabel.font = test_Heightmap_terrain.font_;
            ipt11.PlaceholderLabel.fontsize = 24;
            ipt11.PlaceholderLabel.color = new m4m.math.color(0.6, 0.6, 0.6, 1);
        }
        //root 
        this.texRoot.name = "TextureLayerRoot";
        this.texRoot.width = 1;
        this.texRoot.height = 1;
        this.texRoot.pivot.x = 0;
        this.texRoot.pivot.y = 0;
        this.texRoot.localTranslate.x = 0;
        this.texRoot.localTranslate.y = 0;
        this.rooto2d.addChild(this.texRoot);
        var _loop_3 = function () {
            this_2.textureLayer[iRow].width = 60;
            this_2.textureLayer[iRow].height = 60;
            this_2.textureLayer[iRow].pivot.x = 0;
            this_2.textureLayer[iRow].pivot.y = 0;
            this_2.textureLayer[iRow].localTranslate.x = 1;
            this_2.textureLayer[iRow].localTranslate.y = this_2.page[2].height + 64 * (iRow % 5);
            if (this_2.texRoot == null)
                console.log("texRoot is nul, Fail");
            else
                console.log("texRoot is not null, OK");
            this_2.texRoot.addChild(this_2.textureLayer[iRow]);
            var imgTs = new m4m.framework.transform2D;
            imgTs.width = this_2.textureLayer[iRow].width;
            imgTs.height = this_2.textureLayer[iRow].height;
            imgTs.pivot.x = 0;
            imgTs.pivot.y = 0;
            imgTs.localTranslate.x = 0;
            imgTs.localTranslate.y = 0;
            this_2.textureLayer[iRow].addChild(imgTs);
            var img2D = imgTs.addComponent("rawImage2D");
            var param0 = {
                index: iRow,
                img: img2D,
            };
            if (iRow < 4)
                img2D.image = this_2.texs[iRow + 2];
            else
                img2D.image = this_2.texs[1];
            var rightButton = imgTs.addComponent("button");
            rightButton.addListener(m4m.event.UIEventEnum.PointerClick, function () {
                this.OnReplaceTexture(param0.index, param0.img);
            }, this_2);
        };
        var this_2 = this;
        //left side 4 texture layer + 1 mix layer
        for (var iRow = 0; iRow < 5; iRow++) {
            _loop_3();
        }
        /// left bottom a button to select use blend texture or gradient
        this.textureLayer[5].width = 100;
        this.textureLayer[5].height = 35;
        this.textureLayer[5].pivot.x = 0;
        this.textureLayer[5].pivot.y = 0;
        this.textureLayer[5].localTranslate.x = 1;
        this.textureLayer[5].localTranslate.y = this.page[2].height + 64 * 5 + 30;
        this.texRoot.addChild(this.textureLayer[5]);
        var btnUseBlendTexture = this.textureLayer[5].addComponent("button");
        var labelBlendTexture = this.textureLayer[5].addComponent("label");
        btnUseBlendTexture.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnUseBlendTexture();
        }, this);
        labelBlendTexture.color = new m4m.math.color(1, 0, 0, 1);
        labelBlendTexture.text = "Blend Texture";
        labelBlendTexture.font = test_Heightmap_terrain.font_;
        labelBlendTexture.fontsize = 16;
        var imgLayer5Ts = new m4m.framework.transform2D;
        imgLayer5Ts.width = this.textureLayer[5].width;
        imgLayer5Ts.height = this.textureLayer[5].height;
        imgLayer5Ts.pivot.x = 0;
        imgLayer5Ts.pivot.y = 0;
        imgLayer5Ts.localTranslate.x = 0;
        imgLayer5Ts.localTranslate.y = 0;
        this.textureLayer[5].addChild(imgLayer5Ts);
        var imgTextureLayer5 = imgLayer5Ts.addComponent("rawImage2D");
        imgTextureLayer5.image = this.texs[10];
        imgTextureLayer5.color = new m4m.math.color(1.0, 1.0, 1.0, 0.5);
        this.textureLayer[6].width = 100;
        this.textureLayer[6].height = 35;
        this.textureLayer[6].pivot.x = 0;
        this.textureLayer[6].pivot.y = 0;
        this.textureLayer[6].localTranslate.x = 1;
        this.textureLayer[6].localTranslate.y = this.page[2].height + 64 * 5 + 30 + 35 + 5;
        this.texRoot.addChild(this.textureLayer[6]);
        var btnUseGPUBlend = this.textureLayer[6].addComponent("button");
        var labelGPUBlend = this.textureLayer[6].addComponent("label");
        btnUseGPUBlend.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnUseGPUMixTexture();
        }, this);
        labelGPUBlend.color = new m4m.math.color(1, 0, 0, 1);
        labelGPUBlend.text = "GPU Blend";
        labelGPUBlend.font = test_Heightmap_terrain.font_;
        labelGPUBlend.fontsize = 16;
        var imgLayer6Ts = new m4m.framework.transform2D;
        imgLayer6Ts.width = this.textureLayer[6].width;
        imgLayer6Ts.height = this.textureLayer[6].height;
        imgLayer6Ts.pivot.x = 0;
        imgLayer6Ts.pivot.y = 0;
        imgLayer6Ts.localTranslate.x = 0;
        imgLayer6Ts.localTranslate.y = 0;
        this.textureLayer[6].addChild(imgLayer6Ts);
        var imgTextureLayer6 = imgLayer6Ts.addComponent("rawImage2D");
        imgTextureLayer6.image = this.texs[10];
        imgTextureLayer6.color = new m4m.math.color(1.0, 1.0, 1.0, 0.5);
        //滑动卷轴框
        var scroll_t = new m4m.framework.transform2D;
        scroll_t.width = 210;
        scroll_t.height = 450;
        this.texRoot.addChild(scroll_t);
        scroll_t.localTranslate.x = 105;
        scroll_t.localTranslate.y = 75;
        var scroll_ = scroll_t.addComponent("scrollRect");
        var ct = new m4m.framework.transform2D;
        scroll_t.addChild(ct);
        scroll_.inertia = true;
        ct.width = 208;
        ct.height = 208 * 10;
        scroll_.decelerationRate = 0.135;
        scroll_.content = ct;
        scroll_t.isMask = true;
        scroll_.horizontal = false;
        scroll_.vertical = true;
        var _loop_4 = function () {
            var raw_t2 = new m4m.framework.transform2D;
            sz = "texture_" + String(imgIndex_);
            raw_t2.name = sz;
            raw_t2.width = 200;
            raw_t2.height = 200;
            raw_t2.localTranslate.x = 8;
            raw_t2.localTranslate.y = 208 * ((imgIndex_ - 1));
            var raw_i2 = raw_t2.addComponent("rawImage2D");
            raw_i2.image = this_3.texs[imgIndex_];
            ct.addChild(raw_t2);
            //卷轴框 label
            var s_l_t = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Label);
            s_l_t.width = 180;
            var s_l = s_l_t.getComponent("label");
            s_l.font = test_Heightmap_terrain.font_;
            s_l.fontsize = 40;
            s_l.color = new m4m.math.color(0.0, 0.0, 1.0, 0.3);
            s_l.verticalOverflow = true;
            s_l.verticalType = m4m.framework.VerticalType.Top;
            s_l.text = "scrollRect \ntry drag \nto move";
            ct.addChild(s_l_t);
            var imgBtn = raw_t2.addComponent("button");
            var param = {
                btn: imgBtn,
                index: imgIndex_,
            };
            imgBtn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
                this.OnClickTexture(param.index, param.btn);
            }, this_3);
        };
        var this_3 = this, sz;
        //卷轴框 raw png
        for (var imgIndex_ = 1; imgIndex_ < 11; imgIndex_++) {
            _loop_4();
        }
        /// selected texture
        this.currentPickTexture = new m4m.framework.transform2D;
        this.currentPickTexture.width = 60;
        this.currentPickTexture.height = 60;
        this.currentPickTexture.pivot.x = 0.5;
        this.currentPickTexture.pivot.y = 0.5;
        this.texRoot.addChild(this.currentPickTexture);
        var _currentPick = this.currentPickTexture.addComponent("rawImage2D");
        _currentPick.image = null;
        //atlas
        var imgIndex = [];
        for (var ii = 0; ii < 11; ii++) {
            imgIndex[ii] = this.btn[ii];
        }
        var abc = [
            [this.textureUVInputCtrls[0][0], this.textureUVInputCtrls[0][1]],
            [this.textureUVInputCtrls[1][0], this.textureUVInputCtrls[1][1]],
            [this.textureUVInputCtrls[2][0], this.textureUVInputCtrls[2][1]],
            [this.textureUVInputCtrls[3][0], this.textureUVInputCtrls[3][1]]
        ];
        test_Heightmap_terrain.app.getAssetMgr().load("".concat(resRootPath, "atlas/1/brush0.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                test_Heightmap_terrain.app.getAssetMgr().load("".concat(resRootPath, "atlas/1/2.atlas.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
                    if (state.isfinish) {
                        var atlas = test_Heightmap_terrain.app.getAssetMgr().getAssetByName("2.atlas.json");
                        console.log("atlas:" + atlas);
                        console.log("sprites:" + atlas.sprites);
                        for (var Index = 0; Index < 11; Index++) {
                            var img2D = imgIndex[Index].getComponent("image2D");
                            if (img2D == null) {
                                console.log("Fool, null img2D:" + imgIndex);
                            }
                            else {
                                var spriteName = "brush_" + (Index);
                                console.log("OK, img2D attach sprite" + atlas.sprites[spriteName]);
                                img2D.sprite = atlas.sprites[spriteName];
                            }
                        }
                        ipt0.frameImage.sprite = atlas.sprites["input_0"];
                        var img2Dx = abc[0][0].getComponentsInChildren("image2D");
                        if (img2Dx == null)
                            console.log(ii + " img2Dx is null FAIL");
                        else
                            console.log(ii + "img2Dx is not null OK");
                        img2Dx[0].sprite = atlas.sprites["input_0"];
                        var img2Dy = abc[0][1].getComponentsInChildren("image2D");
                        img2Dy[0].sprite = atlas.sprites["input_0"];
                        var img2Dx1 = abc[1][0].getComponentsInChildren("image2D");
                        if (img2Dx1 == null)
                            console.log(ii + " img2Dx1 is null FAIL");
                        else
                            console.log(ii + "img2Dx1 is not null OK");
                        img2Dx1[0].sprite = atlas.sprites["input_0"];
                        var img2Dy1 = abc[1][1].getComponentsInChildren("image2D");
                        img2Dy1[0].sprite = atlas.sprites["input_0"];
                        var img2Dx2 = abc[2][0].getComponentsInChildren("image2D");
                        if (img2Dx2 == null)
                            console.log(ii + " img2Dx2 is null FAIL");
                        else
                            console.log(ii + "img2Dx2 is not null OK");
                        img2Dx2[0].sprite = atlas.sprites["input_0"];
                        var img2Dy2 = abc[2][1].getComponentsInChildren("image2D");
                        img2Dy2[0].sprite = atlas.sprites["input_0"];
                        var img2Dx3 = abc[3][0].getComponentsInChildren("image2D");
                        if (img2Dx3 == null)
                            console.log(ii + " img2Dx3 is null FAIL");
                        else
                            console.log(ii + "img2Dx3 is not null OK");
                        img2Dx3[0].sprite = atlas.sprites["input_0"];
                        var img2Dy3 = abc[3][1].getComponentsInChildren("image2D");
                        img2Dy3[0].sprite = atlas.sprites["input_0"];
                    }
                });
            }
        });
        return this.btn;
    };
    test_Heightmap_terrain.prototype.afterAddButton = function () {
        var btnIndex = [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4];
        var btn_b0 = this.btn[0].getComponent("button");
        btn_b0.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[0]);
        }, this);
        var btn_b1 = this.btn[1].getComponent("button");
        btn_b1.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[1]);
        }, this);
        var btn_b2 = this.btn[2].getComponent("button");
        btn_b2.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[2]);
        }, this);
        var btn_b3 = this.btn[3].getComponent("button");
        btn_b3.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[3]);
        }, this);
        var btn_b4 = this.btn[4].getComponent("button");
        btn_b4.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[4]);
        }, this);
        var btn_b5 = this.btn[5].getComponent("button");
        btn_b5.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnBrushBtnClick(btnIndex[5]);
        }, this);
        var btn_b6 = this.btn[6].getComponent("button");
        btn_b6.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnSetBrushSize(btnIndex[6]);
        }, this);
        var btn_b7 = this.btn[7].getComponent("button");
        btn_b7.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnSetBrushSize(btnIndex[7]);
        }, this);
        var btn_b8 = this.btn[8].getComponent("button");
        btn_b8.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnSetBrushSize(btnIndex[8]);
        }, this);
        var btn_b9 = this.btn[9].getComponent("button");
        btn_b9.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnSetBrushSize(btnIndex[9]);
        }, this);
        var btn_b10 = this.btn[10].getComponent("button");
        btn_b10.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            this.OnSetBrushSize(btnIndex[10]);
        }, this);
    };
    test_Heightmap_terrain.prototype.OnSetBrushSize = function (index) {
        console.log("Brush size" + index);
        test_Heightmap_terrain.selectedBrushSize = index;
    };
    test_Heightmap_terrain.prototype.OnBrushBtnClick = function (index) {
        console.log("btn" + index + " clicked");
        test_Heightmap_terrain.selectedBrush = index;
    };
    test_Heightmap_terrain.prototype.OnPage = function (btnNumber) {
        console.log("page " + btnNumber + " clicked");
        if (btnNumber == 0) {
            for (var _i = 0, _a = this.btn; _i < _a.length; _i++) {
                var item = _a[_i];
                item.visible = true;
            }
            this.mtrlRoot.visible = false;
            this.texRoot.visible = false;
            this.currentSelectPage = 0;
        }
        else if (btnNumber == 1) {
            for (var _b = 0, _c = this.btn; _b < _c.length; _b++) {
                var item = _c[_b];
                item.visible = false;
            }
            this.mtrlRoot.visible = true;
            this.texRoot.visible = false;
            this.currentSelectPage = 1;
        }
        else {
            for (var _d = 0, _e = this.btn; _d < _e.length; _d++) {
                var item = _e[_d];
                item.visible = false;
            }
            this.mtrlRoot.visible = false;
            this.texRoot.visible = true;
            this.currentSelectPage = 2;
        }
    };
    test_Heightmap_terrain.prototype.OnUseBlendTexture = function () {
        //console.log("Use blend texture control 4 texture mix");
        this.mtr[0].setVector4("v_useTextureOrGPU", new m4m.math.vector4(0.0, 0.0, 0.01, 0.0));
    };
    test_Heightmap_terrain.prototype.OnUseGPUMixTexture = function () {
        //console.log("Use GPU control 4 texture with height factor");
        this.mtr[0].setVector4("v_useTextureOrGPU", new m4m.math.vector4(1.0, 1.0, 0.01, 0.0));
    };
    test_Heightmap_terrain.prototype.OnClickTexture = function (_index, _btn) {
        //console.log("texture btn:" + _index + " clicked");
        var img2D = this.currentPickTexture.getComponent("rawImage2D");
        if (img2D != null) {
            img2D.image = this.texs[_index];
            test_Heightmap_terrain.bUpdatePickedTexture = true;
            test_Heightmap_terrain.currentPickIndex = _index;
        }
    };
    test_Heightmap_terrain.prototype.OnReplaceTexture = function (_index, _img2D) {
        // texture layer, replace
        if (test_Heightmap_terrain.currentPickIndex != -1) {
            _img2D.image = this.texs[test_Heightmap_terrain.currentPickIndex];
            if (_index == 0) {
                this.mtr[0].setTexture("_Splat0", this.texs[test_Heightmap_terrain.currentPickIndex]);
            }
            else if (_index == 1) {
                this.mtr[0].setTexture("_Splat1", this.texs[test_Heightmap_terrain.currentPickIndex]);
            }
            else if (_index == 2) {
                this.mtr[0].setTexture("_Splat2", this.texs[test_Heightmap_terrain.currentPickIndex]);
            }
            else if (_index == 3) {
                this.mtr[0].setTexture("_Splat3", this.texs[test_Heightmap_terrain.currentPickIndex]);
            }
            else {
                this.mtr[0].setTexture("_Control", this.texs[test_Heightmap_terrain.currentPickIndex]);
            }
            test_Heightmap_terrain.currentPickIndex = -1;
            test_Heightmap_terrain.bUpdatePickedTexture = false;
            var img2D = this.currentPickTexture.getComponent("rawImage2D");
            if (img2D != null) {
                img2D.image = null;
            }
        }
    };
    test_Heightmap_terrain.prototype.UpdatePickedTexturePosition = function () {
        if (test_Heightmap_terrain.bUpdatePickedTexture) {
            var pos = new m4m.math.vector2(test_Heightmap_terrain.app.getInputMgr().point.x, test_Heightmap_terrain.app.getInputMgr().point.y);
            console.log("mouse:" + pos.x + ", " + pos.y);
            /// out of UI area, disable attach to mouse
            var img = this.currentPickTexture.getComponent("rawImage2D");
            if (pos.x >= 105 * 3 || pos.x < 0 || pos.y >= 105 * 6 || pos.y < 0) {
                test_Heightmap_terrain.bUpdatePickedTexture = false;
                if (img != null)
                    img.image = null;
            }
            /// top label area, disable attach to mouse
            if (pos.x > 0 && pos.x < 105 * 3 && pos.y > 0 && pos.y < 75) {
                test_Heightmap_terrain.bUpdatePickedTexture = false;
                if (img != null)
                    img.image = null;
            }
            if (img.image != null) {
                this.currentPickTexture.localTranslate.x = pos.x;
                this.currentPickTexture.localTranslate.y = pos.y;
                this.currentPickTexture.localTranslate = pos;
                this.currentPickTexture.markDirty();
            }
        }
    };
    test_Heightmap_terrain.prototype.update = function (delta) {
        this._mousePos = new m4m.math.vector2(test_Heightmap_terrain.app.getInputMgr().point.x, test_Heightmap_terrain.app.getInputMgr().point.y);
        this.UpdatePickedTexturePosition();
        /// left top area is ui so do not handle
        if (this._mousePos.x < 105 * 3 && this._mousePos.y < 105 * 6) {
            this.nFrame++;
            return;
        }
        if (test_Heightmap_terrain.mouseDown == true) {
            if (this.currentSelectPage != 0) {
                this.nFrame++;
                return;
            }
            if (test_Heightmap_terrain.altKey == true) {
                this.nFrame++;
                return;
            }
            if (this.nFrame % 9 == 0) {
                if (this.TestHit()) {
                    this.OnModify();
                    if (test_Heightmap_terrain.shifKey) {
                        this.ApplayNewHeight(true);
                    }
                    else {
                        this.ApplayNewHeight(false);
                    }
                }
            }
        }
        this.nFrame++;
    };
    test_Heightmap_terrain.prototype.TestHit = function () {
        //创建射线
        var ray = test_Heightmap_terrain.cam.creatRayByScreen(new m4m.math.vector2(test_Heightmap_terrain.app.getInputMgr().point.x, test_Heightmap_terrain.app.getInputMgr().point.y), test_Heightmap_terrain.app);
        //多碰撞
        //let tempinfos: m4m.framework.pickinfo[] = []; //射线碰撞的结果集
        //let bool1 = ea.scene.pickAll(ray, tempinfos, true);
        //单碰撞
        var tempinfo = new m4m.framework.pickinfo(); //射线碰撞的结果集
        var bool2 = test_Heightmap_terrain.app.getScene().pick(ray, tempinfo, true);
        if (bool2) {
            console.log("Hit:" + tempinfo.hitposition);
            this.worldX = tempinfo.hitposition.x;
            this.worldZ = tempinfo.hitposition.z;
            return true;
        }
        else {
            console.log("NotHit");
            this.worldX = 10000;
            this.worldZ = 10000;
            return false;
        }
    };
    test_Heightmap_terrain._heights_ = null;
    test_Heightmap_terrain.bUpdatePickedTexture = false;
    test_Heightmap_terrain.currentPickIndex = -1;
    test_Heightmap_terrain.mouseDown = false;
    test_Heightmap_terrain.dictBrushData = {};
    test_Heightmap_terrain.selectedBrush = 0; //选择的刷子
    test_Heightmap_terrain.selectedBrushSize = 0; //brush size: 0:16; 1:32; 2:64; 3:128; 4:256;
    return test_Heightmap_terrain;
}());
/**
 * 通过 高度图 ，生成 高度地势 mesh
 * @param gl webgl上下文
 * @param heightmap 高度图
 * @param width x轴方向尺寸
 * @param height y轴方向尺寸
 * @param depth z轴方向尺寸
 * @param segmentsW X轴的段落数
 * @param segmentsH z轴的段落数
 * @param maxElevation 最大高度
 * @param minElevation 最小高度
 * @returns
 */
function genElevationMesh(gl, heightmap, maxElevation, minElevation, heightScale) {
    if (maxElevation === void 0) { maxElevation = 255; }
    if (minElevation === void 0) { minElevation = 0; }
    if (heightScale === void 0) { heightScale = 12.0; }
    var _heightdata = test_Heightmap_terrain.getHeightmapPixels1(heightmap, 0);
    //const w = heightmap.glTexture.width;
    //const h = heightmap.glTexture.height;
    this.heightMapWidth = heightmap.glTexture.width;
    this.heightMapHeight = heightmap.glTexture.height;
    console.log("this.heightMapWidth:" + this.heightMapWidth);
    console.log("this.heightMapHeight:" + this.heightMapHeight);
    test_Heightmap_terrain.widthAndHeight = new TerrainWidthHeight(heightmap.glTexture.width, heightmap.glTexture.height);
    function InBounds(i, j) {
        // True if ij are valid indices; false otherwise.
        return i >= 0 && i < this.heightMapWidth &&
            j >= 0 && j < this.heightMapHeight;
    }
    function Average(i, j) {
        // ----------
        // | 1| 2| 3|
        // ----------
        // |4 |ij| 6|
        // ----------
        // | 7| 8| 9|
        // ----------
        var avg = 0.0;
        var num = 0.0;
        for (var m = i - 1; m <= i + 1; ++m) {
            for (var n = j - 1; n <= j + 1; ++n) {
                if (InBounds(m, n)) {
                    var index_ = m * this.heightMapWidth + n;
                    avg += _heightdata[index_];
                    num += 1;
                }
            }
        }
        return avg / num;
    }
    if (test_Heightmap_terrain._heights_ == null)
        test_Heightmap_terrain._heights_ = new Float32Array(this.heightMapWidth * this.heightMapHeight);
    for (var i = 0; i < this.heightMapHeight; ++i) {
        for (var j = 0; j < this.heightMapWidth; ++j) {
            test_Heightmap_terrain._heights_[i * this.heightMapWidth + j] = Average(i, j);
        }
    }
    //gen meshData
    var data = new m4m.render.meshData();
    data.pos = [];
    data.trisindex = [];
    data.normal = [];
    data.tangent = [];
    data.color = [];
    data.uv = [];
    data.uv2 = [];
    var segmentsW = this.heightMapWidth - 1;
    var segmentsH = this.heightMapHeight - 1;
    var x, z, u, v, y, col, base, numInds = 0;
    var index_;
    var tw = segmentsW + 1;
    // let numVerts: number = (segmentsH + 1) * tw;
    var uDiv = (this.heightMapWidth - 1) / segmentsW;
    var vDiv = (this.heightMapHeight - 1) / segmentsH;
    var scaleU = 1;
    var scaleV = 1;
    for (var zi = 0; zi < this.heightMapHeight; ++zi) {
        for (var xi = 0; xi < this.heightMapWidth; ++xi) {
            x = (xi / segmentsW - 0.5) * this.heightMapWidth;
            z = (zi / segmentsH - 0.5) * this.heightMapHeight;
            u = Math.floor(xi * uDiv) / this.heightMapWidth;
            v = Math.floor((segmentsH - zi) * vDiv) / this.heightMapHeight;
            index_ = zi * this.heightMapWidth + xi;
            //col = _heightdata[index_];
            col = test_Heightmap_terrain._heights_[index_];
            y = (col > maxElevation) ? (maxElevation / 0xff) * heightScale : ((col < minElevation) ? (minElevation / 0xff) * heightScale : (col / 0xff) * heightScale);
            //pos
            data.pos.push(new m4m.math.vector3(x, y, z));
            //normal
            data.normal.push(new m4m.math.vector3(1, 1, 1)); //先填充一个值 ，准确值需要之后计算
            //tan
            data.tangent.push(new m4m.math.vector3(-1, 1, 1)); //先填充一个值 ，准确值需要之后计算
            //color
            data.color.push(new m4m.math.color(1, 1, 1, 1));
            //uv
            data.uv.push(new m4m.math.vector2(xi / segmentsW * scaleU, 1.0 - zi / segmentsH * scaleV));
            //uv1
            data.uv2.push(new m4m.math.vector2(xi / segmentsW, 1.0 - zi / segmentsH));
            if (xi != segmentsW && zi != segmentsH) {
                base = xi + zi * tw;
                data.trisindex.push(base, base + tw + 1, base + tw, base, base + 1, base + tw + 1);
                //data.trisindex.push(base, base + tw, base + tw + 1, base, base + tw + 1, base + 1);
            }
        }
    }
    //gen mesh
    var _mesh = new m4m.framework.mesh("".concat(heightmap.getName(), ".mesh.bin"));
    _mesh.data = data;
    var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Tangent | m4m.render.VertexFormatMask.Color | m4m.render.VertexFormatMask.UV0 | m4m.render.VertexFormatMask.UV1;
    _mesh.data.originVF = vf;
    var v32 = _mesh.data.genVertexDataArray(vf);
    var i16 = _mesh.data.genIndexDataArray();
    _mesh.glMesh = new m4m.render.glMesh();
    _mesh.glMesh.initBuffer(gl, vf, _mesh.data.pos.length);
    _mesh.glMesh.uploadVertexData(gl, v32);
    _mesh.glMesh.addIndex(gl, i16.length);
    _mesh.glMesh.uploadIndexData(gl, 0, i16);
    _mesh.glMesh.initVAO();
    //填充submesh 0
    _mesh.submesh = [];
    {
        var sm = new m4m.framework.subMeshInfo();
        sm.matIndex = 0;
        sm.useVertexIndex = 0;
        sm.start = 0;
        sm.size = i16.length;
        sm.line = false;
        _mesh.submesh.push(sm);
    }
    return _mesh;
}
function UpdateElevationMesh(gl, maxElevation, minElevation, heightScale, addOrMinus) {
    if (maxElevation === void 0) { maxElevation = 255; }
    if (minElevation === void 0) { minElevation = 0; }
    if (heightScale === void 0) { heightScale = 12.0; }
    if (addOrMinus === void 0) { addOrMinus = true; }
    //gen meshData
    var data = new m4m.render.meshData();
    data.pos = [];
    data.trisindex = [];
    data.normal = [];
    data.tangent = [];
    data.color = [];
    data.uv = [];
    data.uv2 = [];
    var segmentsW = test_Heightmap_terrain.widthAndHeight.width - 1;
    var segmentsH = test_Heightmap_terrain.widthAndHeight.height - 1;
    var x, z, u, v, y, col, base, numInds = 0;
    var index_;
    var tw = segmentsW + 1;
    // let numVerts: number = (segmentsH + 1) * tw;
    var uDiv = 1.0;
    var vDiv = 1.0;
    var scaleU = 1;
    var scaleV = 1;
    for (var zi = 0; zi < this.heightMapHeight; ++zi) {
        for (var xi = 0; xi < this.heightMapWidth; ++xi) {
            x = (xi / segmentsW - 0.5) * test_Heightmap_terrain.widthAndHeight.width;
            z = (zi / segmentsH - 0.5) * test_Heightmap_terrain.widthAndHeight.height;
            u = Math.floor(xi * uDiv) / test_Heightmap_terrain.widthAndHeight.width;
            v = Math.floor((segmentsH - zi) * vDiv) / test_Heightmap_terrain.widthAndHeight.height;
            index_ = zi * this.heightMapWidth + xi;
            //col = _heightdata[index_];
            col = test_Heightmap_terrain._heights_[index_];
            y = (col > maxElevation) ? (maxElevation / 0xff) * heightScale : ((col < minElevation) ? (minElevation / 0xff) * heightScale : (col / 0xff) * heightScale);
            //pos
            data.pos.push(new m4m.math.vector3(x, y, z));
            //normal
            data.normal.push(new m4m.math.vector3(1, 1, 1)); //先填充一个值 ，准确值需要之后计算
            //tan
            data.tangent.push(new m4m.math.vector3(-1, 1, 1)); //先填充一个值 ，准确值需要之后计算
            //color
            data.color.push(new m4m.math.color(1, 1, 1, 1));
            //uv
            data.uv.push(new m4m.math.vector2(xi / segmentsW * scaleU, 1.0 - zi / segmentsH * scaleV));
            //uv1
            data.uv2.push(new m4m.math.vector2(xi / segmentsW, 1.0 - zi / segmentsH));
            if (xi != segmentsW && zi != segmentsH) {
                base = xi + zi * tw;
                data.trisindex.push(base, base + tw + 1, base + tw, base, base + 1, base + tw + 1);
                //data.trisindex.push(base, base + tw, base + tw + 1, base, base + tw + 1, base + 1);
            }
        }
    }
    //gen mesh
    var _mesh = new m4m.framework.mesh("".concat("211", ".mesh.bin"));
    _mesh.data = data;
    var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Tangent | m4m.render.VertexFormatMask.Color | m4m.render.VertexFormatMask.UV0 | m4m.render.VertexFormatMask.UV1;
    _mesh.data.originVF = vf;
    var v32 = _mesh.data.genVertexDataArray(vf);
    var i16 = _mesh.data.genIndexDataArray();
    _mesh.glMesh = new m4m.render.glMesh();
    _mesh.glMesh.initBuffer(gl, vf, _mesh.data.pos.length);
    _mesh.glMesh.uploadVertexData(gl, v32);
    _mesh.glMesh.addIndex(gl, i16.length);
    _mesh.glMesh.uploadIndexData(gl, 0, i16);
    _mesh.glMesh.initVAO();
    //填充submesh 0
    _mesh.submesh = [];
    {
        var sm = new m4m.framework.subMeshInfo();
        sm.matIndex = 0;
        sm.useVertexIndex = 0;
        sm.start = 0;
        sm.size = i16.length;
        sm.line = false;
        _mesh.submesh.push(sm);
    }
    return _mesh;
}
/// <reference path="../lib/dat.gui.d.ts" />
/**
 * 线条渲染组件示例
 */
var test_LineRenderer = /** @class */ (function () {
    function test_LineRenderer() {
        this.loop = false;
        this.viewcamera = false;
    }
    test_LineRenderer.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.astMgr = this.app.getAssetMgr();
                        m4m.framework.assetMgr.openGuid = false;
                        return [4 /*yield*/, datGui.init()];
                    case 1:
                        _a.sent();
                        //
                        this.setGUI();
                        //
                        this.init();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_LineRenderer.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'loop');
        gui.add(this, 'viewcamera');
    };
    test_LineRenderer.prototype.init = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 1000;
        this.camera.fov = Math.PI * 2 / 3;
        this.camera.backgroundColor = new m4m.math.color(0.2784, 0.2784, 0.2784, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 10;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
        // this._showParticle(this._particles[0]);
        this.initLineRenderer();
    };
    test_LineRenderer.prototype.initLineRenderer = function () {
        var tran = new m4m.framework.transform();
        tran.name = "LineRenderer";
        this.scene.addChild(tran);
        //
        var lr = tran.gameObject.getComponent("LineRenderer");
        if (!lr)
            lr = tran.gameObject.addComponent("LineRenderer");
        //
        this.lr = lr;
        //
        lr.positions = [new m4m.math.vector3(0, 0, 0), new m4m.math.vector3(1, 0, 0), new m4m.math.vector3(0, 1, 0),];
    };
    test_LineRenderer.prototype._showParticle = function (res) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    test_LineRenderer.prototype.update = function (delta) {
        if (this.lr) {
            this.lr.loop = this.loop;
            this.lr.alignment = this.viewcamera ? m4m.framework.LineAlignment.View : m4m.framework.LineAlignment.TransformZ;
        }
    };
    return test_LineRenderer;
}());
/// <reference path="../lib/dat.gui.d.ts" />
/**
 * 粒子系統示例
 */
var test_ParticleSystem = /** @class */ (function () {
    function test_ParticleSystem() {
        this._particles = ["ParticleAdditive", "fastshell_ps", "Particle_Sweat_Disable", "Particle_Dust_Disable", "ParticleAlphaBlended", "ps_inheritVelocity", "ParticleSystem", "ps_noise", "Fire", "Flames", "shark-levelup"];
        this._isMove = false;
        this._particleStartPosition = new m4m.math.vector3();
        this._particleCurrentPosition = new m4m.math.vector3();
        this._moveRadius = 5;
        this._moveAngle = 0;
        this._moveAngleSpeed = 1;
        this._particleName = "ps_inheritVelocity";
    }
    test_ParticleSystem.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        scene = this.scene = this.app.getScene();
                        this.astMgr = this.app.getAssetMgr();
                        //雾效
                        // scene.fog = new m4m.framework.Fog();
                        // scene.fog._Start = 1;
                        // scene.fog._End = 150;
                        // // scene.fog._Color = new m4m.math.vector4(52 / 255, 137 / 255, 155 / 255, 0.75);// new m4m.math.vector4(0 / 255, 152 / 255, 160 / 255, 1);
                        // scene.fog._Color = new m4m.math.vector4(5 / 255, 166 / 255, 182 / 255, 1);
                        m4m.framework.assetMgr.openGuid = false;
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, datGui.init()];
                    case 2:
                        _a.sent();
                        //
                        this.setGUI();
                        //
                        this.init();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_ParticleSystem.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'particleName', this._particles);
        gui.add(this, '_isMove');
        gui.add(this, '_moveRadius', 1, 50, 1);
        gui.add(this, '_moveAngleSpeed', -10, 10, 0.2);
        gui.add(this, 'play');
        gui.add(this, 'stop');
    };
    test_ParticleSystem.prototype.play = function () {
        var _this = this;
        this._particle.gameObject.getComponentsInChildren("ParticleSystem").forEach(function (v) {
            var ps = v;
            ps.play();
            ps.addListener("particleCompleted", function (ps) {
                console.log("粒子系统播放完成！");
            }, _this);
        });
    };
    test_ParticleSystem.prototype.stop = function () {
        this._particle.gameObject.getComponentsInChildren("ParticleSystem").forEach(function (v) {
            var ps = v;
            ps.stop();
        });
    };
    Object.defineProperty(test_ParticleSystem.prototype, "particleName", {
        get: function () {
            return this._particleName;
        },
        set: function (v) {
            this._showParticle(v);
            this._particleName = v;
        },
        enumerable: false,
        configurable: true
    });
    test_ParticleSystem.prototype.init = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 1000;
        this.camera.fov = Math.PI * 2 / 3;
        this.camera.backgroundColor = new m4m.math.color(0.2784, 0.2784, 0.2784, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 10;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
        this._showParticle(this._particles[0]);
        // this.initParticleSystem();
    };
    test_ParticleSystem.prototype._showParticle = function (res) {
        return __awaiter(this, void 0, void 0, function () {
            var cubeP, cubeTran;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._particle) {
                            this.scene.removeChild(this._particle);
                            this._particle = null;
                        }
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "particleSystem/").concat(res, "/").concat(res, ".assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        cubeP = this.astMgr.getAssetByName("".concat(res, ".prefab.json"), "".concat(res, ".assetbundle.json"));
                        cubeTran = cubeP.getCloneTrans();
                        this._particle = new m4m.framework.transform();
                        this._particle.addChild(cubeTran);
                        this.scene.addChild(this._particle);
                        this._particleStartPosition = new m4m.math.vector3();
                        m4m.math.vec3Clone(this._particle.localPosition, this._particleStartPosition);
                        this.play();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_ParticleSystem.prototype.update = function (delta) {
        if (!this._particle)
            return;
        if (this._isMove) {
            var offsetX = Math.cos(this._moveAngle / 180 * Math.PI) * this._moveRadius;
            var offsetZ = Math.sin(this._moveAngle / 180 * Math.PI) * this._moveRadius;
            // this._particleCurrentPosition.x = this._particleStartPosition.x + offsetX;
            this._particleCurrentPosition.y = this._particleStartPosition.y;
            this._particleCurrentPosition.z = this._particleStartPosition.z + offsetZ;
            this._particle.localPosition = this._particleCurrentPosition;
            this._moveAngle += this._moveAngleSpeed;
        }
        else {
            this._particle.localPosition = this._particleStartPosition;
        }
    };
    return test_ParticleSystem;
}());
var test_RangeScreen = /** @class */ (function () {
    function test_RangeScreen() {
        this.timer = 0;
        this.movetarget = new m4m.math.vector3();
        this.pointDown = false;
    }
    test_RangeScreen.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.inputMgr = this.app.getInputMgr();
        this.scene = this.app.getScene();
        var cuber;
        console.warn("Finish it.");
        //添加一个盒子
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = 10;
        cube.localScale.y = 0.1;
        cube.localScale.z = 10;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        var smesh = this.app.getAssetMgr().getDefaultMesh("pyramid");
        mesh.mesh = (this.app.getAssetMgr().getDefaultMesh("cube"));
        var renderer = cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        cube.markDirty();
        cuber = renderer;
        this.cube = cube;
        {
            this.cube2 = new m4m.framework.transform();
            this.cube2.name = "cube2";
            this.scene.addChild(this.cube2);
            this.cube2.localScale.x = this.cube2.localScale.y = this.cube2.localScale.z = 1;
            this.cube2.localTranslate.x = -5;
            this.cube2.markDirty();
            var mesh = this.cube2.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube2.gameObject.addComponent("meshRenderer");
            var coll = this.cube2.gameObject.addComponent("spherecollider");
            coll.center = new m4m.math.vector3(0, 1, 0);
            coll.radius = 1;
            //---------------------baocuo
            //this.cube2.gameObject.addComponent("frustumculling") as m4m.framework.frustumculling;
        }
        this.cube3 = this.cube2.clone();
        this.scene.addChild(this.cube3);
        {
            this.cube3 = new m4m.framework.transform();
            this.cube3.name = "cube3";
            this.scene.addChild(this.cube3);
            this.cube3.localScale.x = this.cube3.localScale.y = this.cube3.localScale.z = 1;
            this.cube3.localTranslate.x = -5;
            this.cube3.markDirty();
            var mesh = this.cube3.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube3.gameObject.addComponent("meshRenderer");
            var coll = this.cube3.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        {
            this.cube4 = new m4m.framework.transform();
            this.cube4.name = "cube4";
            this.scene.addChild(this.cube4);
            this.cube4.localScale.x = this.cube4.localScale.y = this.cube4.localScale.z = 1;
            this.cube4.localTranslate.x = 5;
            this.cube4.markDirty();
            var mesh = this.cube4.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube4.gameObject.addComponent("meshRenderer");
            var coll = this.cube4.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        this.camera.viewport = new m4m.math.rect(0, 0, 0.5, 0.5);
        console.log("this camera: " + this.camera.viewport);
        objCam.markDirty(); //标记为需要刷新
        {
            //添加2号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false; //因为以clearcolor，上一个camera就白画了，所以不能clear
            _camera.order = 2; //默认oder，order越大的camera就越在后边进行画
            objCam2.localTranslate = new m4m.math.vector3(0, 5, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0.5, 0.5, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
        {
            //添加3号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false;
            _camera.order = 3;
            objCam2.localTranslate = new m4m.math.vector3(0, 8, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0.5, 0, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
        {
            //添加4号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false;
            _camera.order = 4;
            objCam2.localTranslate = new m4m.math.vector3(0, 8, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0, 0.5, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
    };
    test_RangeScreen.prototype.update = function (delta) {
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            var ray = this.camera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
            var tempinfo = m4m.math.pool.new_pickInfo();
            var bool = this.scene.pick(ray, tempinfo);
            if (bool != null) {
                m4m.math.vec3Clone(tempinfo.hitposition, this.movetarget);
                this.timer = 0;
            }
            m4m.math.pool.delete_pickInfo(tempinfo);
        }
        this.pointDown = this.inputMgr.point.touch;
        if (this.cube3.gameObject.getComponent("boxcollider").intersectsTransform(this.cube4)) {
            return;
        }
        this.timer += delta;
        this.cube3.localTranslate.x += delta;
        this.cube3.markDirty();
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate.x += delta;
        // objCam.markDirty();
        // var tv = new m4m.math.vector3();
        // m4m.math.vec3SLerp(this.cube2.localTranslate, this.movetarget, this.timer, this.cube2.localTranslate);
        // //this.cube2.localTranslate = this.movetarget;
        // this.cube2.markDirty();
    };
    return test_RangeScreen;
}());
var test_Rvo2 = /** @class */ (function () {
    function test_Rvo2() {
        this.sim = new RVO.Simulator(1, 10, 5, 10, 10, 1, 0.2, [0, 0]);
        this.goals = [];
        this.size = 0.5;
        this.spheres = [];
    }
    test_Rvo2.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.inputMgr = this.app.getInputMgr();
        this.assetMgr = app.getAssetMgr();
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.far = 1000;
        objCam.localTranslate = new m4m.math.vector3(0, 150, 0);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
        CameraController.instance().init(this.app, this.camera);
        this.init();
    };
    test_Rvo2.prototype.init = function () {
        //加球
        var sphere = new m4m.framework.transform;
        sphere.localTranslate.x = sphere.localTranslate.y = sphere.localTranslate.z = 0;
        var mf = sphere.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh("sphere");
        var mr = sphere.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        mr.materials[0] = new m4m.framework.material("sphere");
        mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        var count = 50;
        var radius = 55;
        var tempdir = m4m.math.pool.new_vector3();
        for (var i = 0; i < count; i++) {
            m4m.math.vec3Set_One(tempdir);
            var rate = i / count;
            tempdir.x = Math.sin(rate * 2 * Math.PI);
            tempdir.z = Math.cos(rate * 2 * Math.PI);
            m4m.math.vec3Normalize(tempdir, tempdir);
            var temps = sphere.clone();
            this.scene.addChild(temps);
            m4m.math.vec3ScaleByNum(tempdir, radius, tempdir);
            m4m.math.vec3Clone(tempdir, temps.localTranslate);
            temps.markDirty();
            this.spheres.push(temps);
            this.sim.addAgent([temps.localTranslate.x, temps.localTranslate.z]); // 添加 Agent
            this.goals.push([-temps.localTranslate.x, -temps.localTranslate.z]); // 保存对应的目标
        }
        var c = 0; // 障碍物位置
        this.sim.addObstacle([
            [5 + c, -5 + c],
            [5 + c, 5 + c],
            [-5 + c, 5 + c],
            [-5 + c, -5 + c]
        ]);
        this.sim.processObstacles();
    };
    test_Rvo2.prototype.update = function (delta) {
        CameraController.instance().update(delta);
        if (this.reachedGoals(this.sim, this.goals)) { // 如果所有小球都到达目标点
            console.error("sim end ");
        }
        else { // 如果有小球没有到达目标点
            this.updateVisualization(this.sim); // 刷新屏幕
            this.setPreferredVelocities(this.sim, this.goals); // 给所有小球分配新的速度
            this.sim.doStep(); //走一步
        }
    };
    test_Rvo2.prototype.reachedGoals = function (sim, goals) {
        for (var i = 0, len = sim.agents.length; i < len; i++) {
            if (RVO.Vector.absSq(RVO.Vector.subtract(sim.agents[i].position, goals[i])) > 1) {
                return false;
            }
        }
        return true;
    };
    test_Rvo2.prototype.setPreferredVelocities = function (sim, goals) {
        for (var i = 0, len = sim.agents.length; i < len; i++) {
            // 据当前目标重新获取目标方向向量
            var goalVector = RVO.Vector.subtract(goals[i], sim.agents[i].position);
            if (RVO.Vector.absSq(goalVector) > 1) {
                goalVector = RVO.Vector.normalize(goalVector);
            }
            sim.agents[i].prefVelocity = goalVector; // 更新
        }
    };
    test_Rvo2.prototype.updateVisualization = function (sim) {
        for (var i = 0; i < this.spheres.length; i++) {
            this.spheres[i].localTranslate.x = sim.agents[i].position[0];
            this.spheres[i].localTranslate.z = sim.agents[i].position[1];
            this.spheres[i].markDirty();
        }
    };
    return test_Rvo2;
}());
/// <reference path="../lib/dat.gui.d.ts" />
/**
 * 拖尾渲染组件示例
 */
var test_TrailRenderer = /** @class */ (function () {
    function test_TrailRenderer() {
        this.move = true;
        this.viewcamera = false;
        this.res = "Trail_SpeedLines";
        this._particleStartPosition = new m4m.math.vector3();
        this._particleCurrentPosition = new m4m.math.vector3();
        this._moveRadius = 5;
        this._moveAngle = 0;
        this._moveAngleSpeed = 5;
    }
    test_TrailRenderer.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.astMgr = this.app.getAssetMgr();
                        m4m.framework.assetMgr.openGuid = false;
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, datGui.init()];
                    case 2:
                        _a.sent();
                        //
                        this.setGUI();
                        //
                        this.init();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_TrailRenderer.prototype.setGUI = function () {
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'move');
        gui.add(this, 'viewcamera');
    };
    test_TrailRenderer.prototype.init = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 1000;
        this.camera.fov = Math.PI * 2 / 3;
        this.camera.backgroundColor = new m4m.math.color(0.2784, 0.2784, 0.2784, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 10;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
        // this.initLineRenderer();
        this.loadRes(this.res);
    };
    test_TrailRenderer.prototype.initLineRenderer = function () {
        var tran = new m4m.framework.transform();
        tran.name = "TrailRenderer";
        this.scene.addChild(tran);
        //
        var lr = tran.gameObject.getComponent("TrailRenderer");
        if (!lr)
            lr = tran.gameObject.addComponent("trailrenderer");
        //
        this.lr = lr;
    };
    test_TrailRenderer.prototype.loadRes = function (res) {
        return __awaiter(this, void 0, void 0, function () {
            var cubeP, cubeTran;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.lr) {
                            this.scene.removeChild(this.lr.transform);
                            this.lr = null;
                        }
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "prefab/").concat(res, "/").concat(res, ".assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        cubeP = this.astMgr.getAssetByName("".concat(res, ".prefab.json"), "".concat(res, ".assetbundle.json"));
                        cubeTran = cubeP.getCloneTrans();
                        this.lr = cubeTran.gameObject.getComponent("TrailRenderer");
                        this.scene.addChild(cubeTran);
                        this._particleStartPosition = new m4m.math.vector3();
                        m4m.math.vec3Clone(cubeTran.localPosition, this._particleStartPosition);
                        return [2 /*return*/];
                }
            });
        });
    };
    test_TrailRenderer.prototype.update = function (delta) {
        if (this.lr) {
            if (this.move) {
                var offsetX = Math.cos(this._moveAngle / 180 * Math.PI) * this._moveRadius;
                var offsetY = (this._moveAngle % 3600) / 3600 * this._moveRadius;
                var offsetZ = Math.sin(this._moveAngle / 180 * Math.PI) * this._moveRadius;
                this._particleCurrentPosition.x = this._particleStartPosition.x + offsetX;
                this._particleCurrentPosition.y = this._particleStartPosition.y + offsetY;
                this._particleCurrentPosition.z = this._particleStartPosition.z + offsetZ;
                this.lr.transform.localPosition = this._particleCurrentPosition;
                this._moveAngle += this._moveAngleSpeed;
            }
            this.lr.alignment = this.viewcamera ? m4m.framework.LineAlignment.View : m4m.framework.LineAlignment.TransformZ;
        }
    };
    return test_TrailRenderer;
}());
var test_UIEffect = /** @class */ (function () {
    function test_UIEffect() {
        this.amount = 1;
        this.timer = 0;
        this.bere = false;
        this.bere1 = false;
    }
    test_UIEffect.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        console.warn("Finish it.");
        //目前材质是内置配置的，
        //这个加载机制弄完之后，就可以根据name 访问资源包里的shader
        //然后用shader 构造材质，和unity相同
        // 配置代码如下
        var sh = this.app.getAssetMgr().getShader("color");
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10;
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.markDirty(); //标记为需要刷新
        //2dtest overlay
        var o2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(o2d);
        this.app.getAssetMgr().load("res/rock256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        console.warn("Finish load img.");
                        var count = 80;
                        var size = 30;
                        var gap = 10;
                        for (var i = 0; i < count; i++) {
                            for (var j = 0; j < count; j++) {
                                //图片
                                // let assetStr = j%2 ==0 ?  "rock256.png":"zg256.png"  ;
                                var assetStr = "zg256.png";
                                var texture = app.getAssetMgr().getAssetByName(assetStr);
                                //image
                                var t2d_1 = new m4m.framework.transform2D();
                                t2d_1.width = t2d_1.height = size;
                                t2d_1.pivot.x = t2d_1.pivot.y = 0;
                                t2d_1.localTranslate.x = i * gap;
                                t2d_1.localTranslate.y = j * gap;
                                o2d.addChild(t2d_1);
                                var img_1 = t2d_1.addComponent("image2D");
                                img_1.imageType = m4m.framework.ImageType.Simple;
                                img_1.sprite = _this.app.getAssetMgr().getDefaultSprite("grid_sprite");
                                //rawimage
                                // let robj = new m4m.framework.transform2D();
                                // robj.width = robj.height = size;
                                // robj.pivot.x = robj.pivot.y = 0;
                                // robj.localTranslate.x = i * gap;
                                // robj.localTranslate.y = j * gap;
                                // o2d.addChild(robj);
                                // let rawimg = robj.addComponent("rawImage2D") as m4m.framework.rawImage2D;
                                // rawimg.image = texture;
                            }
                        }
                    }
                });
            }
        });
        // {//一个片
        //     var t2d = new m4m.framework.transform2D();
        //     t2d.width = 150;
        //     t2d.height = 150;
        //     t2d.pivot.x = 0;
        //     t2d.pivot.y = 0;
        //     t2d.markDirty();
        //     t2d.addComponent("rawImage2D");
        //     //o2d.addChild(t2d);
        // }
        // {
        //     //普通显示
        //     let t2d_1 = new m4m.framework.transform2D();
        //     t2d_1.width = 150;
        //     t2d_1.height = 150;
        //     t2d_1.pivot.x = 0;
        //     t2d_1.pivot.y = 0;
        //     t2d_1.localTranslate.x = 150;
        //     let img_1 = t2d_1.addComponent("image2D") as m4m.framework.image2D;
        //     img_1.imageType = m4m.framework.ImageType.Simple;
        //     //o2d.addChild(t2d_1);
        //     //九宫显示
        //     let t2d_2 = new m4m.framework.transform2D();
        //     t2d_2.width = 150;
        //     t2d_2.height = 150;
        //     t2d_2.pivot.x = 0;
        //     t2d_2.pivot.y = 0;
        //     t2d_2.localTranslate.x = 300;
        //     let img_2 = t2d_2.addComponent("image2D") as m4m.framework.image2D;
        //     img_2.imageType = m4m.framework.ImageType.Sliced;
        //     //o2d.addChild(t2d_2);
        //     //纵向填充
        //     let t2d_3 = new m4m.framework.transform2D();
        //     t2d_3.width = 150;
        //     t2d_3.height = 150;
        //     t2d_3.pivot.x = 0;
        //     t2d_3.pivot.y = 0;
        //     t2d_3.localTranslate.x = 450;
        //     this.img_3 = t2d_3.addComponent("image2D") as m4m.framework.image2D;
        //     this.img_3.imageType = m4m.framework.ImageType.Filled;
        //     this.img_3.fillMethod = m4m.framework.FillMethod.Vertical;
        //     this.img_3.fillAmmount = 1;
        //     //o2d.addChild(t2d_3);
        //     //横向填充
        //     let t2d_4 = new m4m.framework.transform2D();
        //     t2d_4.width = 150;
        //     t2d_4.height = 150;
        //     t2d_4.pivot.x = 0;
        //     t2d_4.pivot.y = 0;
        //     t2d_4.localTranslate.x = 600;
        //     this.img_4 = t2d_4.addComponent("image2D") as m4m.framework.image2D;
        //     this.img_4.imageType = m4m.framework.ImageType.Filled;
        //     this.img_4.fillMethod = m4m.framework.FillMethod.Horizontal;
        //     this.img_4.fillAmmount = 1;
        //     //o2d.addChild(t2d_4);
        //     //90扇形填充
        //     let t2d_5 = new m4m.framework.transform2D();
        //     t2d_5.width = 150;
        //     t2d_5.height = 150;
        //     t2d_5.pivot.x = 0;
        //     t2d_5.pivot.y = 0;
        //     t2d_5.localTranslate.x = 750;
        //     this.img_5 = t2d_5.addComponent("image2D") as m4m.framework.image2D;
        //     this.img_5.imageType = m4m.framework.ImageType.Filled;
        //     this.img_5.fillMethod = m4m.framework.FillMethod.Radial_90;
        //     this.img_5.fillAmmount = 1;
        //     //o2d.addChild(t2d_5);
        //     //瓦片填充
        //     let t2d_6 = new m4m.framework.transform2D();
        //     t2d_6.width = 150;
        //     t2d_6.height = 150;
        //     t2d_6.pivot.x = 0;
        //     t2d_6.pivot.y = 0;
        //     t2d_6.localTranslate.x = 150;
        //     t2d_6.localTranslate.y = 150;
        //     let img_6 = t2d_6.addComponent("image2D") as m4m.framework.image2D;
        //     img_6.imageType = m4m.framework.ImageType.Tiled;
        //     //o2d.addChild(t2d_6);
        //     //180度填充
        //     let t2d_7 = new m4m.framework.transform2D();
        //     t2d_7.width = 150;
        //     t2d_7.height = 150;
        //     t2d_7.pivot.x = 0;
        //     t2d_7.pivot.y = 0;
        //     t2d_7.localTranslate.x = 300;
        //     t2d_7.localTranslate.y = 150;
        //     this.img_7 = t2d_7.addComponent("image2D") as m4m.framework.image2D;
        //     this.img_7.imageType = m4m.framework.ImageType.Filled;
        //     this.img_7.fillMethod = m4m.framework.FillMethod.Radial_180;
        //     this.img_7.fillAmmount = 1;
        //     //o2d.addChild(t2d_7);
        //     //360度填充
        //     let t2d_8 = new m4m.framework.transform2D();
        //     t2d_8.width = 150;
        //     t2d_8.height = 150;
        //     t2d_8.pivot.x = 0;
        //     t2d_8.pivot.y = 0;
        //     t2d_8.localTranslate.x = 450;
        //     t2d_8.localTranslate.y = 150;
        //     this.img_8 = t2d_8.addComponent("image2D") as m4m.framework.image2D;
        //     this.img_8.imageType = m4m.framework.ImageType.Filled;
        //     this.img_8.fillMethod = m4m.framework.FillMethod.Radial_360;
        //     this.img_8.fillAmmount = 1;
        //     //o2d.addChild(t2d_8);
        //     //颜色变换按钮
        //     let t2d_9 = new m4m.framework.transform2D();
        //     t2d_9.width = 150;
        //     t2d_9.height = 50;
        //     t2d_9.pivot.x = 0;
        //     t2d_9.pivot.y = 0;
        //     t2d_9.localTranslate.x = 150;
        //     t2d_9.localTranslate.y = 300;
        //     let btn = t2d_9.addComponent("button") as m4m.framework.button;
        //     let img9 = t2d_9.addComponent("image2D") as m4m.framework.image2D;
        //     img9.imageType = m4m.framework.ImageType.Sliced;
        //     btn.targetImage = img9;
        //     btn.transition = m4m.framework.TransitionType.ColorTint;//颜色变换
        //     btn.onClick.addListener(() =>
        //     {
        //         console.log("按钮点下了");
        //     });
        //     //o2d.addChild(t2d_9);
        //     var lab = new m4m.framework.transform2D();
        //     lab.name = "lab111";
        //     lab.width = 150;
        //     lab.height = 50;
        //     lab.pivot.x = 0;
        //     lab.pivot.y = 0;
        //     lab.localTranslate.y = -10;
        //     lab.markDirty();
        //     var label = lab.addComponent("label") as m4m.framework.label;
        //     label.text = "这是按钮";
        //     label.fontsize = 25;
        //     label.color = new m4m.math.color(1, 0, 0, 1);
        //     t2d_9.addChild(lab);
        //     //atlas资源
        //     this.app.getAssetMgr().load("res/1.png", m4m.framework.AssetTypeEnum.Auto, (s) =>
        //     {
        //         if (s.isfinish)
        //         {
        //             this.app.getAssetMgr().load("res/resources/1.atlas.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
        //             {
        //                 if(state.isfinish)
        //                 {
        //                     var atlas = this.app.getAssetMgr().getAssetByName("1.atlas.json") as m4m.framework.atlas;
        //                     img_1.setTexture(atlas.texture);
        //                     img_2.sprite = atlas.sprites["card_role_1_face"];
        //                     img_2.sprite.border = new m4m.math.border(10, 10, 10, 10);
        //                     this.img_3.sprite = atlas.sprites["card_role_1_face"];
        //                     this.img_4.sprite = atlas.sprites["card_role_1_face"];
        //                     this.img_5.sprite = atlas.sprites["card_role_1_face"];
        //                     img_6.sprite = atlas.sprites["card_role_1_face"];
        //                     this.img_7.sprite = atlas.sprites["card_role_1_face"];
        //                     this.img_8.sprite = atlas.sprites["card_role_1_face"];
        //                 }
        //                 //img9.sprite = atlas.sprites["card_role_1_face"];
        //             });
        //         }
        //     });
        //     this.app.getAssetMgr().load("res/uisprite.png", m4m.framework.AssetTypeEnum.Auto, (s) => 
        //     {
        //         if (s.isfinish) 
        //         {
        //             let texture = this.app.getAssetMgr().getAssetByName("uisprite.png") as m4m.framework.texture;
        //             //img_1.setTexture(texture);
        //             //img_2.setTexture(texture, new m4m.math.border(15, 15, 15, 15));
        //             //this.img_3.setTexture(texture);
        //             //this.img_4.setTexture(texture);
        //             //this.img_5.setTexture(texture);
        //             //img_6.setTexture(texture);
        //             //this.img_7.setTexture(texture);
        //             //this.img_8.setTexture(texture);
        //             img9.setTexture(texture, new m4m.math.border(15, 15, 15, 15));
        //         }
        //     });
        //     this.app.getAssetMgr().load("res/STXINGKA.TTF.png", m4m.framework.AssetTypeEnum.Auto, (s) =>
        //     {
        //         if (s.isfinish)
        //         {
        //             this.app.getAssetMgr().load("res/resources/STXINGKA.font.json", m4m.framework.AssetTypeEnum.Auto, (s1) =>
        //             {
        //                 if(s1.isfinish)
        //                     label.font = this.app.getAssetMgr().getAssetByName("STXINGKA.font.json") as m4m.framework.font;//;
        //             });
        //         }
        //     });
        // }
        // // for (var i = 0; i < 10; i++)
        // // {//一个片
        // //     var t2d = new m4m.framework.transform2D();
        // //     t2d.width = 50;
        // //     t2d.height = 50;
        // //     t2d.pivot.x = 25;
        // //     t2d.pivot.y = 25;
        // //     t2d.localTranslate.x = 100 * i;
        // //     t2d.localTranslate.y = 25;
        // //     t2d.localRotate = i;
        // //     t2d.markDirty();
        // //     var img = t2d.addComponent("rawImage2D") as m4m.framework.rawImage2D;
        // //     img.color.b = i * 0.1;
        // //     img.image = this.app.getAssetMgr().getDefaultTexture("white");
        // //     o2d.addChild(t2d);
        // // }
        // //2d test
        // var t = new m4m.framework.transform();
        // t.localScale.x = t.localScale.y = t.localScale.z = 1;
        // var c2d = t.gameObject.addComponent("canvasRenderer") as m4m.framework.canvasRenderer;
        // t.localTranslate.y = 1;
        // //t.localTranslate.z = 2;
        // this.scene.addChild(t);
        // {//一个片
        //     var t2d = new m4m.framework.transform2D();
        //     t2d.width = 400;
        //     t2d.height = 400;
        //     t2d.pivot.x = 0;
        //     t2d.pivot.y = 0;
        //     t2d.markDirty();
        //     t2d.addComponent("rawImage2D");
        //     c2d.addChild(t2d);
        // }
        // for (var i = 0; i < 10; i++)
        // {//一个片
        //     var t2d = new m4m.framework.transform2D();
        //     t2d.width = 50;
        //     t2d.height = 50;
        //     t2d.pivot.x = 0;
        //     t2d.pivot.y = 0;
        //     t2d.localTranslate.x = 100 * i;
        //     t2d.localRotate = i;
        //     t2d.markDirty();
        //     var img = t2d.addComponent("rawImage2D") as m4m.framework.rawImage2D;
        //     img.color.b = i * 0.1;
        //     img.image = this.app.getAssetMgr().getDefaultTexture("white");
        //     c2d.addChild(t2d);
        // }
    };
    test_UIEffect.prototype.update = function (delta) {
    };
    return test_UIEffect;
}());
//UI 新手引导
var test_UIGuideMask = /** @class */ (function () {
    function test_UIGuideMask() {
        this.inited = false;
        this.dec = "点击屏幕 , 移动孔的位置";
    }
    test_UIGuideMask.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var objCam;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.assetMgr = this.app.getAssetMgr();
                        this.iptMgr = this.app.getInputMgr();
                        objCam = new m4m.framework.transform();
                        objCam.name = "sth.";
                        this.scene.addChild(objCam);
                        this.camera = objCam.gameObject.addComponent("camera");
                        this.camera.near = 0.01;
                        this.camera.far = 10;
                        //2dUI root
                        this.rooto2d = new m4m.framework.overlay2D();
                        this.camera.addOverLay(this.rooto2d);
                        return [4 /*yield*/, datGui.init()];
                    case 1:
                        _a.sent();
                        this.init();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_UIGuideMask.prototype.init = function () {
        var _this = this;
        //遮挡模板 
        var template = new m4m.framework.transform2D();
        var rImg = template.addComponent("rawImage2D");
        rImg.image = this.assetMgr.getDefaultTexture(m4m.framework.defTexture.white);
        rImg.color = new m4m.math.color(0, 0, 0, 0.8);
        var opt = m4m.framework.layoutOption;
        var maskui = new m4m.framework.transform2D();
        maskui.layoutState = opt.TOP | opt.BOTTOM | opt.LEFT | opt.RIGHT;
        var maskComp = maskui.addComponent("guideMask");
        this.rooto2d.addChild(maskui);
        maskComp.holeRect = new m4m.math.rect(200, 200, 100, 100);
        maskComp.template = template;
        var tv2 = new m4m.math.vector2();
        var tv2_1 = new m4m.math.vector2();
        this.iptMgr.addPointListener(m4m.event.PointEventEnum.PointDown, function (_a) {
            var x = _a[0], y = _a[1];
            m4m.math.vec2Set(tv2, x, y);
            _this.rooto2d.calScreenPosToCanvasPos(tv2, tv2_1);
            maskComp.holeRect.x = tv2_1.x;
            maskComp.holeRect.y = tv2_1.y;
            maskComp.holeRect = maskComp.holeRect;
        }, this);
        //adtUI
        var gui = new dat.GUI();
        ;
        gui.add(this, 'dec');
    };
    test_UIGuideMask.prototype.update = function (delta) {
    };
    return test_UIGuideMask;
}());
/** UI 贴到 3D 空间 */
var test_UI_Attach3D = /** @class */ (function () {
    function test_UI_Attach3D() {
        this.isDebugDisplay = true;
    }
    /**
     * 创建3d节点
     * @param w UI容器宽
     * @param h UI容器高
     * @param x 坐标x
     * @param y 坐标y
     * @param z 坐标z
     * @returns
     */
    test_UI_Attach3D.prototype.makeUI3DNode = function (w, h, x, y, z) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        var scene = m4m.framework.sceneMgr.scene;
        var node = this.isDebugDisplay ? m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube) : new m4m.framework.transform();
        node.localPosition = new m4m.math.vector3(x, y, z);
        var canRNdoe = new m4m.framework.transform();
        var canvasR = canRNdoe.gameObject.addComponent("canvasRenderer");
        canvasR.canvas.pixelWidth = w;
        canvasR.canvas.pixelHeight = h;
        canvasR.canvas.enableOutsideRenderClip = false;
        //
        scene.addChild(node);
        node.addChild(canRNdoe);
        //
        if (this.isDebugDisplay) {
            var lopt = m4m.framework.layoutOption;
            var debugFrame = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.RawImage2D).getComponent("rawImage2D");
            debugFrame.image = this.debugBorderFrameImg;
            debugFrame.transform.layoutState = lopt.TOP | lopt.LEFT | lopt.BOTTOM | lopt.RIGHT;
            canvasR.canvas.addChild(debugFrame.transform);
        }
        return canvasR;
    };
    /** 创建UI组件 */
    test_UI_Attach3D.prototype.createUIComps = function (root) {
        return __awaiter(this, void 0, void 0, function () {
            var app, assetMgr, texNames, texUrl, texs, fontjson, fontpng, _font, lab, img, btn, btnLab;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        app = m4m.framework.sceneMgr.app;
                        assetMgr = app.getAssetMgr();
                        texNames = ["zg256.png"];
                        texUrl = [];
                        texNames.forEach(function (n) {
                            texUrl.push("".concat(resRootPath, "texture/").concat(n));
                        });
                        return [4 /*yield*/, util.loadTextures(texUrl, assetMgr)];
                    case 1:
                        texs = _a.sent();
                        fontjson = "方正粗圆_GBK.font.json";
                        fontpng = "方正粗圆_GBK.TTF.png";
                        return [4 /*yield*/, util.loadRes("".concat(resRootPath, "font/").concat(fontpng))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, util.loadRes("".concat(resRootPath, "font/").concat(fontjson))];
                    case 3:
                        _font = _a.sent();
                        lab = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Label).getComponent("label");
                        lab.text = "\u6D4B\u8BD5UI\u7EC4\u4EF6 !";
                        lab.transform.localTranslate = new m4m.math.vector2(20, 30);
                        lab.font = _font;
                        img = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.RawImage2D).getComponent("rawImage2D");
                        img.image = texs[0];
                        img.transform.localTranslate = new m4m.math.vector2(100, 150);
                        btn = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Button).getComponent("button");
                        btn.transform.localTranslate = new m4m.math.vector2(150, 300);
                        btnLab = btn.transform.getFirstComponentInChildren("label");
                        btnLab.text = "\u6D4B\u8BD5\u6309\u94AE";
                        btnLab.font = _font;
                        //attach 
                        root.addChild(lab.transform);
                        root.addChild(img.transform);
                        root.addChild(btn.transform);
                        return [2 /*return*/];
                }
            });
        });
    };
    test_UI_Attach3D.prototype.createSpines = function (root) {
        var app = m4m.framework.sceneMgr.app;
        var assetMgr = app.getAssetMgr();
        var assetManager = new spine_m4m.SpineAssetMgr(assetMgr, "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        var animation = "walk";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).raptor);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            // this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, animation, true);
            var spineNode = new m4m.framework.transform2D();
            //可用transform2d缩放等
            spineNode.localTranslate = new m4m.math.vector2(300, 200);
            // spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            // spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            // spineNode.localRotate = 30 * Math.PI / 180;
            spineNode.localScale.x = -1;
            m4m.math.vec2ScaleByNum(spineNode.localScale, 0.5, spineNode.localScale);
            spineNode.addComponentDirect(comp);
            spineNode.width = 200;
            spineNode.height = 200;
            root.addChild(spineNode);
            //
            var img = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.RawImage2D).getComponent("rawImage2D");
            img.image = assetMgr.getDefaultTexture("grid");
            img.transform.localTranslate = new m4m.math.vector2(200, 300);
            root.addChild(img.transform);
        });
    };
    test_UI_Attach3D.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene, assetMgr, objCam, cam, hoverc, texs, baseUINode, spineNode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        scene = app.getScene();
                        assetMgr = scene.app.getAssetMgr();
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        cam = objCam.gameObject.addComponent("camera");
                        cam.near = 0.01;
                        cam.far = 120;
                        cam.fov = Math.PI * 0.3;
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 10;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
                        if (!this.isDebugDisplay) return [3 /*break*/, 2];
                        return [4 /*yield*/, util.loadTextures(["".concat(resRootPath, "texture/borderFrame.png")], assetMgr)];
                    case 1:
                        texs = _a.sent();
                        this.debugBorderFrameImg = texs[0];
                        _a.label = 2;
                    case 2:
                        baseUINode = this.makeUI3DNode(400, 400);
                        baseUINode.cameraTouch = cam;
                        return [4 /*yield*/, this.createUIComps(baseUINode.canvas.getRoot())];
                    case 3:
                        _a.sent();
                        spineNode = this.makeUI3DNode(600, 400, 2, 1, 3);
                        // const spineNode = this.makeUI3DNode(600, 400);
                        spineNode.cameraTouch = cam;
                        return [4 /*yield*/, this.createSpines(spineNode.canvas.getRoot())];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_UI_Attach3D.prototype.update = function (delta) {
    };
    return test_UI_Attach3D;
}());
/**
 * UI 渲染使用 纹理数组 样例（webgl2 特性优化尝试）
 */
var test_UI_Texture_Array = /** @class */ (function () {
    function test_UI_Texture_Array() {
        this.texArrShaderName = "shader/texArrayImg";
        this.atlasNames = ["TA_NUMs", "TA_UIs", "TA_ICON"];
        this.makeUICount = 1500; //创建的UI 的数量
        this.atlasMap = {};
        this.atlasArray = [];
        this.atlasPath = "".concat(resRootPath, "atlas/");
        this.cacheAtlasTexs = [];
        this._isTexArrayUIMode = true;
        //需要使用到的 sprite
        this.UITempletes = [
            { atlas: "TA_NUMs", spRes: "ui_lianji_0", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_1", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_2", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_3", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_4", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_5", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_6", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_7", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_8", w: 32, h: 42 },
            { atlas: "TA_NUMs", spRes: "ui_lianji_9", w: 32, h: 42 },
            { atlas: "TA_UIs", spRes: "bg", w: 100, h: 79 },
            { atlas: "TA_UIs", spRes: "ui_boundary_close", w: 25, h: 25 },
            { atlas: "TA_UIs", spRes: "ui_boundary_close_in", w: 25, h: 25 },
            { atlas: "TA_UIs", spRes: "ui_public_button_1", w: 135, h: 54 },
            { atlas: "TA_UIs", spRes: "ui_public_button_hits", w: 135, h: 54 },
            { atlas: "TA_UIs", spRes: "ui_public_input", w: 39, h: 28 },
            { atlas: "TA_ICON", spRes: "zg03", w: 180, h: 180 },
        ];
    }
    Object.defineProperty(test_UI_Texture_Array.prototype, "isTexArrayUIMode", {
        get: function () { return this._isTexArrayUIMode; },
        set: function (val) {
            if (this._isTexArrayUIMode == val)
                return;
            this._isTexArrayUIMode = val;
            this.switchUIMode(this._isTexArrayUIMode);
        },
        enumerable: false,
        configurable: true
    });
    //加载altas
    test_UI_Texture_Array.prototype.loadAtlas = function (resName) {
        return __awaiter(this, void 0, void 0, function () {
            var imgFile, jsonFile, _img, _atlas;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        imgFile = "".concat(this.atlasPath).concat(resName, "/").concat(resName, ".png");
                        jsonFile = "".concat(this.atlasPath).concat(resName, "/").concat(resName, ".atlas.json");
                        return [4 /*yield*/, util.loadRes(imgFile)];
                    case 1:
                        _img = _a.sent();
                        return [4 /*yield*/, util.loadRes(jsonFile)];
                    case 2:
                        _atlas = _a.sent();
                        _atlas.texture = _img;
                        return [2 /*return*/, _atlas];
                }
            });
        });
    };
    //切换UI 模式
    test_UI_Texture_Array.prototype.switchUIMode = function (texArrayMode) {
        var _this = this;
        this.textureArrayRoot.visible = false;
        this.normalRoot.visible = false;
        var spTexSet = function (a, tex) {
            a.texture = tex;
            for (var k in a.sprites) {
                var sp = a.sprites[k];
                sp.texture = tex;
            }
        };
        //go 切换
        if (texArrayMode) {
            this.textureArrayRoot.visible = true;
            //纹理切换
            this.atlasArray.forEach(function (a) {
                spTexSet(a, _this.cacheTexArray);
            });
        }
        else {
            this.normalRoot.visible = true;
            //纹理切换
            this.atlasArray.forEach(function (a, i) {
                spTexSet(a, _this.cacheAtlasTexs[i]);
            });
        }
    };
    //随机创建UI节点
    test_UI_Texture_Array.prototype.randomMakeUI = function () {
        //随机创建 UI
        var count = this.makeUICount;
        var range = 800;
        var _loop_5 = function (i) {
            //位置
            var x = Math.floor(range * Math.random());
            var y = Math.floor(range * Math.random());
            //旋转
            var angle = 360 * Math.random();
            //元素
            var ele = this_4.UITempletes[Math.floor(this_4.UITempletes.length * Math.random())];
            var atlas = this_4.atlasMap[ele.atlas];
            var sp = atlas.sprites[ele.spRes];
            var texArrIndex = this_4.atlasNames.indexOf(ele.atlas);
            //创建 UI
            //normal UI
            var nUINode = this_4.makeUI(sp, ele.w, ele.h);
            this_4.normalRoot.addChild(nUINode);
            //textureArray UI
            var tUINode = this_4.makeTexArrayUI(sp, ele.w, ele.h, texArrIndex);
            this_4.textureArrayRoot.addChild(tUINode);
            //修改 RTS
            [nUINode, tUINode].forEach(function (n) {
                m4m.math.vec2Set(n.localTranslate, x, y);
                n.localRotate = angle;
            });
        };
        var this_4 = this;
        for (var i = 0; i < count; i++) {
            _loop_5(i);
        }
    };
    //创建普通UI
    test_UI_Texture_Array.prototype.makeUI = function (sp, w, h) {
        var result = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Image2D);
        var img = result.getComponent("image2D");
        img.sprite = sp;
        result.width = w;
        result.height = h;
        m4m.math.vec2SetAll(result.pivot, 0.5);
        return result;
    };
    //创建纹理数组模式UI
    test_UI_Texture_Array.prototype.makeTexArrayUI = function (sp, w, h, texIndex) {
        if (texIndex === void 0) { texIndex = 0; }
        var result = new m4m.framework.transform2D();
        var texArrImg = result.addComponent("texArrImage2D");
        texArrImg.setShaderByName(this.texArrShaderName);
        texArrImg.sprite = sp;
        texArrImg.texArrayIndex = texIndex;
        result.width = w;
        result.height = h;
        m4m.math.vec2SetAll(result.pivot, 0.5);
        return result;
    };
    //创建shader
    test_UI_Texture_Array.prototype.makeTexArraySahder = function () {
        var shKey = "texArrayImg";
        var sh = new m4m.framework.shader(this.texArrShaderName);
        var gl = m4m.framework.sceneMgr.app.webgl;
        var shaderJson = "{\n                \"properties\": [\n                \"_MainTex('MainTex',Texture)='white'{}\",\n                \"_MaskTex('MaskTex',Texture)='white'{}\"\n                ]\n            }\n        ";
        var vs = "#version 300 es\n            precision mediump float;\n\n            layout(location = 0) in vec3 _glesVertex;    \n            layout(location = 3) in vec4 _glesColor;                   \n            layout(location = 4) in vec4 _glesMultiTexCoord0; \n            layout(location = 8) in vec4 _glesColorEx;                   \n\n            uniform highp mat4 glstate_matrix_mvp;       \n            out lowp vec4 xlv_COLOR;                 \n            out highp vec2 xlv_TEXCOORD0;\n            out float v_texArrIndex;\n            void main()                                      \n            {                           \n                v_texArrIndex = _glesColorEx.w;                  \n                highp vec4 tmpvar_1;                         \n                tmpvar_1.w = 1.0;                            \n                tmpvar_1.xyz = _glesVertex.xyz;              \n                xlv_COLOR = _glesColor;                      \n                xlv_TEXCOORD0 = vec2(_glesMultiTexCoord0.x,1.0-_glesMultiTexCoord0.y);      \n                gl_Position = (glstate_matrix_mvp * tmpvar_1);   \n            }\n        ";
        var fs = "#version 300 es\n            precision mediump float;\n            precision mediump sampler2DArray;\n\n            // uniform sampler2D _MainTex;\n            uniform sampler2DArray _MainTex;\n            in lowp vec4 xlv_COLOR;\n            in highp vec2 xlv_TEXCOORD0;\n            in float v_texArrIndex;\n            out vec4 color;\n            void main()\n            {\n                lowp vec4 _color;\n                // _color = (xlv_COLOR * texture(_MainTex, xlv_TEXCOORD0));\n                _color = (xlv_COLOR * texture(_MainTex, vec3(xlv_TEXCOORD0 , v_texArrIndex)));\n                color = _color;\n            }\n            ";
        //
        var assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
        var pool = assetMgr.shaderPool;
        pool.compileVS(assetMgr.webgl, shKey, vs);
        pool.compileFS(assetMgr.webgl, shKey, fs);
        var program = pool.linkProgram(assetMgr.webgl, shKey, shKey);
        //
        sh.defaultAsset = true;
        sh.passes["base"] = [];
        var p = new m4m.render.glDrawPass();
        p.setProgram(program);
        sh.passes["base"].push(p);
        sh.fillUnDefUniform(p);
        sh._parseProperties(assetMgr, JSON.parse(shaderJson).properties);
        p.state_showface = m4m.render.ShowFaceStateEnum.ALL;
        p.state_ztest = false;
        p.state_zwrite = false;
        p.state_ztest_method = m4m.render.webglkit.LEQUAL;
        p.setAlphaBlend(m4m.render.BlendModeEnum.Blend);
        assetMgr.mapShader[sh.getName()] = sh;
        //（取巧操作 ，整合到引擎需要调整）-----------------------
        //smp2dArray type 
        var texArray = m4m.render.UniformTypeEnum.CubeTexture + 1;
        //
        var mainTexUnif = p.mapuniforms["_MainTex"];
        mainTexUnif.type = texArray;
        //
        var applyObj = m4m.render.shaderUniform;
        //增加处理方法
        applyObj.applyuniformFunc[texArray] = function (location, value) {
            var tex = value.glTexture.texture;
            gl.activeTexture(m4m.render.webglkit.GetTextureNumber(applyObj.texindex));
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
            gl.uniform1i(location, applyObj.texindex);
            applyObj.texindex++;
        };
        //----------------------------------------------------
        return sh;
    };
    //从assetMgr 获取需要的 htmlImage 图片 （取巧操作 ，整合到引擎需要调整）
    test_UI_Texture_Array.prototype.getHtmlImageMap = function () {
        var _limit = {};
        var _map = {};
        var nullObj = {};
        this.atlasNames.forEach(function (n) {
            _limit[n] = nullObj;
            _map[n] = null;
        });
        var mapLoding = m4m.framework.assetMgr.mapLoading;
        var mapImg = m4m.framework.assetMgr.mapImage;
        for (var k in mapLoding) {
            var val = mapLoding[k];
            if (val.url.lastIndexOf(".png") == -1)
                continue;
            var fileName = val.url.substring(val.url.lastIndexOf("/") + 1);
            fileName = fileName.substring(0, fileName.indexOf("."));
            if (_limit[fileName]) {
                _map[fileName] = mapImg[k];
            }
        }
        return _map;
    };
    //创建texture2D 纹理
    test_UI_Texture_Array.prototype.makeTex2dArray = function (texMap) {
        var texs = [];
        for (var i = 0, len = this.atlasNames.length; i < len; i++) {
            var atlasName = this.atlasNames[i];
            texs.push(texMap[atlasName]);
        }
        var glTex = new tex2DArray(texs[0].width, texs[0].height);
        glTex.uploadImage(texs);
        var result = new m4m.framework.texture("tex2dArray");
        result.glTexture = glTex;
        return result;
    };
    test_UI_Texture_Array.prototype.setGUI = function () {
        return __awaiter(this, void 0, void 0, function () {
            var app, obj, gui;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, datGui.init()];
                    case 1:
                        _a.sent();
                        if (!dat)
                            return [2 /*return*/];
                        app = m4m.framework.sceneMgr.app;
                        //
                        app.showFps();
                        app.showDrawCall();
                        obj = {
                            isOnFPS: true,
                            swFPS: function () {
                                (obj.isOnFPS = !obj.isOnFPS) ? app.showFps() : app.closeFps();
                            },
                            isOnDCall: true,
                            swDC: function () {
                                (obj.isOnDCall = !obj.isOnDCall) ? app.showDrawCall() : app.closeDrawCall();
                            }
                        };
                        gui = new dat.GUI();
                        gui.add(obj, "swFPS").name("FPS \u5F00\u5173");
                        gui.add(obj, "swDC").name("drawcall \u5F00\u5173");
                        gui.add(this, "isTexArrayUIMode").name("\u7EB9\u7406\u6570\u7EC4 UI\u6A21\u5F0F");
                        return [2 /*return*/];
                }
            });
        });
    };
    test_UI_Texture_Array.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var objCam, pArr, atlasList, texMap;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //初始化
                        this.app = app;
                        this.scene = this.app.getScene();
                        objCam = new m4m.framework.transform();
                        objCam.name = "sth.";
                        this.scene.addChild(objCam);
                        this.camera = objCam.gameObject.addComponent("camera");
                        this.camera.near = 0.01;
                        this.camera.far = 10;
                        //2dUI root
                        this.rooto2d = new m4m.framework.overlay2D();
                        this.camera.addOverLay(this.rooto2d);
                        //node root
                        this.normalRoot = new m4m.framework.transform2D();
                        this.normalRoot.name = "noramlRoot";
                        this.rooto2d.addChild(this.normalRoot);
                        this.textureArrayRoot = new m4m.framework.transform2D();
                        this.textureArrayRoot.name = "textureArrayRoot";
                        this.rooto2d.addChild(this.textureArrayRoot);
                        pArr = [];
                        this.atlasNames.forEach(function (name) {
                            pArr.push(_this.loadAtlas(name));
                        });
                        return [4 /*yield*/, Promise.all(pArr)];
                    case 1:
                        atlasList = _a.sent();
                        this.atlasNames.forEach(function (res, i) {
                            _this.atlasMap[res] = atlasList[i];
                            _this.atlasArray.push(atlasList[i]);
                            _this.cacheAtlasTexs.push(atlasList[i].texture);
                        });
                        texMap = this.getHtmlImageMap();
                        this.cacheTexArray = this.makeTex2dArray(texMap);
                        //
                        //创建 texArrImg 着色器
                        this.makeTexArraySahder();
                        //创建 UI
                        this.randomMakeUI();
                        //
                        this.switchUIMode(true);
                        //init gui
                        this.setGUI();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_UI_Texture_Array.prototype.update = function (delta) {
    };
    return test_UI_Texture_Array;
}());
var texArrImage2D = /** @class */ (function () {
    function texArrImage2D() {
        this._unitLen = 13;
        //2d使用固定的顶点格式
        //pos[0,1,2]color[3,4,5,6]uv[7,8]color2[9,10,11,12] length=13
        this.datar = [
            0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
            0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
            0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
            0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
            0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
        ];
        this.needRefreshImg = false;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 颜色
         * @version m4m 1.0
         */
        this.color = new m4m.math.color(1.0, 1.0, 1.0, 1.0);
        this._CustomShaderName = ""; //自定义UIshader
        this._spriteName = "";
        this._texArrayIndex = 0;
        this.min_x = Number.MAX_VALUE;
        this.max_x = Number.MAX_VALUE * -1;
        this.min_y = Number.MAX_VALUE;
        this.max_y = Number.MAX_VALUE * -1;
    }
    texArrImage2D_1 = texArrImage2D;
    /**
     * @public
     * @language zh_CN
     * @classdesc
     * 设置rander Shader名字
     * @version m4m 1.0
     */
    texArrImage2D.prototype.setShaderByName = function (shaderName) {
        this._CustomShaderName = shaderName;
    };
    /**
     * @public
     * @language zh_CN
     * @classdesc
     * 获取rander 的材质
     * @version m4m 1.0
     */
    texArrImage2D.prototype.getMaterial = function () {
        if (!this._uimat) {
            return this.uimat;
        }
        return this._uimat;
    };
    /**
     * @public
     * @language zh_CN
     * @classdesc
     * 获取渲染绘制矩形边界
     * @version m4m 1.0
     */
    texArrImage2D.prototype.getDrawBounds = function () {
        if (!this._darwRect) {
            this._darwRect = new m4m.math.rect();
            this.calcDrawRect();
        }
        return this._darwRect;
    };
    Object.defineProperty(texArrImage2D.prototype, "uimat", {
        get: function () {
            var assetmgr = this.transform.canvas.assetmgr;
            if (!assetmgr)
                return this._uimat;
            this.searchTexture();
            if (this._sprite && this._sprite.texture) {
                var pMask = this.transform.parentIsMask;
                var mat = this._uimat;
                var rectTag = "";
                var uiTag = "_ui";
                if (pMask) {
                    // let prect = this.transform.maskRect;
                    // rectTag = `mask(${prect.x}_${prect.y}_${prect.w}_${prect.h})`; //when parentIsMask,can't multiplexing material , can be multiplexing when parent equal
                    var rId = this.transform.maskRectId;
                    rectTag = "mask(".concat(rId, ")");
                }
                var matName = this._sprite.texture.getName() + uiTag + rectTag;
                if (!mat || mat.getName() != matName) {
                    if (mat)
                        mat.unuse();
                    mat = assetmgr.getAssetByName(matName);
                    if (mat)
                        mat.use();
                }
                if (!mat) {
                    mat = new m4m.framework.material(matName);
                    var sh = assetmgr.getShader(this._CustomShaderName);
                    sh = sh ? sh : assetmgr.getShader(pMask ? texArrImage2D_1.defMaskUIShader : texArrImage2D_1.defUIShader);
                    mat.setShader(sh);
                    mat.use();
                    this.needRefreshImg = true;
                }
                this._uimat = mat;
            }
            return this._uimat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(texArrImage2D.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 精灵
         * @version m4m 1.0
         */
        set: function (sprite) {
            if (sprite == this._sprite)
                return;
            if (this._sprite) {
                this._sprite.unuse();
            }
            if (!this._sprite || !sprite || this._sprite.texture != sprite.texture) {
                this.needRefreshImg = true;
            }
            this._sprite = sprite;
            if (sprite) {
                this._sprite.use();
                this._spriteName = this._sprite.getName();
                this.prepareData();
                if (this.transform != null) {
                    this.transform.markDirty();
                    this.updateTran();
                }
            }
            else {
                this._spriteName = "";
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(texArrImage2D.prototype, "texArrayIndex", {
        get: function () { return this._texArrayIndex; },
        set: function (val) {
            val = isNaN(val) || val == null ? 0 : val;
            if (val == this._texArrayIndex)
                return;
            this._texArrayIndex = val;
            //刷新数据
            if (this.datar.length != this._unitLen * 6)
                return;
            for (var i = 0; i < 6; i++) {
                this.datar[(i + 1) * this._unitLen - 1] = this._texArrayIndex;
            }
        },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    /**
     * @private
     */
    texArrImage2D.prototype.render = function (canvas) {
        var mat = this.uimat;
        if (!mat)
            return;
        var img;
        if (this._sprite && this._sprite.texture) {
            img = this._sprite.texture;
        }
        if (img) {
            var needRMask = false;
            if (this.needRefreshImg) {
                mat.setTexture("_MainTex", img);
                this.needRefreshImg = false;
                needRMask = true;
            }
            if (this.transform.parentIsMask) {
                if (!this._cacheMaskV4)
                    this._cacheMaskV4 = new m4m.math.vector4();
                var rect = this.transform.maskRect;
                if (this._cacheMaskV4.x != rect.x || this._cacheMaskV4.y != rect.y || this._cacheMaskV4.w != rect.w || this._cacheMaskV4.z != rect.h || needRMask) {
                    this._cacheMaskV4.x = rect.x;
                    this._cacheMaskV4.y = rect.y;
                    this._cacheMaskV4.z = rect.w;
                    this._cacheMaskV4.w = rect.h;
                    mat.setVector4("_maskRect", this._cacheMaskV4);
                }
            }
            canvas.pushRawData(mat, this.datar);
        }
    };
    //资源管理器中寻找 指定的贴图资源
    texArrImage2D.prototype.searchTexture = function () {
        if (this._sprite)
            return;
        var assetmgr = this.transform.canvas.assetmgr;
        var temp = m4m.framework.assetMgr.mapNamed[this._spriteName];
        var tspr;
        if (temp != null) {
            tspr = assetmgr.getAssetByName(this._spriteName);
        }
        else {
            if (assetmgr.mapDefaultSprite[this._spriteName]) //找默认资源
                tspr = assetmgr.getDefaultSprite(this._spriteName);
        }
        if (tspr) {
            this.sprite = tspr;
            this.needRefreshImg = true;
            return; //捕获到目标sprite后强制 下一帧渲染 （防止 transform树同步延迟 导致 右上角ghostShadow 问题）
        }
    };
    /**
     * @private
     */
    texArrImage2D.prototype.start = function () {
    };
    texArrImage2D.prototype.onPlay = function () {
    };
    /**
     * @private
     */
    texArrImage2D.prototype.update = function (delta) {
    };
    /**
     * @private
     */
    texArrImage2D.prototype.remove = function () {
        if (this._sprite)
            this._sprite.unuse();
        if (this._uimat)
            this._uimat.unuse();
        this.datar.length = 0;
        this.transform = null;
    };
    /**
     * @private
     * 根据显示方式来准备数据
     */
    texArrImage2D.prototype.prepareData = function () {
        if (this._sprite == null)
            return;
        var urange = this._sprite.urange;
        var vrange = this._sprite.vrange;
        var texArrIdx = this._texArrayIndex;
        this.datar = [
            0, 0, 0, 1, 1, 1, 1, urange.x, vrange.x, 1, 1, 1, texArrIdx,
            0, 0, 0, 1, 1, 1, 1, urange.y, vrange.x, 1, 1, 1, texArrIdx,
            0, 0, 0, 1, 1, 1, 1, urange.x, vrange.y, 1, 1, 1, texArrIdx,
            0, 0, 0, 1, 1, 1, 1, urange.x, vrange.y, 1, 1, 1, texArrIdx,
            0, 0, 0, 1, 1, 1, 1, urange.y, vrange.x, 1, 1, 1, texArrIdx,
            0, 0, 0, 1, 1, 1, 1, urange.y, vrange.y, 1, 1, 1, texArrIdx
        ];
    };
    /**
     * @private
     */
    texArrImage2D.prototype.updateTran = function () {
        var m = this.transform.getWorldMatrix();
        var l = -this.transform.pivot.x * this.transform.width;
        var r = this.transform.width + l;
        var t = -this.transform.pivot.y * this.transform.height;
        var b = this.transform.height + t;
        var x0 = l * m.rawData[0] + t * m.rawData[2] + m.rawData[4];
        var y0 = l * m.rawData[1] + t * m.rawData[3] + m.rawData[5];
        var x1 = r * m.rawData[0] + t * m.rawData[2] + m.rawData[4];
        var y1 = r * m.rawData[1] + t * m.rawData[3] + m.rawData[5];
        var x2 = l * m.rawData[0] + b * m.rawData[2] + m.rawData[4];
        var y2 = l * m.rawData[1] + b * m.rawData[3] + m.rawData[5];
        var x3 = r * m.rawData[0] + b * m.rawData[2] + m.rawData[4];
        var y3 = r * m.rawData[1] + b * m.rawData[3] + m.rawData[5];
        if (this._sprite == null)
            return;
        this.updateSimpleData(x0, y0, x1, y1, x2, y2, x3, y3);
        //主color
        var vertexCount = this.datar.length / this._unitLen;
        for (var i = 0; i < vertexCount; i++) {
            this.datar[i * this._unitLen + 3] = this.color.r;
            this.datar[i * this._unitLen + 4] = this.color.g;
            this.datar[i * this._unitLen + 5] = this.color.b;
            this.datar[i * this._unitLen + 6] = this.color.a;
        }
        //drawRect 
        this.min_x = Math.min(x0, x1, x2, x3, this.min_x);
        this.min_y = Math.min(y0, y1, y2, y3, this.min_y);
        this.max_x = Math.max(x0, x1, x2, x3, this.max_x);
        this.max_y = Math.max(y0, y1, y2, y3, this.max_y);
        this.calcDrawRect();
    };
    /** 计算drawRect */
    texArrImage2D.prototype.calcDrawRect = function () {
        if (!this._darwRect)
            return;
        //drawBounds (y 轴反向)
        var canvas = this.transform.canvas;
        if (!canvas)
            return;
        var minPos = m4m.poolv2();
        minPos.x = this.min_x;
        minPos.y = this.max_y;
        canvas.clipPosToCanvasPos(minPos, minPos);
        var maxPos = m4m.poolv2();
        maxPos.x = this.max_x;
        maxPos.y = this.min_y;
        canvas.clipPosToCanvasPos(maxPos, maxPos);
        this._darwRect.x = minPos.x;
        this._darwRect.y = minPos.y;
        this._darwRect.w = maxPos.x - minPos.x;
        this._darwRect.h = maxPos.y - minPos.y;
        this.min_x = this.min_y = Number.MAX_VALUE;
        this.max_x = this.max_y = Number.MAX_VALUE * -1;
        m4m.poolv2_del(minPos);
        m4m.poolv2_del(maxPos);
    };
    /**
     * @private
     * 更新quad的顶点数据
     */
    texArrImage2D.prototype.updateQuadData = function (x0, y0, x1, y1, x2, y2, x3, y3, quadIndex, mirror) {
        if (quadIndex === void 0) { quadIndex = 0; }
        if (mirror === void 0) { mirror = false; }
        var _index = quadIndex * 6;
        if (!mirror) {
            this.datar[(_index + 0) * this._unitLen] = x0;
            this.datar[(_index + 0) * this._unitLen + 1] = y0;
            this.datar[(_index + 1) * this._unitLen] = x1;
            this.datar[(_index + 1) * this._unitLen + 1] = y1;
            this.datar[(_index + 2) * this._unitLen] = x2;
            this.datar[(_index + 2) * this._unitLen + 1] = y2;
            this.datar[(_index + 3) * this._unitLen] = x2;
            this.datar[(_index + 3) * this._unitLen + 1] = y2;
            this.datar[(_index + 4) * this._unitLen] = x1;
            this.datar[(_index + 4) * this._unitLen + 1] = y1;
            this.datar[(_index + 5) * this._unitLen] = x3;
            this.datar[(_index + 5) * this._unitLen + 1] = y3;
        }
        else {
            this.datar[(_index + 0) * this._unitLen] = x0;
            this.datar[(_index + 0) * this._unitLen + 1] = y0;
            this.datar[(_index + 1) * this._unitLen] = x1;
            this.datar[(_index + 1) * this._unitLen + 1] = y1;
            this.datar[(_index + 2) * this._unitLen] = x3;
            this.datar[(_index + 2) * this._unitLen + 1] = y3;
            this.datar[(_index + 3) * this._unitLen] = x0;
            this.datar[(_index + 3) * this._unitLen + 1] = y0;
            this.datar[(_index + 4) * this._unitLen] = x3;
            this.datar[(_index + 4) * this._unitLen + 1] = y3;
            this.datar[(_index + 5) * this._unitLen] = x2;
            this.datar[(_index + 5) * this._unitLen + 1] = y2;
        }
    };
    /**
     * @private
     * 更新常规数据
     */
    texArrImage2D.prototype.updateSimpleData = function (x0, y0, x1, y1, x2, y2, x3, y3) {
        this.updateQuadData(x0, y0, x1, y1, x2, y2, x3, y3);
    };
    var texArrImage2D_1;
    texArrImage2D.ClassName = "texArrImage2D";
    texArrImage2D.defUIShader = "shader/defui"; //非mask 使用shader
    texArrImage2D.defMaskUIShader = "shader/defmaskui"; //mask 使用shader
    __decorate([
        m4m.reflect.Field("color"),
        m4m.reflect.UIStyle("color")
    ], texArrImage2D.prototype, "color", void 0);
    __decorate([
        m4m.reflect.Field("string")
    ], texArrImage2D.prototype, "_spriteName", void 0);
    texArrImage2D = texArrImage2D_1 = __decorate([
        m4m.reflect.node2DComponent,
        m4m.reflect.nodeRender
    ], texArrImage2D);
    return texArrImage2D;
}());
var tex2DArray = /** @class */ (function () {
    function tex2DArray(w, h) {
        this.width = w;
        this.height = h;
        this.texture = m4m.framework.sceneMgr.app.webgl.createTexture();
    }
    tex2DArray.prototype.uploadImage = function (texs) {
        if (!texs || texs.length < 1)
            return;
        var w = texs[0].width;
        var h = texs[0].height;
        var len = texs.length;
        var gl = m4m.framework.sceneMgr.app.webgl;
        gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, w, h, len, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        for (var i = 0; i < len; i++) {
            var tex = texs[i];
            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, i, tex.width, tex.height, 1, gl.RGBA, gl.UNSIGNED_BYTE, tex);
        }
        gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
    };
    tex2DArray.prototype.isFrameBuffer = function () {
        return false;
    };
    tex2DArray.prototype.dispose = function (webgl) {
    };
    tex2DArray.prototype.caclByteLength = function () {
        return 0;
    };
    return tex2DArray;
}());
//UI 组件样例
var test_UI_Component = /** @class */ (function () {
    function test_UI_Component() {
        this.fontjson = "方正粗圆_GBK.font.json";
        this.fontpng = "方正粗圆_GBK.TTF.png";
        this.emoji = "emoji";
        this.taskmgr = new m4m.framework.taskMgr();
    }
    test_UI_Component.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10;
        //2dUI root
        this.rooto2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(this.rooto2d);
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.loadAtlas.bind(this));
        this.taskmgr.addTaskCall(this.createUI.bind(this));
    };
    test_UI_Component.prototype.createUI = function (astState, state) {
        var atlasComp = this.assetMgr.getAssetByName("comp.atlas.json");
        var tex_0 = this.assetMgr.getAssetByName("zg03_256.png");
        var emojiAtlas = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName("emoji.atlas.json", "emoji.assetbundle.json");
        //9宫格拉伸底图
        var bg_t = new m4m.framework.transform2D;
        bg_t.name = "框底图";
        bg_t.width = 800;
        bg_t.height = 260;
        bg_t.pivot.x = 0;
        bg_t.pivot.y = 0;
        //bg_t.localTranslate.x = 100;
        bg_t.localTranslate.y = 100;
        this.rooto2d.addChild(bg_t);
        var bg_i = bg_t.addComponent("image2D");
        bg_i.imageType = m4m.framework.ImageType.Sliced;
        bg_i.sprite = atlasComp.sprites["bg"];
        bg_i.imageBorder.l = 10;
        bg_i.imageBorder.t = 50;
        bg_i.imageBorder.r = 10;
        bg_i.imageBorder.b = 10;
        bg_t.layoutState = 0 | m4m.framework.layoutOption.LEFT | m4m.framework.layoutOption.RIGHT | m4m.framework.layoutOption.TOP | m4m.framework.layoutOption.BOTTOM;
        bg_t.setLayoutValue(m4m.framework.layoutOption.LEFT, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.TOP, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.RIGHT, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.BOTTOM, 60);
        var _font = this.assetMgr.getAssetByName(this.fontjson);
        var lableW = 500;
        var lableH = 40;
        var lableStartX = 80;
        var lableStartY = 280;
        //文本
        var lab_t0 = new m4m.framework.transform2D;
        lab_t0.name = "我是段文本_lable";
        lab_t0.width = lableW;
        lab_t0.height = lableH;
        lab_t0.localTranslate.x = lableStartX;
        lab_t0.localTranslate.y = lableStartY;
        this.rooto2d.addChild(lab_t0);
        var lab_l0 = lab_t0.addComponent("label");
        test_UI_Component["lab"] = lab_l0;
        lab_l0.font = _font;
        lab_l0.fontsize = 12;
        // lab_l.text = "我是段文本\n换行测试";
        lab_l0.text = "".concat(lab_l0.fontsize, "\u53F7\u5B57\u4F53 Innovation in China \u4E2D\u56FD\u5236\u9020\uFF0C\u6167\u53CA\u5168\u7403 0123456789");
        lab_l0.color = new m4m.math.color(0.0, 0.0, 0.0, 1);
        lab_l0.color2 = new m4m.math.color(1.0, 0.0, 0.0, 1);
        test_UI_Component["obj"] = this;
        var lab_t = new m4m.framework.transform2D;
        lab_t.name = "我是段文本_lable";
        lab_t.width = lableW;
        lab_t.height = lableH;
        lab_t.localTranslate.x = lableStartX;
        lab_t.localTranslate.y = lableStartY + lableH;
        this.rooto2d.addChild(lab_t);
        var lab_l = lab_t.addComponent("label");
        test_UI_Component["lab"] = lab_l;
        lab_l.font = _font;
        lab_l.fontsize = 20;
        // lab_l.text = "我是段文本\n换行测试";
        lab_l.text = "".concat(lab_l.fontsize, "\u53F7\u5B57\u4F53 Innovation in China \u4E2D\u56FD\u5236\u9020\uFF0C\u6167\u53CA\u5168\u7403 0123456789");
        lab_l.color = new m4m.math.color(0.0, 0.0, 0.0, 1);
        lab_l.color2 = new m4m.math.color(1.0, 0.0, 0.0, 1);
        test_UI_Component["obj"] = this;
        var lab_t1 = new m4m.framework.transform2D;
        lab_t1.name = "我是段文本_lable";
        lab_t1.width = lableW;
        lab_t1.height = lableH;
        lab_t1.localTranslate.x = lableStartX;
        lab_t1.localTranslate.y = lableStartY + lableH * 2;
        this.rooto2d.addChild(lab_t1);
        var lab_l1 = lab_t1.addComponent("label");
        test_UI_Component["lab"] = lab_l1;
        lab_l1.font = _font;
        lab_l1.fontsize = 30;
        // lab_l1.text = "我是段文本\n换行测试";
        lab_l1.text = "".concat(lab_l1.fontsize, "\u53F7\u5B57\u4F53 Innovation in China \u4E2D\u56FD\u5236\u9020\uFF0C\u6167\u53CA\u5168\u7403 0123456789");
        lab_l1.color = new m4m.math.color(0.0, 0.0, 0.0, 1);
        lab_l1.color2 = new m4m.math.color(1.0, 0.0, 0.0, 1);
        test_UI_Component["obj"] = this;
        var lab_t2 = new m4m.framework.transform2D;
        lab_t2.name = "我是段文本_lable";
        lab_t2.width = lableW;
        lab_t2.height = lableH;
        lab_t2.localTranslate.x = lableStartX;
        lab_t2.localTranslate.y = lableStartY + lableH * 3;
        this.rooto2d.addChild(lab_t2);
        var lab_l2 = lab_t2.addComponent("label");
        test_UI_Component["lab"] = lab_l2;
        lab_l2.font = _font;
        lab_l2.fontsize = 40;
        // lab_l2.text = "我是段文本\n换行测试";
        lab_l2.text = "".concat(lab_l2.fontsize, "\u53F7\u5B57\u4F53 Innovation in China \u4E2D\u56FD\u5236\u9020\uFF0C\u6167\u53CA\u5168\u7403 0123456789");
        lab_l2.color = new m4m.math.color(0.0, 0.0, 0.0, 1);
        lab_l2.color2 = new m4m.math.color(1.0, 0.0, 0.0, 1);
        test_UI_Component["obj"] = this;
        //富文本
        var lab_t3 = new m4m.framework.transform2D;
        lab_t3.name = "lable_richText";
        lab_t3.width = lableW;
        lab_t3.height = lableH * 3;
        lab_t3.localTranslate.x = lableStartX;
        lab_t3.localTranslate.y = lableStartY + lableH * 4;
        this.rooto2d.addChild(lab_t3);
        var lab_l3 = lab_t3.addComponent("label");
        lab_l3.font = _font;
        lab_l3.fontsize = 30;
        // lab_l2.text = "我是段文本\n换行测试";
        lab_l3.richText = true;
        lab_l3.imageTextAtlas = emojiAtlas;
        lab_l3.text = "富文本:<color=#00ff00ff>红色</color> <color=#ff0000ff>绿色</color> \n<i>斜体文本</i> \n图片字符[happy][happy][like][cool][happy]";
        lab_l3.color = new m4m.math.color(0.0, 0.0, 0.0, 1);
        lab_l3.color2 = new m4m.math.color(0, 0.0, 0.0, 0.5);
        //按鈕
        var btn_t = new m4m.framework.transform2D;
        btn_t.name = "btn_按鈕";
        btn_t.width = 100;
        btn_t.height = 36;
        btn_t.pivot.x = 0;
        btn_t.pivot.y = 0;
        btn_t.localTranslate.x = 10;
        btn_t.localTranslate.y = 70;
        bg_t.addChild(btn_t);
        var btn_b = btn_t.addComponent("button");
        btn_b.targetImage = btn_t.addComponent("image2D");
        btn_b.targetImage.sprite = atlasComp.sprites["ui_public_button_hits"];
        btn_b.pressedGraphic = atlasComp.sprites["ui_public_button_1"];
        btn_b.pressedColor = new m4m.math.color(1, 1, 1, 1);
        btn_b.transition = m4m.framework.TransitionType.SpriteSwap;
        //关闭按钮
        var closeSce = 0.8;
        var close_bt = new m4m.framework.transform2D;
        close_bt.width = 25 * closeSce;
        close_bt.height = 25 * closeSce;
        close_bt.pivot.x = 0;
        close_bt.pivot.y = 0;
        close_bt.localTranslate.x = 370;
        close_bt.localTranslate.y = 2;
        bg_t.addChild(close_bt);
        var close_b = close_bt.addComponent("button");
        close_b.targetImage = close_bt.addComponent("image2D");
        close_b.targetImage.sprite = atlasComp.sprites["ui_boundary_close_in"];
        close_b.pressedGraphic = atlasComp.sprites["ui_boundary_close"];
        close_b.transition = m4m.framework.TransitionType.SpriteSwap;
        close_bt.layoutState = 0 | m4m.framework.layoutOption.RIGHT | m4m.framework.layoutOption.TOP;
        close_bt.setLayoutValue(m4m.framework.layoutOption.RIGHT, 5);
        close_bt.setLayoutValue(m4m.framework.layoutOption.TOP, 3);
        //精灵图 数字
        var nums = "45789";
        var scale = 0.6;
        var numIconarr = [];
        for (var i = 0; i < nums.length; i++) {
            var spt_t = new m4m.framework.transform2D;
            spt_t.width = 32 * scale;
            spt_t.height = 42 * scale;
            spt_t.pivot.x = 0;
            spt_t.pivot.y = 0;
            spt_t.localTranslate.x = spt_t.width * i + 10;
            spt_t.localTranslate.y = 120;
            bg_t.addChild(spt_t);
            var spt = spt_t.addComponent("image2D");
            spt.sprite = atlasComp.sprites["ui_lianji_" + nums[i]];
            numIconarr.push(spt);
        }
        btn_b.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            var temp = "";
            for (var i = 0; i < nums.length; i++) {
                var num = Number(nums[i]);
                num++;
                num = num % 10;
                numIconarr[i].sprite = atlasComp.sprites["ui_lianji_" + num];
                numIconarr[i].transform.markDirty();
                temp += num.toString();
            }
            nums = temp;
        }, this);
        //一个输入框
        var iptFrame_t = new m4m.framework.transform2D;
        iptFrame_t.width = 800;
        iptFrame_t.height = 30;
        iptFrame_t.pivot.x = 0;
        iptFrame_t.pivot.y = 0;
        iptFrame_t.localTranslate.x = 10;
        iptFrame_t.localTranslate.y = 180;
        bg_t.addChild(iptFrame_t);
        var ipt = iptFrame_t.addComponent("inputField");
        ipt.LineType = m4m.framework.lineType.SingleLine; //单行输入
        ipt.onTextSubmit = function (t) {
            console.log("\u63D0\u4EA4\u6587\u672C:".concat(t));
        };
        var img_t = new m4m.framework.transform2D;
        img_t.width = iptFrame_t.width;
        img_t.height = iptFrame_t.height;
        iptFrame_t.addChild(img_t);
        ipt.frameImage = img_t.addComponent("image2D");
        ipt.frameImage.sprite = atlasComp.sprites["ui_public_input"];
        ipt.frameImage.imageType = m4m.framework.ImageType.Sliced;
        ipt.frameImage.imageBorder.l = 16;
        ipt.frameImage.imageBorder.t = 14;
        ipt.frameImage.imageBorder.r = 16;
        ipt.frameImage.imageBorder.b = 14;
        var text_t = new m4m.framework.transform2D;
        text_t.width = iptFrame_t.width;
        text_t.height = iptFrame_t.height;
        iptFrame_t.addChild(text_t);
        ipt.TextLabel = text_t.addComponent("label");
        ipt.TextLabel.font = _font;
        ipt.TextLabel.fontsize = 24;
        ipt.TextLabel.color = new m4m.math.color(1, 1, 1, 1);
        text_t.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.V_CENTER;
        text_t.setLayoutValue(m4m.framework.layoutOption.H_CENTER, 0);
        text_t.setLayoutValue(m4m.framework.layoutOption.V_CENTER, 0);
        var p_t = new m4m.framework.transform2D;
        p_t.width = iptFrame_t.width;
        p_t.height = iptFrame_t.height;
        iptFrame_t.addChild(p_t);
        ipt.PlaceholderLabel = p_t.addComponent("label");
        ipt.PlaceholderLabel.text = "SingleLine Enter text...";
        ipt.PlaceholderLabel.font = _font;
        ipt.PlaceholderLabel.fontsize = 24;
        ipt.PlaceholderLabel.color = new m4m.math.color(0.6, 0.6, 0.6, 1);
        m4m["he"] = ipt;
        //多行输入框
        var ipt_mul_t = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.InputField);
        bg_t.addChild(ipt_mul_t);
        ipt_mul_t.width = 300;
        ipt_mul_t.height = 120;
        ipt_mul_t.localTranslate.x = 160;
        ipt_mul_t.localTranslate.y = 40;
        var ipt_mul = ipt_mul_t.getComponent("inputField");
        // ipt_mul.LineType = m4m.framework.lineType.MultiLine;                                        //设置多行输入
        ipt_mul.LineType = m4m.framework.lineType.MultiLine_NewLine; //设置多行输入 ，回车换行
        ipt_mul.PlaceholderLabel.text = "MultiLine Enter text..."; //占位文本设置
        ipt_mul.text = "\u591A\u884C\u6587\u672C\u8F93\u5165\u6846\n<color=#ff00aa>\u652F\u6301</color><color=#00ffaa><i>\u5BCC\u6587\u672C</i></color>: [happy][cool][like]";
        //监听 文本提交回调
        ipt_mul.onTextSubmit = function (t) {
            console.log("\u63D0\u4EA4\u6587\u672C:".concat(t));
        };
        m4m.math.colorSet(ipt_mul.frameImage.color, 0.9, 0.9, 0.9, 1);
        //lable set font 
        var ls = ipt_mul_t.getComponentsInChildren("label");
        ls.forEach(function (l) { l.font = _font; });
        ipt_mul.TextLabel.richText = true; //让 textLable 使用富文本
        ipt_mul.TextLabel.imageTextAtlas = emojiAtlas; //设置 textLable 富文本中的图片字符
        //滑动卷轴框
        var scroll_t = new m4m.framework.transform2D;
        scroll_t.width = 200;
        scroll_t.height = 130;
        bg_t.addChild(scroll_t);
        scroll_t.localTranslate.x = 500;
        scroll_t.localTranslate.y = 30;
        var scroll_ = scroll_t.addComponent("scrollRect");
        var ct = new m4m.framework.transform2D;
        scroll_t.addChild(ct);
        scroll_.inertia = true;
        ct.width = 300;
        ct.height = 300;
        scroll_.decelerationRate = 0.135;
        scroll_.content = ct;
        scroll_t.isMask = true;
        scroll_.horizontal = true;
        scroll_.vertical = true;
        //卷轴框 raw png
        var raw_t2 = new m4m.framework.transform2D;
        raw_t2.name = "滑动卷轴框png";
        raw_t2.width = 300;
        raw_t2.height = 300;
        var raw_i2 = raw_t2.addComponent("rawImage2D");
        raw_i2.image = tex_0;
        ct.addChild(raw_t2);
        //卷轴框 label
        var s_l_t = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Label);
        s_l_t.width = 180;
        var s_l = s_l_t.getComponent("label");
        s_l.font = _font;
        s_l.fontsize = 40;
        s_l.verticalOverflow = true;
        s_l.verticalType = m4m.framework.VerticalType.Top;
        s_l.text = "scrollRect \ntry drag \nto move";
        ct.addChild(s_l_t);
        test_UI_Component.temp = iptFrame_t;
        //key dwon test
        var inputMgr = this.app.getInputMgr();
        this.app.webgl.canvas.addEventListener("keydown", function (ev) {
            if (ev.keyCode == 81) {
            }
        }, false);
        state.finish = true;
    };
    test_UI_Component.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.json.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.atlas.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        //加载字体资源
                        _this.assetMgr.load("".concat(resRootPath, "font/") + _this.fontpng, m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.assetMgr.load("".concat(resRootPath, "font/") + _this.fontjson, m4m.framework.AssetTypeEnum.Auto, function (s) {
                                    _this.assetMgr.load("".concat(resRootPath, "texture/zg03_256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                                        if (s.isfinish) {
                                            state.finish = true;
                                        }
                                    });
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_UI_Component.prototype.loadAtlas = function (lastState, state) {
        var abName = "".concat(this.emoji, ".assetbundle.json");
        var abPath = "".concat(resRootPath, "atlas/").concat(this.emoji, "/").concat(abName);
        this.assetMgr.load(abPath, m4m.framework.AssetTypeEnum.Bundle, function (_sta) {
            if (_sta.isfinish) {
                // let ab = this.assetMgr.getAssetBundle(abName);
                // let atlas = this.assetMgr.getAssetByName(`${emoji}.atlas.json`,abName);
                state.finish = true;
            }
        });
    };
    test_UI_Component.prototype.update = function (delta) {
        this.taskmgr.move(delta); //推进task
    };
    test_UI_Component.prototype.testFun = function () {
        var lab = test_UI_Component["lab"];
        var datater = lab["datar"];
        var frist = new m4m.math.vector2(datater[0], datater[1]);
        var endIdx_0 = datater.length - 13;
        var endIdx_1 = datater.length - 12;
        var end = new m4m.math.vector2(datater[endIdx_0], datater[endIdx_1]);
        var canvas = lab.transform.canvas;
        var temp = new m4m.math.vector2();
        canvas.ModelPosToCanvasPos(frist, temp);
        console.error("frist:".concat(temp.toString()));
        canvas.ModelPosToCanvasPos(end, temp);
        console.error("end:".concat(temp.toString()));
    };
    return test_UI_Component;
}());
var test_animationClip = /** @class */ (function () {
    function test_animationClip() {
    }
    test_animationClip.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        m4m.framework.skinnedMeshRenderer["technicalType"] = "BONE_TEXTURE";
        m4m.framework.assetMgr.openGuid = true;
        this.app.getAssetMgr().load("./".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("./".concat(resRootPath, "prefab/elong_prefab/elong_prefab.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("elong_prefab.prefab.json", "elong_prefab.assetbundle.json");
                        var prefabObj_1 = _prefab.getCloneTrans();
                        _this.scene.addChild(prefabObj_1);
                        _this.prefab = prefabObj_1;
                        _this.app.getAssetMgr().load("./".concat(resRootPath, "prefab/elong_prefab/resources/Ready.FBAni.min.aniclip.bin"), m4m.framework.AssetTypeEnum.Aniclip, function (s) {
                            if (s.isfinish) {
                                var aps = prefabObj_1.gameObject.getComponentsInChildren("aniplayer");
                                var ap = aps[0];
                                ap.addClip(s.resstateFirst.res);
                                ap.play("Ready.FBAni.min.aniclip.bin");
                            }
                        });
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, 30);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
    };
    // cube: m4m.framework.transform;
    // cube2: m4m.framework.transform;
    // cube3: m4m.framework.transform;
    // timer: number = 0;
    test_animationClip.prototype.update = function (delta) {
        // this.timer += delta;
        // var x = Math.sin(this.timer);
        // var z = Math.cos(this.timer);
        // var x2 = Math.sin(this.timer * 0.1);
        // var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        // objCam.lookat(this.cube);
        // objCam.markDirty();//标记为需要刷新
        // objCam.updateWorldTran();
        if (this.prefab) {
            this.camera.gameObject.transform.lookat(this.prefab);
        }
    };
    return test_animationClip;
}());
var t;
(function (t_1) {
    var test_blend = /** @class */ (function () {
        function test_blend() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.count = 0;
            this.counttimer = 0;
            this.angularVelocity = new m4m.math.vector3(10, 0, 0);
            this.eulerAngle = m4m.math.pool.new_vector3();
        }
        test_blend.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_blend.prototype.loadText = function (laststate, state) {
            var t = 2;
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/zg256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    t--;
                    if (t == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/trailtest2.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    t--;
                    if (t == 0) {
                        state.finish = true;
                    }
                }
                else {
                    state.error = true;
                }
            });
        };
        test_blend.prototype.addcam = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 120;
            objCam.localTranslate = new m4m.math.vector3(0, 10, 10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
        };
        test_blend.prototype.addplane = function () {
            {
                var background = new m4m.framework.transform();
                background.name = "background";
                background.localScale.x = background.localScale.y = 5;
                background.localTranslate.z = -1;
                console.log(background);
                this.scene.addChild(background);
                background.markDirty();
                background.updateWorldTran();
                var mesh = background.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("quad");
                mesh.mesh = (smesh);
                var renderer = background.gameObject.addComponent("meshRenderer");
                var meshRender = renderer;
                var sh = this.app.getAssetMgr().getShader("diffuse_bothside.shader.json");
                if (sh != null) {
                    meshRender.materials = [];
                    meshRender.materials.push(new m4m.framework.material());
                    meshRender.materials[0].setShader(sh);
                    var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                    meshRender.materials[0].setTexture("_MainTex", texture);
                }
                this.background = background;
            }
            {
                var foreground = new m4m.framework.transform();
                foreground.name = "foreground ";
                foreground.localScale.x = foreground.localScale.y = 5;
                this.scene.addChild(foreground);
                foreground.markDirty();
                foreground.updateWorldTran();
                var mesh = foreground.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("quad");
                mesh.mesh = (smesh);
                var renderer = foreground.gameObject.addComponent("meshRenderer");
                var meshRender = renderer;
                var sh = this.app.getAssetMgr().getShader("particles_add.shader.json");
                if (sh != null) {
                    meshRender.materials = [];
                    meshRender.materials.push(new m4m.framework.material());
                    meshRender.materials[0].setShader(sh);
                    var texture = this.app.getAssetMgr().getAssetByName("trailtest2.png");
                    meshRender.materials[0].setTexture("_Main_Tex", texture);
                }
                this.foreground = foreground;
            }
        };
        test_blend.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var assetMgr = app.getAssetMgr();
            util.loadShader(assetMgr)
                .then(function () { return util.loadTextures(["".concat(resRootPath, "texture/zg256.png"), "".concat(resRootPath, "texture/trailtest2.png")], assetMgr); })
                .then(function () { return _this.addplane(); })
                .then(function () { return util.addCamera(_this.scene); });
        };
        test_blend.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            if (this.background != undefined) {
                var x = Math.cos(this.timer * 1);
                var y = Math.sin(this.timer * 1);
                this.background.localTranslate.x = 1.5 * x;
                this.background.localTranslate.y = 1.5 * y;
                // this.cube.markDirty();
                // m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer * 20, this.background.localRotate);
                this.background.markDirty();
            }
        };
        return test_blend;
    }());
    t_1.test_blend = test_blend;
})(t || (t = {}));
/**
 * 粒子系統示例
 */
var test_ETC1_KTX = /** @class */ (function () {
    function test_ETC1_KTX() {
        this.ry = 0;
    }
    test_ETC1_KTX.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var ext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ext = app.webgl.getExtension('WEBGL_compressed_texture_etc1');
                        if (!ext) {
                            alert("\u9700\u8981\u4F7F\u7528Android\u5E73\u53F0\u624D\u80FD\u8FD0\u884C\uFF01");
                            // return;
                        }
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.astMgr = this.app.getAssetMgr();
                        m4m.framework.assetMgr.openGuid = false;
                        // await demoTool.loadbySync(`res_etc1/shader/shader.assetbundle.json`, this.astMgr);
                        // await demoTool.loadbySync(`${resRootPath}shader/shader.assetbundle.json`, this.astMgr);
                        return [4 /*yield*/, demoTool.loadbySync("res_etc1/etc1_shader/shader.assetbundle.json", this.astMgr)];
                    case 1:
                        // await demoTool.loadbySync(`res_etc1/shader/shader.assetbundle.json`, this.astMgr);
                        // await demoTool.loadbySync(`${resRootPath}shader/shader.assetbundle.json`, this.astMgr);
                        _a.sent();
                        //
                        this.init();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_ETC1_KTX.prototype.init = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 1000;
        this.camera.fov = Math.PI * 2 / 3;
        this.camera.backgroundColor = new m4m.math.color(0.2784, 0.2784, 0.2784, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        this.loadPrefabs();
    };
    test_ETC1_KTX.prototype.loadPrefabs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, cubeP, cubeTran;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = "test_ktx";
                        return [4 /*yield*/, demoTool.loadbySync("res/prefabs/".concat(res, "/").concat(res, ".assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        cubeP = this.astMgr.getAssetByName("".concat(res, ".prefab.json"), "".concat(res, ".assetbundle.json"));
                        cubeTran = this.transform = cubeP.getCloneTrans();
                        cubeTran.localPosition.x = 0;
                        cubeTran.localPosition.y = 0;
                        cubeTran.localPosition.z = 0;
                        cubeTran.localScale.x = 8;
                        cubeTran.localScale.y = 8;
                        cubeTran.localScale.z = 8;
                        this.scene.addChild(cubeTran);
                        return [2 /*return*/];
                }
            });
        });
    };
    test_ETC1_KTX.prototype.update = function (delta) {
        if (!this.transform)
            return;
        //圆柱朝向
        m4m.math.quatFromEulerAngles(0, this.ry, 0, this.transform.localRotate);
        this.ry++;
    };
    return test_ETC1_KTX;
}());
var test_fakepbr = /** @class */ (function () {
    function test_fakepbr() {
        this.timer = 0;
    }
    test_fakepbr.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/fakepbr/zhanshen.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("zhanshen.prefab.json");
                        _this.baihu = _prefab.getCloneTrans();
                        _this.scene.addChild(_this.baihu);
                        objCam.lookat(_this.baihu);
                        objCam.markDirty();
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 0, -5);
        objCam.markDirty(); //标记为需要刷新
        {
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
        }
        {
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light2 = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
        }
    };
    test_fakepbr.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        var objCam = this.camera.gameObject.transform;
        objCam.localTranslate = new m4m.math.vector3(x2 * 2, 2, -z2 * 2);
        if (this.baihu) {
            objCam.lookatPoint(new m4m.math.vector3(0, 1.5, 0));
            objCam.markDirty(); //标记为需要刷新
        }
        if (this.light != null) {
            var objlight = this.light.gameObject.transform;
            objlight.localTranslate = new m4m.math.vector3(x * 5, 3, z * 5);
            //     // objlight.markDirty();
            //     objlight.updateWorldTran();
            objlight.lookatPoint(new m4m.math.vector3(0, 0, 0));
            var objlight2 = this.light.gameObject.transform;
            objlight2.localTranslate = new m4m.math.vector3(z * 5, 10, x * 5);
            objlight2.lookatPoint(new m4m.math.vector3(0, 0, 0));
            //     let lightPos = new m4m.math.vector4(x * 5, 3, z * 5,1.0);
            //     this.cuber.materials[0].setVector4("lightpos",lightPos);
            //     let eyePos = new m4m.math.vector4(x2 * 10, 2.25, -z2 * 10);
            //     this.cuber.materials[0].setVector4("eyepos",eyePos);
        }
    };
    return test_fakepbr;
}());
var test_form = /** @class */ (function () {
    function test_form() {
    }
    test_form.prototype.start = function (app) {
        console.log("test_form onStart");
        if (!test_form.instance)
            test_form.instance = this;
        console.log("test_form onStart");
        //this.app = app;  
        var request = new XMLHttpRequest(); //建立request请求
        request.open('post', 'http://127.0.0.1:81/examples/engineExample/server.php'); //发送对象是server.php 发送post
        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); //请求头 默认即可
        var width = 4;
        var height = 210;
        var name = "210.data";
        var data = [1.0, 2.0, 3.0, 4.0];
        var szParam = "width=" + width + "&height=" + height + "&name=" + name + "&data=" + data;
        request.send(szParam);
        //确认接收消息
        request.onreadystatechange = function () {
            // readyState=4为php收到并返回值 status为返回字段为200火304
            if (request.readyState == 4 && (request.status == 200 || request.status == 304)) {
                //弹出窗口显示php返回的值
                alert(request.responseText);
            }
            ;
        };
    };
    test_form.prototype.update = function (delta) {
    };
    return test_form;
}());
var test_gltf_animation = /** @class */ (function () {
    function test_gltf_animation() {
        this.taskmgr = new m4m.framework.taskMgr();
    }
    test_gltf_animation.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    test_gltf_animation.prototype.loadLongPrefab = function (laststate, state) {
        var _this = this;
        var settring = ["elong", "Run"];
        // let settring = ["MutantWalking", "001"];
        this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/").concat(settring[0], ".glb"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                var _prefab = _this.app.getAssetMgr().getAssetByName("".concat(settring[0], ".glb"));
                _prefab.load(_this.app.getAssetMgr(), _this.app.webgl, "".concat(resRootPath, "pbrRes"), null, null, null)
                    .then(function (res) {
                    _this.dragon = res;
                    var s = res.localScale;
                    s.x *= -1;
                    res.localScale = s;
                    _this.scene.addChild(res);
                    _this.dragon.markDirty();
                    _this.camTran = _this.dragon.find("Dummy001");
                    // let ap = this.dragon.gameObject.getComponentsInChildren("animation")[0] as m4m.framework.animation;
                    // ap.play(settring[1]);
                    state.finish = true;
                });
            }
        });
    };
    test_gltf_animation.prototype.addCamera = function (laststate, state) {
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10000;
        this.camera.backgroundColor = new m4m.math.color(0.11, 0.11, 0.11, 1.0);
        objCam.localTranslate = new m4m.math.vector3(0, 0, -30);
        // CameraController.instance().init(this.app, this.camera);
        objCam.markDirty(); //标记为需要刷新
        //相机控制
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
        var tranLight = new m4m.framework.transform();
        tranLight.name = "light";
        this.scene.addChild(tranLight);
        this.light = tranLight.gameObject.addComponent("light");
        this.light.type = m4m.framework.LightTypeEnum.Direction;
        tranLight.localTranslate.x = 5;
        tranLight.localTranslate.y = 5;
        tranLight.localTranslate.z = -5;
        tranLight.lookatPoint(new m4m.math.vector3(0, 0, 0));
        tranLight.markDirty();
        state.finish = true;
    };
    test_gltf_animation.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        this.taskmgr.addTaskCall(this.loadShader.bind(this));
        this.taskmgr.addTaskCall(this.loadLongPrefab.bind(this));
        // this.taskmgr.addTaskCall(this.loadScene.bind(this));
        this.taskmgr.addTaskCall(this.addCamera.bind(this));
    };
    test_gltf_animation.prototype.update = function (delta) {
        this.taskmgr.move(delta);
    };
    return test_gltf_animation;
}());
var test_keyFrameAni = /** @class */ (function () {
    function test_keyFrameAni() {
        this.taskMgr = new m4m.framework.taskMgr();
    }
    test_keyFrameAni.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = this.app.getScene();
        this.addCamera();
        util.loadShader(this.app.getAssetMgr())
            .then(function () { return _this.loadAsset(); })
            .then(function () { return _this.addbtns(); });
    };
    test_keyFrameAni.prototype.addCamera = function () {
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        this.cameraNode = objCam;
        this.scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        camera.near = 0.01;
        camera.far = 10000;
        CameraController.instance().init(this.app, camera);
    };
    test_keyFrameAni.prototype.loadAsset = function () {
        var _this = this;
        return util.loadModel(this.app.getAssetMgr(), "PF_PlayerSharkAlien")
            .then(function (prefab) {
            var ins = prefab.getCloneTrans();
            _this.ins = ins;
            var comps = ins.gameObject.getComponentsInChildren('f4skinnedMeshRenderer');
            comps.forEach(function (item) { return item.materials[0].setShader(_this.app.getAssetMgr().getShader("f4skin.shader.json")); });
            _this.scene.addChild(ins);
            _this.cameraNode.lookat(ins);
            _this.cameraNode.markDirty();
        });
    };
    test_keyFrameAni.prototype.addbtns = function () {
        var _this = this;
        this.addbtn("play", 10, 100, function () {
            var aniPlayer = _this.ins.gameObject.getComponentsInChildren("keyFrameAniPlayer")[0];
            var cName = aniPlayer.clips[0].getName();
            aniPlayer.play(cName);
        });
        this.addbtn("stop", 10, 150, function () {
            var aniPlayer = _this.ins.gameObject.getComponentsInChildren("keyFrameAniPlayer")[0];
            aniPlayer.stop();
        });
        this.addbtn("rewind", 10, 200, function () {
            var aniPlayer = _this.ins.gameObject.getComponentsInChildren("keyFrameAniPlayer")[0];
            aniPlayer.rewind();
        });
    };
    test_keyFrameAni.prototype.addbtn = function (text, x, y, func) {
        var btn = document.createElement("button");
        btn.textContent = text;
        btn.onclick = function () {
            func();
        };
        btn.style.top = y + "px";
        btn.style.left = x + "px";
        btn.style.position = "absolute";
        this.app.container.appendChild(btn);
    };
    test_keyFrameAni.prototype.update = function (delta) {
        CameraController.instance().update(delta);
    };
    return test_keyFrameAni;
}());
var testLiChangeMesh = /** @class */ (function () {
    function testLiChangeMesh() {
        this.uileft = 0;
        this.timer = 0;
    }
    testLiChangeMesh.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var role;
        var role1;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/FS_01/FS_01.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("FS_01.prefab.json");
                        role = _prefab.getCloneTrans();
                        _this.scene.addChild(role);
                        role.localScale = new m4m.math.vector3(1, 1, 1);
                        role.localTranslate = new m4m.math.vector3(0, 0, 0);
                        var _aniplayer = role.gameObject.getComponent("aniplayer");
                        _aniplayer.autoplay = true;
                        _this.cube = role;
                        if (role1 != null) {
                            // this.createChangeBtn(role, role1, o2d, "body_01", "body_002");
                            _this.createChangeBtn(role, role1, o2d, "feet", "feet");
                            // this.createChangeBtn(role, role1, o2d, "hand_01", "hand_002");
                            // this.createChangeBtn(role, role1, o2d, "head_01", "head_002");
                            // this.createChangeBtn(role, role1, o2d, "Leg_01", "leg_002");
                        }
                    }
                });
                _this.app.getAssetMgr().load("res/prefabs/FS_002/FS_002.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("FS_002.prefab.json");
                        role1 = _prefab.getCloneTrans();
                        // this.scene.addChild(role1);
                        // role1.localScale = new m4m.math.vector3(1, 1, 1);
                        // role1.localTranslate = new m4m.math.vector3(2, 0, 0);
                        if (role != null) {
                            // this.createChangeBtn(role, role1, o2d, "body_01", "body_002");
                            _this.createChangeBtn(role, role1, o2d, "feet", "feet");
                            // this.createChangeBtn(role, role1, o2d, "hand_01", "hand_002");
                            // this.createChangeBtn(role, role1, o2d, "head_01", "head_002");
                            // this.createChangeBtn(role, role1, o2d, "Leg_01", "leg_002");
                        }
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        var o2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(o2d);
    };
    testLiChangeMesh.prototype.createChangeBtn = function (role, role1, o2d, part, part2) {
        var _this = this;
        var t2d_9 = new m4m.framework.transform2D();
        t2d_9.width = 150;
        t2d_9.height = 50;
        t2d_9.pivot.x = 0;
        t2d_9.pivot.y = 0;
        t2d_9.localTranslate.x = this.uileft;
        t2d_9.localTranslate.y = 300;
        var btn = t2d_9.addComponent("button");
        var img9 = t2d_9.addComponent("image2D");
        img9.imageType = m4m.framework.ImageType.Sliced;
        btn.targetImage = img9;
        btn.transition = m4m.framework.TransitionType.ColorTint; //颜色变换
        var role_part;
        var role1_part;
        btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
            if (role_part == null) {
                var role_skinMeshRenders = role.gameObject.getComponentsInChildren("skinnedMeshRenderer");
                var role1_skinMeshRenders = role1.gameObject.getComponentsInChildren("skinnedMeshRenderer");
                for (var key in role_skinMeshRenders) {
                    if (role_skinMeshRenders[key].gameObject.getName().indexOf("_" + part) >= 0) {
                        role_part = role_skinMeshRenders[key];
                    }
                }
                for (var key in role1_skinMeshRenders) {
                    if (role1_skinMeshRenders[key].gameObject.getName().indexOf("_" + part2) >= 0) {
                        role1_part = role1_skinMeshRenders[key];
                    }
                }
            }
            var role_part_parent = role_part.gameObject.transform.parent;
            role1_part.gameObject.transform.parent.addChild(role_part.gameObject.transform);
            role_part_parent.addChild(role1_part.gameObject.transform);
            var role_part_player = role_part.player;
            role_part._player = role1_part.player;
            role1_part._player = role_part_player;
        }, this);
        o2d.addChild(t2d_9);
        var lab = new m4m.framework.transform2D();
        lab.name = "lab111";
        lab.width = 150;
        lab.height = 50;
        lab.pivot.x = 0;
        lab.pivot.y = 0;
        lab.markDirty();
        var label = lab.addComponent("label");
        label.text = "换" + part;
        label.fontsize = 25;
        label.color = new m4m.math.color(1, 0, 0, 1);
        t2d_9.addChild(lab);
        this.app.getAssetMgr().load("res/uisprite.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                var texture = _this.app.getAssetMgr().getAssetByName("uisprite.png");
                img9.sprite = _this.app.getAssetMgr().getDefaultSprite("grid_sprite");
            }
        });
        this.app.getAssetMgr().load("res/STXINGKA.TTF.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.app.getAssetMgr().load("res/resources/STXINGKA.font.json", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish)
                        label.font = _this.app.getAssetMgr().getAssetByName("STXINGKA.font.json"); //;
                });
            }
        });
        this.uileft += 150;
    };
    testLiChangeMesh.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        var objCam = this.camera.gameObject.transform;
        objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        if (this.cube != null) {
            objCam.lookat(this.cube);
            objCam.markDirty(); //标记为需要刷新
            objCam.updateWorldTran();
        }
    };
    return testLiChangeMesh;
}());
var t;
(function (t) {
    var test_rendertexture = /** @class */ (function () {
        function test_rendertexture() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        test_rendertexture.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                state.finish = true;
            });
        };
        test_rendertexture.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_rendertexture.prototype.initscene = function (laststate, state) {
            {
                //camera1
                var objCam = new m4m.framework.transform();
                objCam.name = "cam_show";
                this.scene.addChild(objCam);
                this.showcamera = objCam.gameObject.addComponent("camera");
                this.showcamera.order = 0;
                this.showcamera.near = 0.01;
                this.showcamera.far = 30;
                this.showcamera.fov = Math.PI * 0.3;
                objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty(); //鏍囪涓洪渶瑕佸埛鏂?
            }
            {
                var o2ds = new m4m.framework.overlay2D();
                this.showcamera.addOverLay(o2ds);
                { //overlay1
                    var t2d = new m4m.framework.transform2D();
                    t2d.name = "ceng1";
                    t2d.localTranslate.x = 200;
                    t2d.localTranslate.y = 200;
                    t2d.width = 300;
                    t2d.height = 300;
                    t2d.pivot.x = 0;
                    t2d.pivot.y = 0;
                    t2d.markDirty();
                    var rawiamge = t2d.addComponent("rawImage2D");
                    rawiamge.image = this.scene.app.getAssetMgr().getAssetByName("zg256.png");
                    o2ds.addChild(t2d);
                }
                {
                    var cube1 = new m4m.framework.transform();
                    cube1.name = "cube1";
                    this.scene.addChild(cube1);
                    cube1.localScale.x = 8;
                    cube1.localScale.y = 1;
                    cube1.localScale.z = 1;
                    cube1.markDirty();
                    var mesh1 = cube1.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh1.mesh = (smesh);
                    var renderer = cube1.gameObject.addComponent("meshRenderer");
                }
            }
            state.finish = true;
        };
        test_rendertexture.prototype.add3dmodelbeforeUi = function (laststate, state) {
            {
                var modelcam = new m4m.framework.transform();
                modelcam.name = "modelcam";
                this.scene.addChild(modelcam);
                this.wath_camer = modelcam.gameObject.addComponent("camera");
                //--------------------------------重要设置-----------------------------------------
                this.wath_camer.order = 1; //这个看向模型的相机的order需要高于场景相机
                this.wath_camer.clearOption_Color = false;
                this.wath_camer.clearOption_Depth = true;
                this.wath_camer.CullingMask = m4m.framework.CullingMask.modelbeforeui | m4m.framework.CullingMask.ui;
                //--------------------------------------------------------------------------------------
                // this.wath_camer.near = 0.01;
                // this.wath_camer.far = 30;
                // this.wath_camer.fov = Math.PI * 0.3;
                modelcam.localTranslate = new m4m.math.vector3(0, 10, -10);
                modelcam.lookatPoint(new m4m.math.vector3(0, 0, 0)); //相机要看向你想看到的3d模型
                modelcam.markDirty();
            }
            { //加3d模型，用特定shader
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                this.scene.addChild(cube);
                cube.localScale.x = 3;
                cube.localScale.y = 3;
                cube.localScale.z = 3;
                cube.markDirty();
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                renderer.renderLayer = m4m.framework.CullingMask.modelbeforeui;
                var cuber = renderer;
                //"shader/def3dbeforeui"
                //"def/defui"
                //"diffuse.shader.json"
                this.sh = this.app.getAssetMgr().getShader("diffuse.shader.json"); //3d模型要用这个shader
                if (this.sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(this.sh); //
                    var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
                this.target = cube;
                { //加ui，如果需要在模型上层显示ui
                    var o2d1 = new m4m.framework.overlay2D();
                    this.wath_camer.addOverLay(o2d1);
                    { //
                        var t2d = new m4m.framework.transform2D();
                        t2d.name = "ceng2";
                        t2d.localTranslate.x = 300;
                        t2d.localTranslate.y = 100;
                        t2d.width = 150;
                        t2d.height = 150;
                        t2d.pivot.x = 0;
                        t2d.pivot.y = 0;
                        t2d.markDirty();
                        var rawiamge = t2d.addComponent("rawImage2D");
                        rawiamge.image = this.scene.app.getAssetMgr().getAssetByName("zg256.png");
                        o2d1.addChild(t2d);
                    }
                }
            }
            state.finish = true;
        };
        test_rendertexture.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.initscene.bind(this));
            this.taskmgr.addTaskCall(this.add3dmodelbeforeUi.bind(this));
        };
        test_rendertexture.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            if (this.target == undefined)
                return;
            // if (this.show_cube == undefined) return;
            this.timer += delta;
            m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer * 3, this.target.localRotate);
            this.target.markDirty();
        };
        return test_rendertexture;
    }());
    t.test_rendertexture = test_rendertexture;
})(t || (t = {}));
var test_loadCompressUseAssetbundle = /** @class */ (function () {
    function test_loadCompressUseAssetbundle() {
    }
    test_loadCompressUseAssetbundle.prototype.start = function (app) {
        var _this = this;
        console.log("i see you are a dog!");
        this.app = app;
        this.scene = this.app.getScene();
        var url = "res/prefabs/0001_ss_female/";
        var name = "0001_ss_female";
        var end = ".assetbundle.json";
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().loadCompressBundle(url + name + end, function (s) {
                    console.error("compressTextLoaded = " + s.compressTextLoaded);
                    console.error("progress = " + s.progress);
                    console.error("totalByteLength = " + s.totalByteLength);
                    console.error("curByteLength = " + s.curByteLength);
                });
            }
        });
    };
    test_loadCompressUseAssetbundle.prototype.update = function (delta) {
    };
    return test_loadCompressUseAssetbundle;
}());
var test_load_draco = /** @class */ (function () {
    function test_load_draco() {
        this.AttributeIDs = {
            position: 'POSITION',
            normal: 'NORMAL',
            color: 'COLOR',
            uv: 'TEX_COORD'
        };
        this.AttributeTypes = {
            position: Float32Array,
            normal: Float32Array,
            color: Float32Array,
            uv: Float32Array
        };
    }
    test_load_draco.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var scene, objCam, cam, hoverc, lNdoe, light, _mesh, model, mf, mr, mat, sh;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        scene = app.getScene();
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        cam = objCam.gameObject.addComponent("camera");
                        cam.near = 0.01;
                        cam.far = 120;
                        cam.fov = Math.PI * 0.3;
                        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 45;
                        hoverc.distance = 20;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                        lNdoe = new m4m.framework.transform();
                        light = lNdoe.gameObject.addComponent("light");
                        light.type = m4m.framework.LightTypeEnum.Direction;
                        scene.addChild(lNdoe);
                        //加载shader包
                        return [4 /*yield*/, util.loadShader(app.getAssetMgr())];
                    case 1:
                        //加载shader包
                        _a.sent();
                        //------------------------------------------------------------
                        //加载draco JS
                        return [4 /*yield*/, util.loadJSLib("lib/draco_decoder.js")];
                    case 2:
                        //------------------------------------------------------------
                        //加载draco JS
                        _a.sent();
                        return [4 /*yield*/, this.loadDraco("".concat(resRootPath, "draco/ring.drc"))];
                    case 3:
                        _mesh = _a.sent();
                        model = new m4m.framework.transform();
                        model.name = "test Draco";
                        m4m.math.vec3ScaleByNum(model.localScale, 0.1, model.localScale);
                        mf = model.gameObject.addComponent("meshFilter");
                        mf.mesh = _mesh;
                        mr = model.gameObject.addComponent("meshRenderer");
                        mat = mr.materials[0] = new m4m.framework.material();
                        sh = app.getAssetMgr().getShader("diffuse_bothside.shader.json");
                        mat.setShader(sh);
                        //加到场景
                        scene.addChild(model);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 创建 引擎 mesh资源
     * @param index
     * @param attributes
     * @param resName
     */
    test_load_draco.prototype.makeMesh = function (index, attributes, resName) {
        if (resName === void 0) { resName = "dracoMesh"; }
        var webgl = m4m.framework.sceneMgr.app.webgl;
        // let fileName = fileUrl;
        // let _idx = fileUrl.lastIndexOf("/");
        // if (_idx != -1) { fileName = fileUrl.substring(_idx + 1); }
        // const outMesh = new m4m.framework.mesh(fileName);
        var outMesh = new m4m.framework.mesh();
        var meshData = outMesh.data = new m4m.render.meshData();
        var vfs = 0;
        var vLen = 0;
        var vIdxMap = {};
        //收集 顶点格式
        for (var i = 0, len = attributes.length; i < len; i++) {
            var att = attributes[i];
            var _vf = void 0;
            switch (att.name) {
                case "position":
                    meshData.pos = [];
                    _vf = m4m.render.VertexFormatMask.Position;
                    vLen = att.array.length / 3;
                    break;
                case "normal":
                    _vf = m4m.render.VertexFormatMask.Normal;
                    meshData.normal = [];
                    break;
                case "color":
                    _vf = m4m.render.VertexFormatMask.Color;
                    meshData.color = [];
                    break;
                case "uv":
                    _vf = m4m.render.VertexFormatMask.UV0;
                    meshData.uv = [];
                    break;
            }
            vfs |= _vf;
            vIdxMap[_vf] = i;
        }
        meshData.originVF = vfs;
        //所有 顶点数据 填入  meshData
        for (var i = 0; i < vLen; i++) {
            if (vfs & m4m.render.VertexFormatMask.Position) {
                var att = attributes[vIdxMap[m4m.render.VertexFormatMask.Position]];
                var arr = att.array;
                var offset = i * 3;
                meshData.pos.push(new m4m.math.vector3(arr[0 + offset], arr[1 + offset], arr[2 + offset]));
            }
            if (vfs & m4m.render.VertexFormatMask.Normal) {
                var att = attributes[vIdxMap[m4m.render.VertexFormatMask.Normal]];
                var arr = att.array;
                var offset = i * 3;
                meshData.normal.push(new m4m.math.vector3(arr[0 + offset], arr[1 + offset], arr[2 + offset]));
            }
            if (vfs & m4m.render.VertexFormatMask.Color) {
                var att = attributes[vIdxMap[m4m.render.VertexFormatMask.Color]];
                var arr = att.array;
                var offset = i * 4;
                meshData.color.push(new m4m.math.color(arr[0 + offset], arr[1 + offset], arr[2 + offset], arr[3 + offset]));
            }
            if (vfs & m4m.render.VertexFormatMask.UV0) {
                var att = attributes[vIdxMap[m4m.render.VertexFormatMask.UV0]];
                var arr = att.array;
                var offset = i * 2;
                meshData.uv.push(new m4m.math.vector2(arr[0 + offset], arr[1 + offset]));
            }
        }
        //三角面索引 处理
        var triIndexArr = index.array;
        var _triIndexNums = meshData.trisindex = [];
        for (var i = 0, len = triIndexArr.length / 3; i < len; i++) {
            var offset = i * 3;
            _triIndexNums.push(triIndexArr[0 + offset], triIndexArr[1 + offset], triIndexArr[2 + offset]);
        }
        //加一个 submesh
        var _subMeshInfo = new m4m.framework.subMeshInfo();
        outMesh.submesh.push(_subMeshInfo);
        _subMeshInfo.size = _triIndexNums.length;
        _subMeshInfo.start = 0;
        _subMeshInfo.matIndex = 0;
        //glMesh 处理 设置webgl状态 将数据设置到 GPU
        var glMesh = outMesh.glMesh = new m4m.render.glMesh();
        var vertexs = meshData.genVertexDataArray(meshData.originVF);
        var indices = meshData.genIndexDataArray();
        glMesh.initBuffer(webgl, meshData.originVF, meshData.pos.length);
        glMesh.uploadVertexData(webgl, vertexs);
        glMesh.addIndex(webgl, indices.length);
        glMesh.uploadIndexData(webgl, 0, indices);
        glMesh.initVAO();
        return outMesh;
    };
    /**
     * 加载draco 格式mesh
     * @param fileUrl draco文件
     * @returns mesh
     */
    test_load_draco.prototype.loadDraco = function (fileUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var buf, u8Buf, draco, buffer, decoder, geometryType, outputGeometry, status, attributes, attName, attType, attributeID, attribute, decodeAtt, index, fileName, _idx, outMesh;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, util.loadArrayBuffer(fileUrl)];
                    case 1:
                        buf = _a.sent();
                        u8Buf = new Uint8Array(buf);
                        return [4 /*yield*/, globalThis.DracoDecoderModule()];
                    case 2:
                        draco = _a.sent();
                        buffer = new draco.DecoderBuffer();
                        buffer.Init(u8Buf, u8Buf.length);
                        decoder = new draco.Decoder();
                        geometryType = decoder.GetEncodedGeometryType(buffer);
                        if (geometryType == draco.TRIANGULAR_MESH) {
                            outputGeometry = new draco.Mesh();
                            status = decoder.DecodeBufferToMesh(buffer, outputGeometry);
                        }
                        else {
                            outputGeometry = new draco.PointCloud();
                            status = decoder.DecodeBufferToPointCloud(buffer, outputGeometry);
                        }
                        //检查解码解析是否成功
                        if (!status.ok() || status.ptr === 0) {
                            throw new Error("draco \u89E3\u7801\u5931\u8D25 URL : ".concat(buf, ",error: ").concat(status.error_msg()));
                        }
                        attributes = [];
                        //收集 所有的 顶点 attributes.
                        for (attName in this.AttributeIDs) {
                            attType = this.AttributeTypes[attName];
                            attributeID = decoder.GetAttributeId(outputGeometry, draco[this.AttributeIDs[attName]]);
                            ;
                            if (attributeID === -1)
                                continue; //不包含该att
                            attribute = decoder.GetAttribute(outputGeometry, attributeID);
                            decodeAtt = this.getDecodeAttribute(draco, decoder, outputGeometry, attName, attType, attribute);
                            attributes.push(decodeAtt);
                        }
                        //收集 index
                        if (geometryType == draco.TRIANGULAR_MESH) {
                            index = this.getDecodeIndex(draco, decoder, outputGeometry);
                        }
                        //销毁draco
                        draco.destroy(outputGeometry);
                        draco.destroy(decoder);
                        draco.destroy(buffer);
                        fileName = fileUrl;
                        _idx = fileUrl.lastIndexOf("/");
                        if (_idx != -1) {
                            fileName = fileUrl.substring(_idx + 1);
                        }
                        outMesh = this.makeMesh(index, attributes, fileName);
                        return [2 /*return*/, outMesh];
                }
            });
        });
    };
    test_load_draco.prototype.getDecodeIndex = function (draco, decoder, dracoGeometry) {
        var numFaces = dracoGeometry.num_faces();
        var numIndices = numFaces * 3;
        var byteLength = numIndices * 4;
        var ptr = draco._malloc(byteLength);
        decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);
        var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();
        draco._free(ptr);
        return { array: index, itemSize: 1 };
    };
    test_load_draco.prototype.getDecodeAttribute = function (draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {
        var numComponents = attribute.num_components();
        var numPoints = dracoGeometry.num_points();
        var numValues = numPoints * numComponents;
        var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;
        var dataType = this.getDracoDataType(draco, attributeType);
        var ptr = draco._malloc(byteLength);
        decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);
        var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();
        draco._free(ptr);
        return {
            name: attributeName,
            array: array,
            itemSize: numComponents
        };
    };
    test_load_draco.prototype.getDracoDataType = function (draco, attributeType) {
        switch (attributeType) {
            case Float32Array: return draco.DT_FLOAT32;
            case Int8Array: return draco.DT_INT8;
            case Int16Array: return draco.DT_INT16;
            case Int32Array: return draco.DT_INT32;
            case Uint8Array: return draco.DT_UINT8;
            case Uint16Array: return draco.DT_UINT16;
            case Uint32Array: return draco.DT_UINT32;
        }
    };
    test_load_draco.prototype.update = function (delta) {
    };
    return test_load_draco;
}());
var demo;
(function (demo) {
    var DragonTest = /** @class */ (function () {
        function DragonTest() {
            this.taskmgr = new m4m.framework.taskMgr();
        }
        DragonTest.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
            });
        };
        DragonTest.prototype.loadLongPrefab = function (laststate, state) {
            var _this = this;
            var resName = "long";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(resName, "/").concat(resName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("".concat(resName, ".prefab.json"), "".concat(resName, ".assetbundle.json"));
                    _this.dragon = _prefab.getCloneTrans();
                    _this.scene.addChild(_this.dragon);
                    _this.dragon.markDirty();
                    _this.camTran = _this.dragon.find("Dummy001");
                    var ap_1 = _this.dragon.gameObject.getComponent("aniplayer");
                    var list = ap_1.awaitLoadClipNames();
                    var resPath = "".concat(resRootPath, "prefab/").concat(resName, "/resources/");
                    if (list.length > 0) {
                        var cname_1 = list[0];
                        ap_1.addClipByNameLoad(_this.app.getAssetMgr(), resPath, cname_1, function (sta, clipName) {
                            if (sta.isfinish) {
                                var clip = ap_1.getClip(cname_1);
                                ap_1.play(cname_1);
                            }
                        });
                    }
                    state.finish = true;
                }
            });
        };
        DragonTest.prototype.addCameraAndLight = function (laststate, state) {
            var tranCam = new m4m.framework.transform();
            tranCam.name = "Cam";
            this.camTran.addChild(tranCam);
            tranCam.localEulerAngles = new m4m.math.vector3(0, 270, 0);
            this.camera = tranCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 1000;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3);
            tranCam.markDirty();
            var tranLight = new m4m.framework.transform();
            tranLight.name = "light";
            this.scene.addChild(tranLight);
            this.light = tranLight.gameObject.addComponent("light");
            this.light.type = m4m.framework.LightTypeEnum.Direction;
            tranLight.localTranslate.x = 5;
            tranLight.localTranslate.y = 5;
            tranLight.localTranslate.z = -5;
            tranLight.lookatPoint(new m4m.math.vector3(0, 0, 0));
            tranLight.markDirty();
            state.finish = true;
        };
        DragonTest.prototype.start = function (app) {
            this.app = app;
            this.scene = app.getScene();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadLongPrefab.bind(this));
            // this.taskmgr.addTaskCall(this.loadScene.bind(this));
            this.taskmgr.addTaskCall(this.addCameraAndLight.bind(this));
        };
        DragonTest.prototype.update = function (delta) {
            this.taskmgr.move(delta);
        };
        return DragonTest;
    }());
    demo.DragonTest = DragonTest;
})(demo || (demo = {}));
var test_navMesh = /** @class */ (function () {
    function test_navMesh() {
        this.cubesize = 0.5;
        this.pos = [];
        this.points = [];
        this.timer = 0;
        this.bere = false;
        this.pointDown = false;
    }
    test_navMesh.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.inputMgr = this.app.getInputMgr();
        this.assetMgr = app.getAssetMgr();
        var names = ["MainCity_", "city"];
        var name = names[0];
        this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.loadScene(name);
            }
        });
        //添加一个摄像机
        //initCamera
        var objCam = new m4m.framework.transform();
        app.getScene().addChild(objCam);
        var cam = objCam.gameObject.addComponent("camera");
        this.camera = cam;
        cam.near = 0.01;
        cam.far = 500;
        cam.fov = Math.PI * 0.3;
        objCam.localTranslate = new m4m.math.vector3(52, 48, 6);
        //相机控制
        var hoverc = cam.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 163;
        hoverc.tiltAngle = 16.5;
        hoverc.distance = 1;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(43, 40, 15);
        //navMgr init
        this.navmeshMgr = m4m.framework.NavMeshLoadManager.Instance;
    };
    test_navMesh.prototype.loadScene = function (assetName, isCompress) {
        var _this = this;
        if (isCompress === void 0) { isCompress = false; }
        var abName = "".concat(assetName, ".assetbundle.json");
        var addScene = function () {
            var _scene = _this.app.getAssetMgr().getAssetByName(assetName + ".scene.json", abName);
            var _root = _scene.getSceneRoot();
            _this.scene.addChild(_root);
            // _root.localTranslate = new m4m.math.vector3(-60, -30, 26.23);
            _root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
            _root.markDirty();
            _this.app.getScene().lightmaps = [];
            _scene.useLightMap(_this.app.getScene());
            _scene.useFog(_this.app.getScene());
            _this.navmeshMgr.loadNavMesh("".concat(resRootPath, "navmesh/").concat(assetName, ".nav.json"), _this.app, function (s) {
                if (s.iserror) {
                    console.error(" ".concat(s.errs, " "));
                    return;
                }
                console.error("scene navmesh : ".concat(assetName, "  is loaded"));
                //this.navmeshMgr.showNavmesh(true);
            });
        };
        if (isCompress) {
            this.app.getAssetMgr().loadCompressBundle("".concat(resRootPath, "prefab/").concat(assetName, "/").concat(assetName, ".packs.txt"), function (s) {
                if (s.isfinish) {
                    //if (s.bundleLoadState & m4m.framework.AssetBundleLoadState.Scene && !isloaded)
                    {
                        addScene();
                    }
                }
            });
        }
        else {
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(assetName, "/").concat(abName), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                if (s1.isfinish) {
                    addScene();
                }
            });
        }
    };
    test_navMesh.prototype.pickDown = function () {
        var navTrans = this.navmeshMgr.navTrans;
        var navmesh = this.navmeshMgr.navMesh;
        if (navmesh == null)
            return;
        var inputMgr = this.app.getInputMgr();
        var ray = this.camera.creatRayByScreen(new m4m.math.vector2(inputMgr.point.x, inputMgr.point.y), this.app);
        var pickinfo = new m4m.framework.pickinfo();
        var bool = navmesh.intersects(ray, navTrans.getWorldMatrix(), pickinfo);
        if (!bool)
            return;
        // let startPos = m4m.math.pool.new_vector3();
        // m4m.math.vec3Clone(this.cube.localTranslate, startPos);
        var endPos = pickinfo.hitposition;
        console.error(endPos);
        this.pos.push(endPos);
        // let points = this.navMeshLoader.moveToPoints(startPos, endPos);
        if (this.pos.length > 1) {
            var arr = this.navmeshMgr.moveToPoints(this.pos.pop(), this.pos.pop());
            console.error(arr);
            this.pos.length = 0;
            var color = new m4m.math.color(1, 0, 0, 0.5);
            this.createAllPoint(arr.length);
            for (var i = 0; i < arr.length; i++) {
                var p = arr[i];
                this.setPoint(i, p.x, p.y, p.z, color);
            }
            this.drawLine(arr);
        }
    };
    test_navMesh.prototype.drawLine = function (points) {
        if (this.lastLine) {
            this.lastLine.gameObject.visible = false;
            this.lastLine.markDirty();
            if (this.lastLine.parent)
                this.lastLine.parent.removeChild(this.lastLine);
            this.lastLine.dispose();
        }
        var mesh = this.genMesh(points);
        this.lastLine = new m4m.framework.transform();
        var mf = this.lastLine.gameObject.addComponent("meshFilter");
        mf.mesh = mesh;
        var mr = this.lastLine.gameObject.addComponent("meshRenderer");
        var mat = mr.materials[0] = new m4m.framework.material();
        mat.setQueue(10000);
        mat.setShader(m4m.framework.sceneMgr.app.getAssetMgr().getShader("shader/defui"));
        this.lastLine.localTranslate.x = this.lastLine.localTranslate.y = this.lastLine.localTranslate.z = 0;
        this.scene.addChild(this.lastLine);
        this.lastLine.markDirty();
    };
    test_navMesh.prototype.genMesh = function (points) {
        var meshD = new m4m.render.meshData();
        meshD.pos = [];
        meshD.color = [];
        meshD.trisindex = [];
        for (var i = 0; i < points.length; i++) {
            var pos = points[i];
            meshD.pos.push(new m4m.math.vector3(pos.x, pos.y + (this.cubesize / 2), pos.z));
            meshD.trisindex.push(i);
            meshD.color.push(new m4m.math.color(1, 0, 1, 1));
        }
        var _mesh = new m4m.framework.mesh();
        _mesh.data = meshD;
        var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Color;
        var v32 = _mesh.data.genVertexDataArray(vf);
        var i16 = _mesh.data.genIndexDataArray();
        _mesh.glMesh = new m4m.render.glMesh();
        _mesh.glMesh.initBuffer(this.app.webgl, vf, _mesh.data.pos.length);
        _mesh.glMesh.uploadVertexSubData(this.app.webgl, v32);
        _mesh.glMesh.addIndex(this.app.webgl, i16.length);
        _mesh.glMesh.uploadIndexSubData(this.app.webgl, 0, i16);
        _mesh.glMesh.initVAO();
        _mesh.submesh = [];
        {
            var sm = new m4m.framework.subMeshInfo();
            sm.matIndex = 0;
            sm.useVertexIndex = 0;
            sm.start = 0;
            sm.size = i16.length;
            sm.line = true;
            _mesh.submesh.push(sm);
        }
        return _mesh;
    };
    test_navMesh.prototype.createAllPoint = function (count) {
        this.points.forEach(function (element) {
            if (element)
                element.gameObject.visible = false;
        });
        var need = count - this.points.length;
        if (need > 0) {
            for (var i = 0; i < need; i++) {
                this.generatePoint();
            }
        }
    };
    test_navMesh.prototype.setPoint = function (index, x, y, z, color) {
        var cube = this.points[index];
        cube.localTranslate.x = x;
        cube.localTranslate.y = y;
        cube.localTranslate.z = z;
        cube.markDirty();
        var mf = cube.gameObject.getComponent("meshFilter");
        if (mf.mesh.data.color == null)
            mf.mesh.data.color = [];
        mf.mesh.data.color.forEach(function (c) {
            if (c) {
                c.r = color.r;
                c.g = color.g;
                c.b = color.b;
                c.a = color.a;
            }
        });
        var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Tangent | m4m.render.VertexFormatMask.Color | m4m.render.VertexFormatMask.UV0;
        var v32 = mf.mesh.data.genVertexDataArray(vf);
        mf.mesh.glMesh.uploadVertexSubData(this.app.webgl, v32);
        cube.gameObject.visible = true;
    };
    test_navMesh.prototype.generatePoint = function () {
        var cube = new m4m.framework.transform;
        var mf = cube.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh("cube").clone();
        var mr = cube.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        mr.materials[0] = new m4m.framework.material("mat");
        mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        mr.materials[0].setTexture("_MainTex", this.assetMgr.getDefaultTexture("white"));
        this.points.push(cube);
        this.scene.addChild(cube);
        cube.localScale.x = cube.localScale.y = cube.localScale.z = this.cubesize;
    };
    test_navMesh.prototype.update = function (delta) {
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            // var ray = this.camera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
            // var pickinfo = this.scene.pick(ray);
            // if (pickinfo != null)
            // {
            //     this.movetarget = pickinfo.hitposition;
            //     console.log(this.movetarget);
            //     this.timer = 0;
            // }
            this.pickDown();
        }
        this.pointDown = this.inputMgr.point.touch;
        this.timer += delta;
        // CameraController.instance().update(delta);
        // var x = Math.sin(this.timer);
        // var z = Math.cos(this.timer);
        // var x2 = Math.sin(this.timer * 0.5);
        // var z2 = Math.cos(this.timer * 0.5);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 10, 30, z2 * 10);
        // objCam.markDirty();//标记为需要刷新
    };
    return test_navMesh;
}());
//优化size的动画加载
var test_optimize_size_animationClip = /** @class */ (function () {
    function test_optimize_size_animationClip() {
    }
    test_optimize_size_animationClip.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        m4m.framework.assetMgr.openGuid = true;
        this.app.getAssetMgr().load("./".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("./".concat(resRootPath, "prefab/elong_prefab/elong_prefab.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("elong_prefab.prefab.json", "elong_prefab.assetbundle.json");
                        var prefabObj_2 = _prefab.getCloneTrans();
                        _this.scene.addChild(prefabObj_2);
                        _this.prefab = prefabObj_2;
                        _this.app.getAssetMgr().load("./".concat(resRootPath, "prefab/elong_prefab/resources/Ready.FBAni.min.aniclip.bin"), m4m.framework.AssetTypeEnum.Aniclip, function (s) {
                            if (s.isfinish) {
                                var aps = prefabObj_2.gameObject.getComponentsInChildren("aniplayer");
                                var ap = aps[0];
                                ap.addClip(s.resstateFirst.res);
                                ap.play("Ready.FBAni.min.aniclip.bin");
                            }
                        });
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, 30);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
    };
    // cube: m4m.framework.transform;
    // cube2: m4m.framework.transform;
    // cube3: m4m.framework.transform;
    // timer: number = 0;
    test_optimize_size_animationClip.prototype.update = function (delta) {
        // this.timer += delta;
        // var x = Math.sin(this.timer);
        // var z = Math.cos(this.timer);
        // var x2 = Math.sin(this.timer * 0.1);
        // var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        // objCam.lookat(this.cube);
        // objCam.markDirty();//标记为需要刷新
        // objCam.updateWorldTran();
        if (this.prefab) {
            this.camera.gameObject.transform.lookat(this.prefab);
        }
    };
    return test_optimize_size_animationClip;
}());
//UI 组件样例
var test_pbr = /** @class */ (function () {
    function test_pbr() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.PBRPath = "res/pbrRes/";
        this.material = this.PBRPath + "meta3/";
        this.skyName = "map";
        this.iblPath = this.PBRPath + "IBL/".concat(this.skyName, "/");
    }
    test_pbr.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.localTranslate.z = -10;
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 1000;
        this.camera.backgroundColor = new m4m.math.color(0, 0, 0, 0);
        CameraController.instance().init(this.app, this.camera);
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes1.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes2.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes3.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes4.bind(this));
        this.taskmgr.addTaskCall(this.init.bind(this));
    };
    test_pbr.prototype.init = function (astState, state) {
        var temp1 = new m4m.framework.transform();
        this.scene.addChild(temp1);
        var mf = temp1.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh("sphere_quality");
        var mr = temp1.gameObject.addComponent("meshRenderer");
        mr.materials[0] = new m4m.framework.material("testmat");
        // mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        // mr.materials[0].setTexture("_MainTex",this.assetMgr.getDefaultTexture("grid"));
        //pbr
        mr.materials[0].setShader(this.assetMgr.getAssetByName("pbr.shader.json"));
        mr.materials[0].setTexture("brdf", this.assetMgr.getAssetByName("brdf.png"));
        mr.materials[0].setTexture("uv_Basecolor", this.assetMgr.getAssetByName("basecolor.png"));
        mr.materials[0].setTexture("uv_Normal", this.assetMgr.getAssetByName("normal.png"));
        mr.materials[0].setTexture("uv_MetallicRoughness", this.assetMgr.getAssetByName("metallicRoughness.png"));
        mr.materials[0].setTexture("uv_AO", this.assetMgr.getAssetByName("AO.png"));
        //sky
        var negx = this.assetMgr.getAssetByName("negx.jpg");
        var negy = this.assetMgr.getAssetByName("negy.jpg");
        var negz = this.assetMgr.getAssetByName("negz.jpg");
        var posx = this.assetMgr.getAssetByName("posx.jpg");
        var posy = this.assetMgr.getAssetByName("posy.jpg");
        var posz = this.assetMgr.getAssetByName("posz.jpg");
        var negx_1 = this.assetMgr.getAssetByName("negx_1.jpg");
        var negy_1 = this.assetMgr.getAssetByName("negy_1.jpg");
        var negz_1 = this.assetMgr.getAssetByName("negz_1.jpg");
        var posx_1 = this.assetMgr.getAssetByName("posx_1.jpg");
        var posy_1 = this.assetMgr.getAssetByName("posy_1.jpg");
        var posz_1 = this.assetMgr.getAssetByName("posz_1.jpg");
        var negx_2 = this.assetMgr.getAssetByName("negx_2.jpg");
        var negy_2 = this.assetMgr.getAssetByName("negy_2.jpg");
        var negz_2 = this.assetMgr.getAssetByName("negz_2.jpg");
        var posx_2 = this.assetMgr.getAssetByName("posx_2.jpg");
        var posy_2 = this.assetMgr.getAssetByName("posy_2.jpg");
        var posz_2 = this.assetMgr.getAssetByName("posz_2.jpg");
        var negx_3 = this.assetMgr.getAssetByName("negx_3.jpg");
        var negy_3 = this.assetMgr.getAssetByName("negy_3.jpg");
        var negz_3 = this.assetMgr.getAssetByName("negz_3.jpg");
        var posx_3 = this.assetMgr.getAssetByName("posx_3.jpg");
        var posy_3 = this.assetMgr.getAssetByName("posy_3.jpg");
        var posz_3 = this.assetMgr.getAssetByName("posz_3.jpg");
        var negx_4 = this.assetMgr.getAssetByName("negx_4.jpg");
        var negy_4 = this.assetMgr.getAssetByName("negy_4.jpg");
        var negz_4 = this.assetMgr.getAssetByName("negz_4.jpg");
        var posx_4 = this.assetMgr.getAssetByName("posx_4.jpg");
        var posy_4 = this.assetMgr.getAssetByName("posy_4.jpg");
        var posz_4 = this.assetMgr.getAssetByName("posz_4.jpg");
        var skytex = new m4m.framework.texture("skyCubeTex");
        skytex.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex.use();
        skytex.glTexture.uploadImages(negx, negy, negz, posx, posy, posz);
        var skytex1 = new m4m.framework.texture("skyCubeTex");
        skytex1.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex1.use();
        skytex1.glTexture.uploadImages(negx_1, negy_1, negz_1, posx_1, posy_1, posz_1);
        var skytex2 = new m4m.framework.texture("skyCubeTex");
        skytex2.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex2.use();
        skytex2.glTexture.uploadImages(negx_2, negy_2, negz_2, posx_2, posy_2, posz_2);
        var skytex3 = new m4m.framework.texture("skyCubeTex");
        skytex3.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex3.use();
        skytex3.glTexture.uploadImages(negx_3, negy_3, negz_3, posx_3, posy_3, posz_3);
        var skytex4 = new m4m.framework.texture("skyCubeTex");
        skytex4.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex4.use();
        skytex4.glTexture.uploadImages(negx_4, negy_4, negz_4, posx_4, posy_4, posz_4);
        mr.materials[0].setCubeTexture("u_sky", skytex);
        mr.materials[0].setCubeTexture("u_sky_1", skytex1);
        mr.materials[0].setCubeTexture("u_sky_2", skytex2);
        mr.materials[0].setCubeTexture("u_sky_3", skytex3);
        mr.materials[0].setCubeTexture("u_sky_4", skytex4);
        //cube sky
        var cubesky = new m4m.framework.transform();
        cubesky.localScale.x = cubesky.localScale.y = cubesky.localScale.z = 200;
        this.scene.addChild(cubesky);
        var mf_c = cubesky.gameObject.addComponent("meshFilter");
        mf_c.mesh = this.assetMgr.getDefaultMesh("cube");
        var mr_c = cubesky.gameObject.addComponent("meshRenderer");
        mr_c.materials[0] = new m4m.framework.material("cubeskymat");
        mr_c.materials[0].setShader(this.assetMgr.getAssetByName("skybox.shader.json"));
        // let pass = mr_c.materials[0].getShader().passes["base"][0];
        // pass.state_showface = m4m.render.ShowFaceStateEnum.CW;
        mr_c.materials[0].setCubeTexture("u_sky", skytex);
        //mr_c.materials[0].setTexture("_MainTex",this.assetMgr.getDefaultTexture("grid"));
        state.finish = true;
    };
    test_pbr.prototype.loadpbrRes = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.loadpbrRes1 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.loadpbrRes2 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.loadpbrRes3 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.loadpbrRes4 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s1) {
            if (s1.isfinish) {
                _this.assetMgr.load(_this.PBRPath + "brdf.png", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                    if (s2.isfinish) {
                        _this.assetMgr.load(_this.material + "basecolor.png", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                            if (s3.isfinish) {
                                _this.assetMgr.load(_this.material + "normal.png", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                    if (s4.isfinish) {
                                        _this.assetMgr.load(_this.material + "metallicRoughness.png", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                            if (s5.isfinish) {
                                                _this.assetMgr.load(_this.material + "AO.png", m4m.framework.AssetTypeEnum.Auto, function (s6) {
                                                    if (s6.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr.prototype.addCube = function () {
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        mesh.mesh = (this.app.getAssetMgr()).getDefaultMesh("cube");
        cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        this.cube = cube;
        cube.markDirty();
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
        cube.localTranslate.x = 1;
        cube.localTranslate.z = 1;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        mesh.mesh = (this.app.getAssetMgr()).getDefaultMesh("cube");
        cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        this.cube = cube;
        cube.markDirty();
    };
    test_pbr.prototype.update = function (delta) {
        this.taskmgr.move(delta); //推进task
        CameraController.instance().update(delta);
    };
    return test_pbr;
}());
//UI 组件样例
var test_pbr_scene = /** @class */ (function () {
    function test_pbr_scene() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.lightPos1 = new m4m.math.vector4(0.5, 0.5, 0.5, 1.0);
        this.lightPos2 = new m4m.math.vector4(10, 5, 0, 1.0);
        this.PBRPath = "res/pbrRes/";
        this.material = this.PBRPath + "meta3/";
        this.skyName = "map";
        this.iblPath = this.PBRPath + "IBL/".concat(this.skyName, "/");
        this.timer = 0;
    }
    test_pbr_scene.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.localTranslate.z = -10;
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10000;
        this.camera.backgroundColor = new m4m.math.color(0, 0, 0, 0);
        // CameraController.instance().init(this.app, this.camera);
        //相机展示控制器
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes1.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes2.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes3.bind(this));
        this.taskmgr.addTaskCall(this.loadpbrRes4.bind(this));
        this.taskmgr.addTaskCall(this.init.bind(this));
    };
    test_pbr_scene.prototype.addSphere = function (x, y, z, IBL, IBL_1, IBL_2, IBL_3, IBL_4, IBL_5, albedo, metallic, roughness) {
        var temp1 = new m4m.framework.transform();
        temp1.localTranslate.x = x;
        temp1.localTranslate.y = y;
        temp1.localTranslate.z = z;
        this.scene.addChild(temp1);
        var mf = temp1.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh("sphere_quality");
        var mr = temp1.gameObject.addComponent("meshRenderer");
        mr.materials[0] = new m4m.framework.material("testmat");
        // mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        // mr.materials[0].setTexture("_MainTex",this.assetMgr.getDefaultTexture("grid"));
        //pbr
        mr.materials[0].setShader(this.assetMgr.getAssetByName("pbr.shader.json"));
        var brdfimg = this.assetMgr.getAssetByName("brdf.png");
        var temp2d = brdfimg.glTexture;
        temp2d.getReader();
        temp2d.uploadByteArray(true, false, temp2d.width, temp2d.height, temp2d.reader.data, true);
        mr.materials[0].setTexture("brdf", this.assetMgr.getAssetByName("brdf.png"));
        // User customize
        mr.materials[0].setVector4("CustomBasecolor", albedo);
        mr.materials[0].setFloat("CustomMetallic", metallic);
        mr.materials[0].setFloat("CustomRoughness", roughness);
        // Light
        mr.materials[0].setVector4("light_1", this.lightPos1);
        mr.materials[0].setVector4("light_2", this.lightPos2);
        // External texture
        // mr.materials[0].setTexture("uv_Basecolor",this.assetMgr.getAssetByName(`basecolor.png`)as m4m.framework.texture);
        // mr.materials[0].setTexture("uv_Normal",this.assetMgr.getAssetByName(`normal.png`)as m4m.framework.texture);
        // mr.materials[0].setTexture("uv_MetallicRoughness",this.assetMgr.getAssetByName(`metallicRoughness.png`)as m4m.framework.texture);
        // mr.materials[0].setTexture("uv_AO",this.assetMgr.getAssetByName(`AO.png`)as m4m.framework.texture);
        mr.materials[0].setCubeTexture("u_sky", IBL);
        mr.materials[0].setCubeTexture("u_sky_1", IBL_1);
        mr.materials[0].setCubeTexture("u_sky_2", IBL_2);
        mr.materials[0].setCubeTexture("u_sky_3", IBL_3);
        mr.materials[0].setCubeTexture("u_sky_4", IBL_4);
        // mr.materials[0].setCubeTexture("u_sky_5",IBL_5);
    };
    test_pbr_scene.prototype.init = function (astState, state) {
        //sky
        var negx = this.assetMgr.getAssetByName("negx.jpg");
        var negy = this.assetMgr.getAssetByName("negy.jpg");
        var negz = this.assetMgr.getAssetByName("negz.jpg");
        var posx = this.assetMgr.getAssetByName("posx.jpg");
        var posy = this.assetMgr.getAssetByName("posy.jpg");
        var posz = this.assetMgr.getAssetByName("posz.jpg");
        var negx_1 = this.assetMgr.getAssetByName("negx_1.jpg");
        var negy_1 = this.assetMgr.getAssetByName("negy_1.jpg");
        var negz_1 = this.assetMgr.getAssetByName("negz_1.jpg");
        var posx_1 = this.assetMgr.getAssetByName("posx_1.jpg");
        var posy_1 = this.assetMgr.getAssetByName("posy_1.jpg");
        var posz_1 = this.assetMgr.getAssetByName("posz_1.jpg");
        var negx_2 = this.assetMgr.getAssetByName("negx_2.jpg");
        var negy_2 = this.assetMgr.getAssetByName("negy_2.jpg");
        var negz_2 = this.assetMgr.getAssetByName("negz_2.jpg");
        var posx_2 = this.assetMgr.getAssetByName("posx_2.jpg");
        var posy_2 = this.assetMgr.getAssetByName("posy_2.jpg");
        var posz_2 = this.assetMgr.getAssetByName("posz_2.jpg");
        var negx_3 = this.assetMgr.getAssetByName("negx_3.jpg");
        var negy_3 = this.assetMgr.getAssetByName("negy_3.jpg");
        var negz_3 = this.assetMgr.getAssetByName("negz_3.jpg");
        var posx_3 = this.assetMgr.getAssetByName("posx_3.jpg");
        var posy_3 = this.assetMgr.getAssetByName("posy_3.jpg");
        var posz_3 = this.assetMgr.getAssetByName("posz_3.jpg");
        var negx_4 = this.assetMgr.getAssetByName("negx_4.jpg");
        var negy_4 = this.assetMgr.getAssetByName("negy_4.jpg");
        var negz_4 = this.assetMgr.getAssetByName("negz_4.jpg");
        var posx_4 = this.assetMgr.getAssetByName("posx_4.jpg");
        var posy_4 = this.assetMgr.getAssetByName("posy_4.jpg");
        var posz_4 = this.assetMgr.getAssetByName("posz_4.jpg");
        var negx_5 = this.assetMgr.getAssetByName("negx_5.jpg");
        var negy_5 = this.assetMgr.getAssetByName("negy_5.jpg");
        var negz_5 = this.assetMgr.getAssetByName("negz_5.jpg");
        var posx_5 = this.assetMgr.getAssetByName("posx_5.jpg");
        var posy_5 = this.assetMgr.getAssetByName("posy_5.jpg");
        var posz_5 = this.assetMgr.getAssetByName("posz_5.jpg");
        var skytex = new m4m.framework.texture("skyCubeTex");
        skytex.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex.use();
        skytex.glTexture.uploadImages(negx, negy, negz, posx, posy, posz);
        var skytex1 = new m4m.framework.texture("skyCubeTex");
        skytex1.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex1.use();
        skytex1.glTexture.uploadImages(negx_1, negy_1, negz_1, posx_1, posy_1, posz_1);
        var skytex2 = new m4m.framework.texture("skyCubeTex");
        skytex2.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex2.use();
        skytex2.glTexture.uploadImages(negx_2, negy_2, negz_2, posx_2, posy_2, posz_2);
        var skytex3 = new m4m.framework.texture("skyCubeTex");
        skytex3.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex3.use();
        skytex3.glTexture.uploadImages(negx_3, negy_3, negz_3, posx_3, posy_3, posz_3);
        var skytex4 = new m4m.framework.texture("skyCubeTex");
        skytex4.glTexture = new m4m.render.glTextureCube(this.app.webgl);
        skytex4.use();
        skytex4.glTexture.uploadImages(negx_4, negy_4, negz_4, posx_4, posy_4, posz_4);
        for (var m = 1; m > 0; m -= 0.1) {
            for (var r = 1; r > 0; r -= 0.1) {
                this.addSphere(m * 60, 0, r * 60, skytex, skytex1, skytex2, skytex3, skytex4, skytex4, new m4m.math.vector4(0.5, 0.5, 0.5, 1.0), m, r);
            }
        }
        //cube sky
        var cubesky = new m4m.framework.transform();
        cubesky.localScale.x = cubesky.localScale.y = cubesky.localScale.z = 200;
        this.scene.addChild(cubesky);
        var mf_c = cubesky.gameObject.addComponent("meshFilter");
        mf_c.mesh = this.assetMgr.getDefaultMesh("cube");
        var mr_c = cubesky.gameObject.addComponent("meshRenderer");
        mr_c.materials[0] = new m4m.framework.material("cubeskymat");
        mr_c.materials[0].setShader(this.assetMgr.getAssetByName("skybox.shader.json"));
        // let pass = mr_c.materials[0].getShader().passes["base"][0];
        // pass.state_showface = m4m.render.ShowFaceStateEnum.CW;
        mr_c.materials[0].setCubeTexture("u_sky", skytex);
        //mr_c.materials[0].setTexture("_MainTex",this.assetMgr.getDefaultTexture("grid"));
        state.finish = true;
    };
    test_pbr_scene.prototype.loadpbrRes = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.loadpbrRes1 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.loadpbrRes2 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_2.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.loadpbrRes3 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_3.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.loadpbrRes4 = function (lastState, state) {
        var _this = this;
        this.assetMgr.load(this.iblPath + "negx_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.assetMgr.load(_this.iblPath + "negy_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.assetMgr.load(_this.iblPath + "negz_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.assetMgr.load(_this.iblPath + "posx_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.assetMgr.load(_this.iblPath + "posy_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.assetMgr.load(_this.iblPath + "posz_4.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s1) {
            if (s1.isfinish) {
                _this.assetMgr.load(_this.PBRPath + "brdf.png", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                    if (s2.isfinish) {
                        _this.assetMgr.load(_this.material + "basecolor.png", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                            if (s3.isfinish) {
                                _this.assetMgr.load(_this.material + "normal.png", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                    if (s4.isfinish) {
                                        _this.assetMgr.load(_this.material + "metallicRoughness.png", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                            if (s5.isfinish) {
                                                _this.assetMgr.load(_this.material + "AO.png", m4m.framework.AssetTypeEnum.Auto, function (s6) {
                                                    if (s6.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_pbr_scene.prototype.update = function (delta) {
        this.timer += delta;
        this.taskmgr.move(delta); //推进task
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        this.lightPos2.x += x;
        this.lightPos2.z += z;
        // CameraController.instance().update(delta);
    };
    return test_pbr_scene;
}());
// 性能测试 
var demo;
// 性能测试 
(function (demo) {
    var test_performance = /** @class */ (function () {
        function test_performance() {
            this.cubes = [];
            this.count = 500;
            this.all = 0;
        }
        test_performance.prototype.start = function (app) {
            this.app = app;
            this.scene = app.getScene();
            this.assetMgr = this.app.getAssetMgr();
            // this.camTran = new m4m.framework.transform();
            // this.camTran.name = "Cam";
            // this.scene.addChild(this.camTran);
            // this.camera = this.camTran.gameObject.addComponent("camera") as m4m.framework.camera;
            // this.camera.near = 0.001;
            // this.camera.far = 5000;
            // this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3);
        };
        test_performance.prototype.tryadd = function () {
            var max = 2000;
            var maxcc = 0;
            var cc = 0;
            var temp;
            while (maxcc < max) {
                var tran = new m4m.framework.transform();
                if (!temp) {
                    temp = tran;
                    this.scene.addChild(tran);
                }
                else {
                    temp.addChild(tran);
                    cc++;
                    if (cc >= 10) {
                        cc = 0;
                        temp = null;
                    }
                }
                this.cubes.push(tran);
                maxcc++;
            }
            this.all += max;
        };
        test_performance.prototype.update = function (delta) {
            if (this.count * this.count > this.all) {
                this.tryadd();
            }
            else {
                console.error(" \u6240\u6709 trans \u52A0\u8F09\u5B8C\u7562  old  ");
            }
            var c = 0;
            while (c < 1000) {
                this.randome();
                c++;
            }
        };
        test_performance.prototype.randome = function () {
            var idx = Math.floor(Math.random() * this.cubes.length);
            var cube = this.cubes[idx];
            //local 
            cube.localTranslate.x += Math.random() * 10;
            cube.localScale.x = cube.localScale.y;
            cube.localRotate.z = cube.localRotate.x;
            var temp = cube.getWorldTranslate();
            temp.y += Math.random() * 10;
            //world 
            cube.getWorldScale();
            cube.setWorldPosition(temp);
            cube.localEulerAngles.x = Math.random() * 10;
            cube.localEulerAngles = cube.localEulerAngles;
            cube.getWorldRotate();
            cube.markDirty();
        };
        return test_performance;
    }());
    demo.test_performance = test_performance;
})(demo || (demo = {}));
/** 射线碰撞 碰撞体 */
var test_pick_boxcollider = /** @class */ (function () {
    function test_pick_boxcollider() {
        this.cubesize = 0.5;
        this.goals = [];
        this.mods = [];
        this.colorMap = {};
        this.balls = [];
        this.pickLayer = 8;
        //----------- 绘制路径线段----------------
        this.points = [];
        this.timer = 0;
        this.bere = false;
        this.isAKeyDown = false;
        this.pointDown = false;
    }
    test_pick_boxcollider.prototype.start = function (app) {
        var _this = this;
        this.astMgr = app.getAssetMgr();
        m4m.framework.assetMgr.openGuid = false;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.inputMgr = this.app.getInputMgr();
        this.assetMgr = app.getAssetMgr();
        this.app.closeFps();
        //说明
        var descr = document.createElement("p");
        descr.textContent = "\u63D0\u793A: \n \u70B9\u51FB\u78B0\u649E\u6846 \u53EF\u53D1\u5C04\u5C0F\u7403\u5230\u78B0\u649E\u4F4D\u7F6E\uFF01";
        descr.style.top = 0 + "px";
        descr.style.left = 0 + "px";
        descr.style.position = "absolute";
        this.app.container.appendChild(descr);
        var names = ["MainCity_", "testnav", "city", "1042_pata_shenyuan_01", "1030_huodongchuangguan", "xinshoucun_fuben_day", "chuangjue-01"];
        var name = names[1];
        demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.astMgr).then(function () {
            _this.loadScene(name);
        });
        // this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
        // {
        //     if (state.isfinish)
        //     {
        //     }
        // });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.far = 10000;
        objCam.localTranslate = new m4m.math.vector3(0, 100, 0);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
        //相机控制
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 60;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
        // CameraController.instance().init(this.app, this.camera);
        //light
        var lObj = new m4m.framework.transform();
        m4m.math.quatFromEulerAngles(0, 45, 60, lObj.localRotate);
        var l = lObj.gameObject.addComponent("light");
        this.scene.addChild(lObj);
        l.type = m4m.framework.LightTypeEnum.Direction;
    };
    test_pick_boxcollider.prototype.loadScene = function (assetName, isCompress) {
        var _this = this;
        if (isCompress === void 0) { isCompress = false; }
        var ShowBoxcollder = function (trans) {
            if (!trans)
                return;
            var boxc = trans.gameObject.getComponent("boxcollider");
            if (boxc)
                boxc.colliderVisible = true;
            //test
            var meshC = trans.gameObject.getComponent("meshcollider");
            if (meshC) {
                meshC.colliderVisible = true;
            }
            console.error(" layer : ".concat(trans.gameObject.layer, " "));
            if (!trans.children)
                return;
            trans.children.forEach(function (sub) {
                if (sub)
                    ShowBoxcollder(sub);
            });
        };
        var addScene = function () {
            var beAddScene = true;
            if (beAddScene) {
                var _scene = _this.app.getAssetMgr().getAssetByName(assetName + ".scene.json", "".concat(assetName, ".assetbundle.json"));
                var _root = _scene.getSceneRoot();
                _root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
                _root.markDirty();
                _this.app.getScene().lightmaps = [];
                _scene.useLightMap(_this.app.getScene());
                // _scene.useFog(this.app.getScene());
                _this.scene.addChild(_root);
                ShowBoxcollder(_root);
            }
        };
        this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(assetName, "/").concat(assetName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
            if (s1.isfinish) {
                addScene();
            }
        });
    };
    test_pick_boxcollider.prototype.getColor = function (r, g, b) {
        var key = "".concat(r, "_").concat(g, "_").concat(b);
        if (!this.colorMap[key])
            this.colorMap[key] = new m4m.math.vector4(r, g, b, 1);
        return this.colorMap[key];
    };
    test_pick_boxcollider.prototype.addBall = function (pos) {
        var ball = this.generateGeomtry("sphere", this.getColor(1, 0, 0));
        m4m.math.vec3Clone(pos, ball.localTranslate);
        this.scene.addChild(ball);
        this.balls.push(ball);
        ball.markDirty();
    };
    test_pick_boxcollider.prototype.pickDown = function () {
        var v3 = this.rayCollider();
        if (v3) {
            this.addBall(v3.hitposition);
        }
    };
    test_pick_boxcollider.prototype.rayCollider = function () {
        var inputMgr = this.app.getInputMgr();
        var ray = this.camera.creatRayByScreen(new m4m.math.vector2(inputMgr.point.x, inputMgr.point.y), this.app);
        var temp = m4m.math.pool.new_pickInfo();
        //let bool = this.scene.pick(ray,temp,false,this.scene.getRoot(),this.pickLayer);
        var tranRoot = this.scene.getRoot();
        var mask = m4m.framework.cullingmaskutil.layerToMask(this.pickLayer);
        var bool = this.scene.pick(ray, temp, false, tranRoot, mask);
        return bool ? temp : null;
    };
    test_pick_boxcollider.prototype.generateGeomtry = function (meshType, color) {
        if (meshType === void 0) { meshType = "cube"; }
        if (color === void 0) { color = null; }
        var G3D = new m4m.framework.transform;
        var mf = G3D.gameObject.addComponent("meshFilter");
        mf.mesh = this.assetMgr.getDefaultMesh(meshType);
        var mr = G3D.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        mr.materials[0] = new m4m.framework.material("mat");
        //mr.materials[0].setShader(this.assetMgr.getShader("shader/def"));
        mr.materials[0].setShader(this.assetMgr.getShader("diffuse.shader.json"));
        mr.materials[0].setTexture("_MainTex", this.assetMgr.getDefaultTexture("white"));
        if (color)
            mr.materials[0].setVector4("_MainColor", color);
        this.scene.addChild(G3D);
        return G3D;
    };
    test_pick_boxcollider.prototype.update = function (delta) {
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            this.pickDown();
        }
        this.pointDown = this.inputMgr.point.touch;
        if (this.inputMgr.GetKeyDown(65)) {
            this.isAKeyDown = true;
        }
        else {
            this.isAKeyDown = false;
        }
        this.timer += delta;
        // CameraController.instance().update(delta);
    };
    return test_pick_boxcollider;
}());
var test_postCamera = /** @class */ (function () {
    function test_postCamera() {
        this.timer = 0;
    }
    test_postCamera.prototype.start = function (app) {
        var _this = this;
        console.log("i see you are a dog!");
        this.app = app;
        this.scene = this.app.getScene();
        var name = "yongzhedalu_02_1024";
        var isloaded = false;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/scenes/" + name + "/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        // if(s.bundleLoadState & m4m.framework.AssetBundleLoadState.Scene && !isloaded){
                        isloaded = true;
                        console.error(s.isfinish);
                        var _scene = _this.app.getAssetMgr().getAssetByName(name + ".scene.json");
                        var _root = _scene.getSceneRoot();
                        _this.scene.addChild(_root);
                        // _root.localTranslate = new m4m.math.vector3(-60, -30, 26.23);
                        _root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
                        _root.markDirty();
                        _this.app.getScene().lightmaps = [];
                        _scene.useLightMap(_this.app.getScene());
                        _scene.useFog(_this.app.getScene());
                    }
                });
                _this.addCamera();
            }
        });
    };
    test_postCamera.prototype.update = function (delta) {
        this.timer += delta;
        CameraController.instance().update(delta);
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.5);
        var z2 = Math.cos(this.timer * 0.5);
        if (this.camera) {
            var objCam = this.camera.gameObject.transform;
            // if (this.camera.fov < 1.18){
            //     this.camera.fov += delta * 1.2;               
            // }else{
            //     this.camera.fov = 0.7
            // }
            // let pos = new m4m.math.vector3(0.5, 0, 0);
            // m4m.math.vec3Add(this.camTran.localTranslate, pos, pos);
            // m4m.math.vec3SLerp(this.camTran.localTranslate, pos, 10*delta, pos);
            // this.camTran.localTranslate = pos;
            // this.camTran.markDirty();
            // objCam.localTranslate = new m4m.math.vector3(x2 * 10, 53, z2 * 10);
            objCam.markDirty(); //标记为需要刷新
        }
    };
    test_postCamera.prototype.addCamera = function () {
        this.camTran = new m4m.framework.transform();
        this.camTran.name = "Camera";
        this.scene.addChild(this.camTran);
        this.camera = this.camTran.gameObject.addComponent("camera");
        this.camera.near = 0.1;
        this.camera.far = 1000;
        this.camera.fov = 1.047;
        this.camTran.localTranslate = new m4m.math.vector3(105, 53, 57);
        this.camTran.localEulerAngles = new m4m.math.vector3(8, -46.5, 0);
        // objCam.lookatPoint(new m4m.math.vector3(133.6694, 97.87, 67));
        this.camTran.lookatPoint(new m4m.math.vector3(105, 53, 70));
        this.camTran.markDirty();
        this.camera.postQueues = [];
        this.postColor = new m4m.framework.cameraPostQueue_Color();
        this.postColor.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, 1024, 1024, true, false);
        this.camera.postQueues.push(this.postColor);
        this.depthColor = new m4m.framework.cameraPostQueue_Depth();
        this.depthColor.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, 1024, 1024, true, false);
        this.camera.postQueues.push(this.depthColor);
        var textcolor = new m4m.framework.texture("_color");
        textcolor.glTexture = this.postColor.renderTarget;
        var depthcolor = new m4m.framework.texture("_depthcolor");
        depthcolor.glTexture = this.depthColor.renderTarget;
        var texsize = 512;
        var post = new m4m.framework.cameraPostQueue_Quad();
        post.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, texsize, texsize, true, false);
        post.material.setShader(this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
        post.material.setTexture("_MainTex", textcolor);
        post.material.setVector4("sample_offsets", new m4m.math.vector4(0, 1.0, 0, -1.0));
        post.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
        this.camera.postQueues.push(post);
        var texBlur0 = new m4m.framework.texture("_blur0");
        texBlur0.glTexture = post.renderTarget;
        var post1 = new m4m.framework.cameraPostQueue_Quad();
        post1.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, texsize, texsize, true, false);
        post1.material.setShader(this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
        post1.material.setTexture("_MainTex", texBlur0);
        post1.material.setVector4("sample_offsets", new m4m.math.vector4(1.0, 0, -1.0, 0));
        post1.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
        this.camera.postQueues.push(post1);
        var texBlur = new m4m.framework.texture("_blur");
        texBlur.glTexture = post1.renderTarget;
        this.postQuad = new m4m.framework.cameraPostQueue_Quad();
        this.postQuad.material.setShader(this.scene.app.getAssetMgr().getShader("dof.shader.json"));
        this.postQuad.material.setTexture("_MainTex", textcolor);
        this.postQuad.material.setTexture("_BlurTex", texBlur);
        this.postQuad.material.setTexture("_DepthTex", depthcolor);
        var focalDistance = 0.985;
        this.postQuad.material.setFloat("_focalDistance", focalDistance);
        this.camera.postQueues.push(this.postQuad);
        CameraController.instance().init(this.app, this.camera);
    };
    return test_postCamera;
}());
//软裁剪
var test_softCut = /** @class */ (function () {
    function test_softCut() {
        this.taskmgr = new m4m.framework.taskMgr();
    }
    test_softCut.prototype.start = function (app) {
        test_softCut.temp = this;
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10;
        //2dUI root
        this.rooto2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(this.rooto2d);
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.createUI.bind(this));
    };
    test_softCut.prototype.createUI = function (astState, state) {
        var Temptex = this.assetMgr.getAssetByName("cutbg.png");
        var atlasComp = this.assetMgr.getAssetByName("comp.atlas.json");
        //over img
        var over_t2 = new m4m.framework.transform2D;
        over_t2.width = 100;
        over_t2.height = 60;
        over_t2.pivot.x = 0;
        over_t2.pivot.y = 0;
        over_t2.localTranslate.x = 120;
        over_t2.localTranslate.y = 100;
        this.rooto2d.addChild(over_t2);
        var over_i2 = over_t2.addComponent("image2D");
        over_i2.sprite = atlasComp.sprites["bg"];
        over_i2.imageType = m4m.framework.ImageType.Sliced;
        over_i2.sprite.border = new m4m.math.border(10, 50, 10, 10);
        //cut frame
        var cut_t = new m4m.framework.transform2D;
        cut_t.width = 200;
        cut_t.height = this.rooto2d.canvas.pixelHeight / 2;
        cut_t.pivot.x = 0;
        cut_t.pivot.y = 0;
        cut_t.localTranslate.x = 100;
        cut_t.localTranslate.y = 50;
        this.rooto2d.addChild(cut_t);
        cut_t.isMask = true;
        //9宫格拉伸底图
        var bg_t = new m4m.framework.transform2D;
        bg_t.width = this.rooto2d.canvas.pixelWidth / 2;
        bg_t.height = this.rooto2d.canvas.pixelHeight / 2;
        bg_t.pivot.x = 0;
        bg_t.pivot.y = 0;
        bg_t.localTranslate.x = -50;
        bg_t.localTranslate.y = 0;
        bg_t.localRotate = 25 * Math.PI / 180;
        cut_t.addChild(bg_t);
        var bg_i = bg_t.addComponent("image2D");
        bg_i.sprite = atlasComp.sprites["bg"];
        bg_i.imageType = m4m.framework.ImageType.Sliced;
        bg_i.sprite.border = new m4m.math.border(10, 50, 10, 10);
        //按鈕
        var btn_t = new m4m.framework.transform2D;
        btn_t.name = "btnt";
        btn_t.width = 100;
        btn_t.height = 36;
        btn_t.pivot.x = 0;
        btn_t.pivot.y = 0;
        btn_t.localTranslate.x = 30;
        btn_t.localTranslate.y = 70;
        bg_t.addChild(btn_t);
        var btn_b = btn_t.addComponent("button");
        btn_b.targetImage = btn_t.addComponent("image2D");
        btn_b.targetImage.sprite = atlasComp.sprites["ui_public_button_hits"];
        btn_b.pressedGraphic = atlasComp.sprites["ui_public_button_1"];
        btn_b.pressedColor = new m4m.math.color(1, 1, 1, 1);
        btn_b.transition = m4m.framework.TransitionType.SpriteSwap;
        btn_t.visible = true;
        //sub cut farme
        var subc_t = new m4m.framework.transform2D;
        subc_t.width = 60;
        subc_t.height = 50;
        subc_t.pivot.x = 0;
        subc_t.pivot.y = 0;
        subc_t.localTranslate.x = 170;
        subc_t.localTranslate.y = 200;
        this.rooto2d.addChild(subc_t);
        subc_t.isMask = true;
        //sub img
        var over_t = new m4m.framework.transform2D;
        over_t.width = 100;
        over_t.height = 60;
        over_t.pivot.x = 0;
        over_t.pivot.y = 0;
        subc_t.addChild(over_t);
        over_t.localTranslate.x = -20;
        var over_i = over_t.addComponent("image2D");
        over_i.sprite = atlasComp.sprites["bg"];
        over_i.imageType = m4m.framework.ImageType.Sliced;
        over_i.sprite.border = new m4m.math.border(10, 50, 10, 10);
        //raw png
        var raw_t = new m4m.framework.transform2D;
        raw_t.width = 130;
        raw_t.height = 130;
        raw_t.pivot.x = 0;
        raw_t.pivot.y = 0;
        subc_t.addChild(raw_t);
        //raw_t.localTranslate.x = -50;
        var raw_i = raw_t.addComponent("rawImage2D");
        raw_i.image = Temptex;
        //文本
        var lab_t = new m4m.framework.transform2D;
        lab_t.width = 120;
        lab_t.height = 24;
        lab_t.localTranslate.x = 10;
        lab_t.localTranslate.y = 30;
        this.rooto2d.addChild(lab_t);
        var lab_l = lab_t.addComponent("label");
        lab_l.font = this.assetMgr.getAssetByName("STXINGKA.font.json");
        lab_l.fontsize = 24;
        lab_l.text = "我是段文本";
        lab_l.color = new m4m.math.color(0.2, 0.2, 0.2, 1);
        //文本
        var lab_t2 = new m4m.framework.transform2D;
        lab_t2.width = 200;
        lab_t2.height = 24;
        // lab_t2.localTranslate.x = -20;
        // lab_t2.localTranslate.y = 100;
        raw_t.addChild(lab_t2);
        var lab_l2 = lab_t2.addComponent("label");
        lab_l2.font = this.assetMgr.getAssetByName("STXINGKA.font.json");
        lab_l2.fontsize = 30;
        lab_l2.text = "我是段文本2";
        lab_l2.color = new m4m.math.color(0.9, 0.1, 0.2, 1);
        //scroll view
        var scroll_t = new m4m.framework.transform2D;
        scroll_t.width = 200;
        scroll_t.height = 200;
        this.rooto2d.addChild(scroll_t);
        scroll_t.localTranslate.x = 260;
        scroll_t.localTranslate.y = 100;
        var scroll_ = scroll_t.addComponent("scrollRect");
        var ct = new m4m.framework.transform2D;
        ct.width = 350;
        ct.height = 450;
        scroll_.content = ct;
        scroll_t.isMask = true;
        scroll_.horizontal = true;
        scroll_.vertical = true;
        //raw png
        var raw_t2 = new m4m.framework.transform2D;
        raw_t2.width = 300;
        raw_t2.height = 400;
        var raw_i2 = raw_t2.addComponent("rawImage2D");
        raw_i2.image = Temptex;
        ct.addChild(raw_t2);
        //sub scroll
        var scroll_t1 = new m4m.framework.transform2D;
        scroll_t1.width = 200;
        scroll_t1.height = 200;
        ct.addChild(scroll_t1);
        scroll_t1.localTranslate.x = -50;
        scroll_t1.localTranslate.y = 100;
        var scroll_1 = scroll_t1.addComponent("scrollRect");
        var ct1 = new m4m.framework.transform2D;
        ct1.width = 350;
        ct1.height = 450;
        scroll_1.content = ct1;
        scroll_t1.isMask = true;
        scroll_1.horizontal = true;
        scroll_1.vertical = true;
        //raw png
        var raw_t3 = new m4m.framework.transform2D;
        raw_t3.width = 300;
        raw_t3.height = 400;
        var raw_i3 = raw_t3.addComponent("rawImage2D");
        raw_i3.image = Temptex;
        ct1.addChild(raw_t3);
        // //flame 
        // let flame_t = new m4m.framework.transform2D;
        // flame_t.width = 400;
        // flame_t.height = 260;
        // flame_t.pivot.x = 0;
        // flame_t.pivot.y = 0;
        // flame_t.localTranslate.x = 100;
        // flame_t.localTranslate.y = 100;
        // this.rooto2d.addChild(flame_t);
        // let bflame_i = flame_t.addComponent("image2D") as m4m.framework.image2D;
        // bflame_i.imageType = m4m.framework.ImageType.Simple;
        // bflame_i.setTexture(texture);
        //getpixle 
        var Preader = new m4m.render.textureReader(this.app.webgl, Temptex.glTexture.texture, Temptex.glTexture.width, Temptex.glTexture.height, false);
        //key dwon test
        var inputMgr = this.app.getInputMgr();
        this.app.webgl.canvas.addEventListener("keydown", function (ev) {
            if (ev.keyCode == 81) {
                console.error("getpixle: " + Preader.getPixel(1, 0.5));
            }
        }, false);
        state.finish = true;
    };
    test_softCut.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.assetMgr.load("res/comp/comp.json.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.assetMgr.load("res/comp/comp.atlas.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        //加载字体资源
                        _this.assetMgr.load("res/STXINGKA.TTF.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.assetMgr.load("res/resources/STXINGKA.font.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                                    if (s.isfinish) {
                                        _this.assetMgr.load("res/cutbg.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                                            if (s.isfinish) {
                                                state.finish = true;
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_softCut.prototype.update = function (delta) {
        this.taskmgr.move(delta); //推进task
    };
    return test_softCut;
}());
var test_spine_additiveBlending = /** @class */ (function () {
    function test_spine_additiveBlending() {
    }
    test_spine_additiveBlending.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).owl);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, "idle", true);
            comp.state.setAnimation(1, "blink", true);
            var right = comp.state.setAnimation(2, "left", true);
            var left = comp.state.setAnimation(3, "right", true);
            var up = comp.state.setAnimation(4, "up", true);
            var down = comp.state.setAnimation(5, "down", true);
            left.mixBlend = spine_m4m.MixBlend.add;
            right.mixBlend = spine_m4m.MixBlend.add;
            up.mixBlend = spine_m4m.MixBlend.add;
            down.mixBlend = spine_m4m.MixBlend.add;
            left.alpha = 0;
            right.alpha = 1;
            up.alpha = 0;
            down.alpha = 0;
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            document.addEventListener("mousemove", function (ev) {
                //计算混合比例
                if (ev.x - app.width / 2 > 0) {
                    right.alpha = (ev.x - app.width / 2) / (app.width / 2);
                    left.alpha = 0;
                }
                else {
                    right.alpha = 0;
                    left.alpha = (app.width / 2 - ev.x) / (app.width / 2);
                }
                if (ev.y - app.height / 2 > 0) {
                    up.alpha = 0;
                    down.alpha = (ev.y - app.height / 2) / (app.height / 2);
                }
                else {
                    down.alpha = 0;
                    up.alpha = (app.height / 2 - ev.y) / (app.height / 2);
                }
            });
        });
    };
    test_spine_additiveBlending.prototype.update = function (delta) { };
    return test_spine_additiveBlending;
}());
var test_spine_changeSkin = /** @class */ (function () {
    function test_spine_changeSkin() {
        var _this = this;
        this.randomSkin = function () {
            var skeleton = _this._comp.skeleton;
            var randomIndex = Math.floor(Math.random() * (skeleton.data.skins.length - 1));
            var skin = skeleton.data.skins[randomIndex];
            _this._comp.skeleton.setSkin(skin);
            _this._comp.skeleton.setSlotsToSetupPose();
        };
        this.randomGroupSkin = function () {
            var skeleton = _this._comp.skeleton;
            var skins = [];
            for (var indx in skeleton.data.skins) {
                var skin_1 = skeleton.data.skins[indx];
                if (skin_1.name === "default")
                    continue;
                skins.push(skin_1);
            }
            //组装skin
            var newSkin = new spine_m4m.Skin("random-skin");
            for (var slotIndex = 0; slotIndex < skeleton.slots.length; slotIndex++) {
                var skin = skins[(Math.random() * skins.length - 1) | 0];
                var attachments = skin.attachments[slotIndex];
                for (var attachmentName in attachments) {
                    newSkin.setAttachment(slotIndex, attachmentName, attachments[attachmentName]);
                }
            }
            _this._comp.skeleton.setSkin(newSkin);
            _this._comp.skeleton.setSlotsToSetupPose();
        };
        this.speed = 1.0;
    }
    test_spine_changeSkin.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "heroes.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).heroes);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置皮肤
            comp.skeleton.setSkinByName("Assassin");
            comp.state.setAnimation(0, "run", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_changeSkin.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
        gui.add(this, "randomSkin");
        gui.add(this, "randomGroupSkin");
    };
    test_spine_changeSkin.prototype.update = function (delta) { };
    return test_spine_changeSkin;
}());
var test_spine_change_slot_mesh_tex = /** @class */ (function () {
    function test_spine_change_slot_mesh_tex() {
        var _this = this;
        this._index = 0;
        this.changeSlot = function () {
            _this._index = (_this._index + 1) % 2;
            var tex = ["head2.png", "head3.png"][_this._index];
            _this.assetManager.loadTexture(tex, function (path, texture) {
                _this._comp.changeSlotTexture("1像素头像", texture);
            });
        };
        this.clearSlot = function () {
            _this._index = (_this._index + 1) % 2;
            var tex = ["head2.png", "head3.png"][_this._index];
            _this.assetManager.loadTexture(tex, function (path, texture) {
                _this._comp.clearSlot("1像素头像");
            });
        };
        this.speed = 1.0;
    }
    test_spine_change_slot_mesh_tex.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        this.assetManager = assetManager;
        var skeletonFile = "robot/skeleton.json";
        var atlasFile = "robot/skeleton.atlas";
        var animation = "cha_ObliqueFront_idle";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            // skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile));
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, animation, true);
            comp.skeleton.setSkinByName("Magic_1_skin");
            var spineNode = new m4m.framework.transform2D;
            //可用transform2d缩放等
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            // spineNode.localRotate = 30 * Math.PI / 180;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_change_slot_mesh_tex.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
        gui.add(this, "changeSlot");
        gui.add(this, "clearSlot");
    };
    test_spine_change_slot_mesh_tex.prototype.update = function (delta) { };
    return test_spine_change_slot_mesh_tex;
}());
var test_spine_change_slot_region_tex = /** @class */ (function () {
    function test_spine_change_slot_region_tex() {
        var _this = this;
        this._index = 0;
        this.changeSlot = function () {
            _this._index = (_this._index + 1) % 2;
            var tex = ["head2.png", "head3.png"][_this._index];
            _this.assetManager.loadTexture(tex, function (path, texture) {
                _this._comp.changeSlotTexture("gun", texture);
            });
        };
        this.speed = 1.0;
    }
    test_spine_change_slot_region_tex.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        this.assetManager = assetManager;
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        var animation = "walk";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).raptor);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, animation, true);
            var spineNode = new m4m.framework.transform2D;
            //可用transform2d缩放等
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            // spineNode.localRotate = 30 * Math.PI / 180;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_change_slot_region_tex.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
        gui.add(this, "changeSlot");
    };
    test_spine_change_slot_region_tex.prototype.update = function (delta) { };
    return test_spine_change_slot_region_tex;
}());
var test_spine_clip = /** @class */ (function () {
    function test_spine_clip() {
        this.speed = 1.0;
    }
    test_spine_clip.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).spineboy);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            comp.state.setAnimation(0, "portal", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_clip.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
    };
    test_spine_clip.prototype.update = function (delta) { };
    return test_spine_clip;
}());
var test_spine_IK = /** @class */ (function () {
    function test_spine_IK() {
        var _this = this;
        this.controlBones = ["hoverboard controller", "hip controller", "board target", "crosshair"];
        this._temptMat = new m4m.math.matrix();
        this._temptPos = new m4m.math.vector2();
        this.bonesPos = {};
        this.fire = function () {
            _this._comp.state.setAnimation(3, "aim", true);
            _this._comp.state.setAnimation(4, "shoot", false);
            _this._comp.state.addEmptyAnimation(4, 0.5, 0).listener = {
                complete: function (trackIndex) {
                    _this._comp.state.setEmptyAnimation(3, 0.2);
                }
            };
        };
        this.jump = function () {
            _this._comp.state.setAnimation(2, "jump", false);
            _this._comp.state.addEmptyAnimation(2, 0.5, 0);
        };
        this.speed = 1.0;
    }
    test_spine_IK.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).spineboy);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, "hoverboard", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
            comp.onUpdate = function () {
                if (!_this._inited) {
                    _this._inited = true;
                    var ui = document.getElementById("drawarea");
                    //拖动骨骼
                    document.addEventListener("mousemove", function (ev) {
                        if (_this._chooseBone) {
                            var boneName = _this._chooseBone.data.name;
                            var temptPos_1 = new m4m.math.vector2();
                            temptPos_1.x = ev.clientX;
                            temptPos_1.y = ev.clientY;
                            root2d.calScreenPosToCanvasPos(temptPos_1, temptPos_1);
                            var toMat = _this._comp.getToCanvasMatrix();
                            var temptMat_1 = new m4m.math.matrix3x2();
                            m4m.math.matrix3x2Inverse(toMat, temptMat_1);
                            m4m.math.matrix3x2TransformVector2(temptMat_1, temptPos_1, temptPos_1);
                            var tempt = new spine_m4m.Vector2();
                            tempt.set(temptPos_1.x, temptPos_1.y);
                            _this._chooseBone.parent.worldToLocal(tempt);
                            _this._chooseBone.x = tempt.x;
                            _this._chooseBone.y = tempt.y;
                            _this.bonesPos[boneName].boneUI.style.top = ev.clientY + "px";
                            _this.bonesPos[boneName].boneUI.style.left = ev.clientX + "px";
                        }
                    });
                    document.addEventListener("mouseup", function () { return _this._chooseBone = null; });
                    //初始化骨骼UI
                    var temptMat = _this._comp.getToCanvasMatrix();
                    var temptPos = new m4m.math.vector2();
                    var _loop_6 = function (i) {
                        // if(this.bonesPos[this.controlBones[i]]!=null)
                        var boneName = _this.controlBones[i];
                        var bone = _this._comp.skeleton.findBone(boneName);
                        var x = _this._comp.skeleton.x + bone.worldX;
                        var y = _this._comp.skeleton.y + bone.worldY;
                        m4m.math.matrix3x2TransformVector2(temptMat, new m4m.math.vector2(x, y), temptPos);
                        root2d.calCanvasPosToScreenPos(temptPos, temptPos);
                        var screen_x = temptPos.x;
                        var screen_y = temptPos.y;
                        var boneUI = document.createElement("div", {});
                        boneUI.style.position = "absolute";
                        boneUI.style.width = "10px";
                        boneUI.style.height = "10px";
                        boneUI.style.backgroundColor = "blue";
                        boneUI.style.top = screen_y + "px";
                        boneUI.style.left = screen_x + "px";
                        boneUI.addEventListener("mouseenter", function () {
                            boneUI.style.backgroundColor = "green";
                        });
                        boneUI.addEventListener("mouseleave", function () {
                            boneUI.style.backgroundColor = "blue";
                        });
                        boneUI.addEventListener("mousedown", function () {
                            _this._chooseBone = bone;
                        });
                        _this.bonesPos[boneName] = { bone: bone, boneUI: boneUI };
                        ui.appendChild(boneUI);
                    };
                    for (var i = 0; i < _this.controlBones.length; i++) {
                        _loop_6(i);
                    }
                }
            };
        });
    };
    test_spine_IK.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
        gui.add(this, "fire");
        gui.add(this, "jump");
    };
    test_spine_IK.prototype.update = function (delta) { };
    return test_spine_IK;
}());
// import React from "react";
// import { AtlasAttachmentLoader, SkeletonJson, SpineAssetMgr, spineSkeleton } from "../../../src";
// export class ImageChange extends React.Component {
//     componentDidMount(): void {
//         let app = new m4m.framework.application();
//         app.bePlay = true;
//         let div = document.getElementById("container") as HTMLDivElement;
//         app.start(div);
//         let scene = app.getScene();
//         //相机
//         var objCam = new m4m.framework.transform();
//         scene.addChild(objCam);
//         let camera = objCam.gameObject.addComponent("camera") as m4m.framework.camera;
//         //2dUI root
//         let root2d = new m4m.framework.overlay2D();
//         camera.addOverLay(root2d);
//         this.init(app, root2d);
//     }
//     private init(app: m4m.framework.application, root2d: m4m.framework.overlay2D) {
//         let assetManager = new SpineAssetMgr(app.getAssetMgr(), "./assets/");
//         let skeletonFile = "demos.json";
//         let atlasFile = "atlas1.atlas"
//         let animation = "death";
//         Promise.all([
//             new Promise<void>((resolve, reject) => {
//                 assetManager.loadJson(skeletonFile, () => resolve())
//             }),
//             new Promise<void>((resolve, reject) => {
//                 assetManager.loadTextureAtlas(atlasFile, () => resolve());
//             })])
//             .then(() => {
//                 let atlasLoader = new AtlasAttachmentLoader(assetManager.get(atlasFile));
//                 let skeletonJson = new SkeletonJson(atlasLoader);
//                 skeletonJson.scale = 0.4;
//                 let skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).alien);
//                 let comp = new spineSkeleton(skeletonData);
//                 comp.state.setAnimation(0, animation, true);
//                 let spineNode = new m4m.framework.transform2D;
//                 spineNode.addComponentDirect(comp);
//                 root2d.addChild(spineNode);
//             })
//     }
//     render(): React.ReactNode {
//         return <div id="container"></div>
//     }
// }
var test_spine_imageChange = /** @class */ (function () {
    function test_spine_imageChange() {
    }
    test_spine_imageChange.prototype.start = function (app) {
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        var animation = "death";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).alien);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            //设置播放动画
            comp.state.setAnimation(0, animation, true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
        });
    };
    test_spine_imageChange.prototype.update = function (delta) { };
    return test_spine_imageChange;
}());
var test_spine_mesh = /** @class */ (function () {
    function test_spine_mesh() {
        this.speed = 1.0;
    }
    test_spine_mesh.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).orangegirl);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            comp.state.setAnimation(0, "animation", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.addComponentDirect(comp);
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_mesh.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
    };
    test_spine_mesh.prototype.update = function (delta) { };
    return test_spine_mesh;
}());
var test_spine_spriteSheet = /** @class */ (function () {
    function test_spine_spriteSheet() {
        this.speed = 1.0;
    }
    test_spine_spriteSheet.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        var animation = "walk";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).raptor);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置播放动画
            comp.state.setAnimation(0, animation, true);
            var spineNode = new m4m.framework.transform2D;
            //可用transform2d缩放等
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            // spineNode.localRotate = 30 * Math.PI / 180;
            spineNode.localScale.x = -1;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_spriteSheet.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
    };
    test_spine_spriteSheet.prototype.update = function (delta) { };
    return test_spine_spriteSheet;
}());
var test_spine_stretchyMan = /** @class */ (function () {
    function test_spine_stretchyMan() {
        this.controlBones = ["back leg controller", "front leg controller", "back arm controller", "front arm controller", "head controller", "hip controller"];
        this._temptMat = new m4m.math.matrix();
        this._temptPos = new m4m.math.vector2();
        this.bonesPos = {};
    }
    test_spine_stretchyMan.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).stretchyman);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置皮肤
            comp.state.setAnimation(0, "idle", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            comp.onUpdate = function () {
                if (!_this._inited) {
                    _this._inited = true;
                    var ui = document.getElementById("drawarea");
                    //拖动骨骼
                    document.addEventListener("mousemove", function (ev) {
                        if (_this._chooseBone) {
                            var boneName = _this._chooseBone.data.name;
                            var temptPos_2 = new m4m.math.vector2();
                            temptPos_2.x = ev.clientX;
                            temptPos_2.y = ev.clientY;
                            root2d.calScreenPosToCanvasPos(temptPos_2, temptPos_2);
                            var toMat = _this._comp.getToCanvasMatrix();
                            var temptMat = new m4m.math.matrix3x2();
                            m4m.math.matrix3x2Inverse(toMat, temptMat);
                            m4m.math.matrix3x2TransformVector2(temptMat, temptPos_2, temptPos_2);
                            var tempt = new spine_m4m.Vector2();
                            tempt.set(temptPos_2.x, temptPos_2.y);
                            // let boneWorldPos = new m4m.math.vector2(ev.clientX - app.width / 2, app.height / 2 - ev.clientY);
                            // let worldPos = this._comp.transform.getWorldTranslate();
                            // let worldRot = this._comp.transform.getWorldRotate();
                            // let worldScale = this._comp.transform.getWorldScale();
                            // m4m.math.matrix3x2MakeTransformRTS(worldPos, worldScale, worldRot.v, this._temptMat);
                            // m4m.math.matrix3x2Inverse(this._temptMat, this._temptMat);
                            // m4m.math.matrix3x2TransformVector2(this._temptMat, boneWorldPos, this._temptPos);
                            _this._chooseBone.parent.worldToLocal(tempt);
                            _this._chooseBone.x = tempt.x;
                            _this._chooseBone.y = tempt.y;
                            for (var i = 0; i < _this.controlBones.length; i++) {
                                // if(this.bonesPos[this.controlBones[i]]!=null)
                                var boneName_1 = _this.controlBones[i];
                                var bone = _this._comp.skeleton.findBone(boneName_1);
                                var x = _this._comp.skeleton.x + bone.worldX;
                                var y = _this._comp.skeleton.y + bone.worldY;
                                m4m.math.matrix3x2TransformVector2(toMat, new m4m.math.vector2(x, y), temptPos_2);
                                root2d.calCanvasPosToScreenPos(temptPos_2, temptPos_2);
                                var screen_x = temptPos_2.x;
                                var screen_y = temptPos_2.y;
                                _this.bonesPos[boneName_1].boneUI.style.top = screen_y + "px";
                                _this.bonesPos[boneName_1].boneUI.style.left = screen_x + "px";
                            }
                        }
                    });
                    document.addEventListener("mouseup", function () { return _this._chooseBone = null; });
                    // let worldPos = this._comp.transform.getWorldTranslate();
                    // let worldRot = this._comp.transform.getWorldRotate();
                    // let worldScale = this._comp.transform.getWorldScale();
                    // m4m.math.matrix3x2MakeTransformRTS(worldPos, worldScale, worldRot.v, this._temptMat);
                    var toCanvasMat = _this._comp.getToCanvasMatrix();
                    var temptPos = new m4m.math.vector2();
                    var _loop_7 = function (i) {
                        // if(this.bonesPos[this.controlBones[i]]!=null)
                        var boneName = _this.controlBones[i];
                        var bone = _this._comp.skeleton.findBone(boneName);
                        var x = _this._comp.skeleton.x + bone.worldX;
                        var y = _this._comp.skeleton.y + bone.worldY;
                        m4m.math.matrix3x2TransformVector2(toCanvasMat, new m4m.math.vector2(x, y), temptPos);
                        root2d.calCanvasPosToScreenPos(temptPos, temptPos);
                        var screen_x = temptPos.x;
                        var screen_y = temptPos.y;
                        var boneUI = document.createElement("div", {});
                        boneUI.style.position = "absolute";
                        boneUI.style.width = "10px";
                        boneUI.style.height = "10px";
                        boneUI.style.backgroundColor = "blue";
                        boneUI.style.top = screen_y + "px";
                        boneUI.style.left = screen_x + "px";
                        boneUI.addEventListener("mouseenter", function () {
                            boneUI.style.backgroundColor = "green";
                        });
                        boneUI.addEventListener("mouseleave", function () {
                            boneUI.style.backgroundColor = "blue";
                        });
                        boneUI.addEventListener("mousedown", function () {
                            _this._chooseBone = bone;
                        });
                        _this.bonesPos[boneName] = { bone: bone, boneUI: boneUI };
                        ui.appendChild(boneUI);
                    };
                    for (var i = 0; i < _this.controlBones.length; i++) {
                        _loop_7(i);
                    }
                }
            };
        });
    };
    test_spine_stretchyMan.prototype.update = function (delta) { };
    return test_spine_stretchyMan;
}());
var test_spine_tank = /** @class */ (function () {
    function test_spine_tank() {
        this.speed = 1.0;
    }
    test_spine_tank.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).tank);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            comp.state.setAnimation(0, "drive", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.localScale.x = 0.5;
            spineNode.localScale.y = 0.5;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_tank.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
    };
    test_spine_tank.prototype.update = function (delta) { };
    return test_spine_tank;
}());
var test_spine_transition = /** @class */ (function () {
    function test_spine_transition() {
        var _this = this;
        this.playDie = function () {
            _this._comp.state.setAnimation(0, "death", false);
            _this.setAnimations(_this._comp.state);
        };
        this.speed = 1.0;
    }
    test_spine_transition.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas1.atlas";
        var animation = "walk";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).spineboy);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //复杂融合参考官方文档
            //http://zh.esotericsoftware.com/spine-applying-animations#%E9%80%9A%E9%81%93%28Track%29
            //设置默认融合
            comp.animData.defaultMix = 0.2;
            //播放一系列动画
            _this.setAnimations(comp.state);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            //GUI
            datGui.init().then(function () { return _this.setGUI(); });
        });
    };
    test_spine_transition.prototype.setAnimations = function (state) {
        var _this = this;
        state.addAnimation(0, "idle", true, 0);
        state.addAnimation(0, "walk", true, 0);
        state.addAnimation(0, "jump", false, 0);
        state.addAnimation(0, "run", true, 0);
        state.addAnimation(0, "jump", false, 1);
        state.addAnimation(0, "walk", true, 0).listener = {
            start: function (trackIndex) {
                _this.setAnimations(state);
            }
        };
    };
    test_spine_transition.prototype.setGUI = function () {
        var _this = this;
        if (!dat)
            return;
        var gui = new dat.GUI();
        gui.add(this, 'speed', 0, 2).onChange(function (value) {
            _this._comp.state.timeScale = value;
        });
        gui.add(this, 'playDie');
    };
    test_spine_transition.prototype.update = function (delta) { };
    return test_spine_transition;
}());
var test_spine_vin = /** @class */ (function () {
    function test_spine_vin() {
        this.controlBones = ["base", "vine-control1", "vine-control2", "vine-control3", "vine-control4"];
        this._temptMat = new m4m.math.matrix();
        this._temptPos = new m4m.math.vector2();
        this.bonesPos = {};
    }
    test_spine_vin.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).vine);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            //设置皮肤
            comp.state.setAnimation(0, "animation", true);
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            comp.onUpdate = function () {
                if (!_this._inited) {
                    _this._inited = true;
                    var ui = document.getElementById("drawarea");
                    //拖动骨骼
                    document.addEventListener("mousemove", function (ev) {
                        if (_this._chooseBone) {
                            var boneName = _this._chooseBone.data.name;
                            var temptPos_3 = new m4m.math.vector2();
                            temptPos_3.x = ev.clientX;
                            temptPos_3.y = ev.clientY;
                            root2d.calScreenPosToCanvasPos(temptPos_3, temptPos_3);
                            var toMat = _this._comp.getToCanvasMatrix();
                            var temptMat_2 = new m4m.math.matrix3x2();
                            m4m.math.matrix3x2Inverse(toMat, temptMat_2);
                            m4m.math.matrix3x2TransformVector2(temptMat_2, temptPos_3, temptPos_3);
                            var tempt = new spine_m4m.Vector2();
                            tempt.set(temptPos_3.x, temptPos_3.y);
                            _this._chooseBone.parent.worldToLocal(tempt);
                            _this._chooseBone.x = tempt.x;
                            _this._chooseBone.y = tempt.y;
                            _this.bonesPos[boneName].boneUI.style.top = ev.clientY + "px";
                            _this.bonesPos[boneName].boneUI.style.left = ev.clientX + "px";
                        }
                    });
                    document.addEventListener("mouseup", function () { return _this._chooseBone = null; });
                    var temptMat = _this._comp.getToCanvasMatrix();
                    var temptPos = new m4m.math.vector2();
                    var _loop_8 = function (i) {
                        // if(this.bonesPos[this.controlBones[i]]!=null)
                        var boneName = _this.controlBones[i];
                        var bone = _this._comp.skeleton.findBone(boneName);
                        var x = _this._comp.skeleton.x + bone.worldX;
                        var y = _this._comp.skeleton.y + bone.worldY;
                        m4m.math.matrix3x2TransformVector2(temptMat, new m4m.math.vector2(x, y), temptPos);
                        root2d.calCanvasPosToScreenPos(temptPos, temptPos);
                        var screen_x = temptPos.x;
                        var screen_y = temptPos.y;
                        var boneUI = document.createElement("div", {});
                        boneUI.style.position = "absolute";
                        boneUI.style.width = "10px";
                        boneUI.style.height = "10px";
                        boneUI.style.backgroundColor = "blue";
                        boneUI.style.top = screen_y + "px";
                        boneUI.style.left = screen_x + "px";
                        boneUI.addEventListener("mouseenter", function () {
                            boneUI.style.backgroundColor = "green";
                        });
                        boneUI.addEventListener("mouseleave", function () {
                            boneUI.style.backgroundColor = "blue";
                        });
                        boneUI.addEventListener("mousedown", function () {
                            _this._chooseBone = bone;
                        });
                        _this.bonesPos[boneName] = { bone: bone, boneUI: boneUI };
                        ui.appendChild(boneUI);
                    };
                    for (var i = 0; i < _this.controlBones.length; i++) {
                        _loop_8(i);
                    }
                }
            };
        });
    };
    test_spine_vin.prototype.update = function (delta) { };
    return test_spine_vin;
}());
var test_spine_wheelTransform = /** @class */ (function () {
    function test_spine_wheelTransform() {
        this.controlBones = ["wheel2overlay", "wheel3overlay", "rotate-handle"];
        this._temptMat = new m4m.math.matrix();
        this._temptPos = new m4m.math.vector2();
        this.bonesPos = {};
    }
    test_spine_wheelTransform.prototype.start = function (app) {
        var _this = this;
        var scene = app.getScene();
        //相机
        var objCam = new m4m.framework.transform();
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        //2dUI root
        var root2d = new m4m.framework.overlay2D();
        camera.addOverLay(root2d);
        var assetManager = new spine_m4m.SpineAssetMgr(app.getAssetMgr(), "".concat(resRootPath, "spine/"));
        var skeletonFile = "demos.json";
        var atlasFile = "atlas2.atlas";
        Promise.all([
            new Promise(function (resolve, reject) {
                assetManager.loadJson(skeletonFile, function () { return resolve(); });
            }),
            new Promise(function (resolve, reject) {
                assetManager.loadTextureAtlas(atlasFile, function () { return resolve(); });
            })
        ])
            .then(function () {
            var atlasLoader = new spine_m4m.AtlasAttachmentLoader(assetManager.get(atlasFile));
            var skeletonJson = new spine_m4m.SkeletonJson(atlasLoader);
            skeletonJson.scale = 0.4;
            var skeletonData = skeletonJson.readSkeletonData(assetManager.get(skeletonFile).transforms);
            var comp = new spine_m4m.spineSkeleton(skeletonData);
            _this._comp = comp;
            var spineNode = new m4m.framework.transform2D;
            spineNode.localTranslate.x = root2d.canvas.pixelWidth / 2;
            spineNode.localTranslate.y = root2d.canvas.pixelHeight / 2;
            spineNode.addComponentDirect(comp);
            root2d.addChild(spineNode);
            var wheel = _this._comp.skeleton.findBone("wheel1overlay");
            comp.onUpdate = function () {
                if (!_this._inited) {
                    _this._inited = true;
                    var ui = document.getElementById("drawarea");
                    var lastAngle_1 = 0;
                    //拖动骨骼
                    document.addEventListener("mousemove", function (ev) {
                        if (_this._chooseBone) {
                            var bone_1 = _this._chooseBone.data.name;
                            //拖拉骨骼
                            if (["wheel2overlay", "wheel3overlay"].indexOf(bone_1) >= 0) {
                                //修改UI位置
                                _this.bonesPos[bone_1].boneUI.style.left = ev.clientX + "px";
                                _this.bonesPos[bone_1].boneUI.style.top = ev.clientY + "px";
                                //修改骨骼位置
                                var temptPos_4 = new m4m.math.vector2();
                                temptPos_4.x = ev.clientX;
                                temptPos_4.y = ev.clientY;
                                root2d.calScreenPosToCanvasPos(temptPos_4, temptPos_4);
                                var toMat = _this._comp.getToCanvasMatrix();
                                var temptMat_3 = new m4m.math.matrix3x2();
                                m4m.math.matrix3x2Inverse(toMat, temptMat_3);
                                m4m.math.matrix3x2TransformVector2(temptMat_3, temptPos_4, temptPos_4);
                                var tempt = new spine_m4m.Vector2();
                                tempt.set(temptPos_4.x, temptPos_4.y);
                                _this._chooseBone.parent.worldToLocal(tempt);
                                _this._chooseBone.x = tempt.x;
                                _this._chooseBone.y = tempt.y;
                            }
                            else {
                                //计算旋转
                                //修改骨骼位置
                                //screen world
                                var temptPos_5 = new m4m.math.vector2();
                                temptPos_5.x = ev.clientX;
                                temptPos_5.y = ev.clientY;
                                root2d.calScreenPosToCanvasPos(temptPos_5, temptPos_5);
                                var toMat = _this._comp.getToCanvasMatrix();
                                var temptMat_4 = new m4m.math.matrix3x2();
                                m4m.math.matrix3x2Inverse(toMat, temptMat_4);
                                m4m.math.matrix3x2TransformVector2(temptMat_4, temptPos_5, temptPos_5);
                                var subRes = new m4m.math.vector2();
                                m4m.math.vec2Subtract(temptPos_5, new m4m.math.vector2(wheel.worldX, wheel.worldY), subRes);
                                m4m.math.vec2Normalize(subRes, subRes);
                                var angle = Math.acos(subRes.x);
                                if (subRes.y < 0)
                                    angle = 2 * Math.PI - angle;
                                var delta = angle - lastAngle_1;
                                _this._comp.skeleton.findBone("wheel1").rotation += delta * 180 / Math.PI;
                                lastAngle_1 = angle;
                            }
                        }
                    });
                    document.addEventListener("mouseup", function () { return _this._chooseBone = null; });
                    //初始化骨骼UI
                    var temptMat_5 = _this._comp.getToCanvasMatrix();
                    var temptPos_6 = new m4m.math.vector2();
                    var _loop_9 = function (i) {
                        // if(this.bonesPos[this.controlBones[i]]!=null)
                        var boneName = _this.controlBones[i];
                        var bone_2 = _this._comp.skeleton.findBone(boneName);
                        var x_1 = _this._comp.skeleton.x + bone_2.worldX;
                        var y_1 = _this._comp.skeleton.y + bone_2.worldY;
                        m4m.math.matrix3x2TransformVector2(temptMat_5, new m4m.math.vector2(x_1, y_1), temptPos_6);
                        root2d.calCanvasPosToScreenPos(temptPos_6, temptPos_6);
                        var screen_x_1 = temptPos_6.x;
                        var screen_y_1 = temptPos_6.y;
                        var boneUI = document.createElement("div", {});
                        boneUI.style.position = "absolute";
                        boneUI.style.width = "10px";
                        boneUI.style.height = "10px";
                        boneUI.style.backgroundColor = "blue";
                        boneUI.style.top = screen_y_1 + "px";
                        boneUI.style.left = screen_x_1 + "px";
                        boneUI.addEventListener("mouseenter", function () {
                            boneUI.style.backgroundColor = "green";
                        });
                        boneUI.addEventListener("mouseleave", function () {
                            boneUI.style.backgroundColor = "blue";
                        });
                        boneUI.addEventListener("mousedown", function () {
                            _this._chooseBone = bone_2;
                        });
                        _this.bonesPos[boneName] = { bone: bone_2, boneUI: boneUI };
                        ui.appendChild(boneUI);
                    };
                    for (var i = 0; i < _this.controlBones.length; i++) {
                        _loop_9(i);
                    }
                }
                //计算旋转骨骼的屏幕坐标
                var temptMat = _this._comp.getToCanvasMatrix();
                var temptPos = new m4m.math.vector2();
                var bone = _this._comp.skeleton.findBone("rotate-handle");
                var x = _this._comp.skeleton.x + bone.worldX;
                var y = _this._comp.skeleton.y + bone.worldY;
                m4m.math.matrix3x2TransformVector2(temptMat, new m4m.math.vector2(x, y), temptPos);
                root2d.calCanvasPosToScreenPos(temptPos, temptPos);
                var screen_x = temptPos.x;
                var screen_y = temptPos.y;
                _this.bonesPos["rotate-handle"].boneUI.style.left = screen_x + "px";
                _this.bonesPos["rotate-handle"].boneUI.style.top = screen_y + "px";
            };
        });
    };
    test_spine_wheelTransform.prototype.update = function (delta) { };
    return test_spine_wheelTransform;
}());
var test_sssss = /** @class */ (function () {
    function test_sssss() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.timer = 0;
    }
    test_sssss.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        this.taskmgr.addTaskCall(this.loadpbrRes.bind(this));
        this.taskmgr.addTaskCall(this.loadIBL.bind(this));
        this.taskmgr.addTaskCall(this.init.bind(this));
        // this.changeShader();
        // name="elong";
        // let isloaded= false;
        // this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, (state) =>
        // {
        //     if (state.isfinish)
        //     {
        //         this.app.getAssetMgr().loadCompressBundle("res/prefabs/" + name + "/" + name + ".assetbundle.json",
        //             (s) =>
        //             {
        //                 console.log(s.curtask + "/" + s.totaltask);
        //                 console.log(s.curByteLength+"/"+s.totalByteLength);
        //                 if (s.bundleLoadState & m4m.framework.AssetBundleLoadState.Prefab && !isloaded)
        //                 {
        //                     isloaded = true;
        //                     var _prefab: m4m.framework.prefab = this.app.getAssetMgr().getAssetByName(name + ".prefab.json") as m4m.framework.prefab;
        //                     this.baihu = _prefab.getCloneTrans();
        //                     this.scene.addChild(this.baihu);
        //                     // this.baihu.localScale = new m4m.math.vector3(50, 50, 50);
        //                     this.baihu.localTranslate = new m4m.math.vector3(0, 0, 0);
        //                     this.baihu.localEulerAngles = new m4m.math.vector3(0, 180, 0);
        //                     // this.baihu.localEulerAngles = new m4m.math.vector3();
        //                     this.baihu = _prefab.getCloneTrans();
        //                     objCam.localTranslate = new m4m.math.vector3(0, 20, -10);
        //                     objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //                     objCam.markDirty();
        //                     this.renderer = this.baihu.gameObject.getComponentsInChildren("meshRenderer") as m4m.framework.meshRenderer[];
        //                     this.skinRenders = this.baihu.gameObject.getComponentsInChildren(m4m.framework.StringUtil.COMPONENT_SKINMESHRENDER) as m4m.framework.skinnedMeshRenderer[];
        //                     // this.changeShader();
        //                     // for(let i=0; i<22; i++)
        //                     // {
        //                     //     for(let j=0; j<22; j++)
        //                     //     {
        //                     //         let bp = _prefab.getCloneTrans();
        //                     //         bp.localTranslate = new m4m.math.vector3(i - 11, 0, j - 11);
        //                     //         bp.markDirty();
        //                     //         this.scene.addChild(bp);
        //                     //     }
        //                     // }
        //                 }
        //             });
        //     }
        // });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10000;
        this.camera.backgroundColor = new m4m.math.color(0.11, 0.11, 0.11, 1.0);
        // // objCam.localTranslate = new m4m.math.vector3(0, 0, -30);
        // CameraController.instance().init(this.app,this.camera);
        // objCam.markDirty();//标记为需要刷新
        //相机展示控制器
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
    };
    test_sssss.prototype.init = function () {
        var _this = this;
        var names = ["Head"];
        var name = names[0];
        var shaderPackName = "MainShader";
        // let shaderPackName = "shader";
        this.app.getAssetMgr().load("".concat(resRootPath, "shader/").concat(shaderPackName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                var adName_1 = "".concat(name, ".assetbundle.json");
                _this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(name, "/").concat(adName_1), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName(name + ".prefab.json", adName_1);
                        _this.baihu = _prefab.getCloneTrans();
                        _this.scene.addChild(_this.baihu);
                        // this.baihu.localScale = new m4m.math.vector3(50, 50, 50);
                        _this.baihu.localTranslate = new m4m.math.vector3(0, 0, 0);
                        _this.baihu.localEulerAngles = new m4m.math.vector3(0, 180, 0);
                        var objCam = _this.camera.gameObject.transform;
                        objCam.localTranslate = new m4m.math.vector3(0, 0, -2);
                        objCam.lookat(_this.baihu);
                        objCam.markDirty();
                        // let ani = this.baihu.gameObject.getComponent("aniplayer") as m4m.framework.aniplayer;
                        // ani.clipnames;
                        // this.refreshTexture(this.baihu);
                        var assetMgr = _this.app.getAssetMgr();
                        var negx_1 = _this.app.getAssetMgr().getAssetByName("negx_1.jpg");
                        var negy_1 = _this.app.getAssetMgr().getAssetByName("negy_1.jpg");
                        var negz_1 = _this.app.getAssetMgr().getAssetByName("negz_1.jpg");
                        var posx_1 = _this.app.getAssetMgr().getAssetByName("posx_1.jpg");
                        var posy_1 = _this.app.getAssetMgr().getAssetByName("posy_1.jpg");
                        var posz_1 = _this.app.getAssetMgr().getAssetByName("posz_1.jpg");
                        var skytex1 = new m4m.framework.texture("skyCubeTex");
                        skytex1.glTexture = new m4m.render.glTextureCube(_this.app.webgl);
                        skytex1.use();
                        skytex1.glTexture.uploadImages(negx_1, negy_1, negz_1, posx_1, posy_1, posz_1);
                        // this.baihu.localTranslate.x = 0;
                        _this.baihu.localTranslate.y = -4;
                        // this.baihu.localTranslate.z = 10;
                        _this.baihu.localScale.x = 10;
                        _this.baihu.localScale.y = 10;
                        _this.baihu.localScale.z = 10;
                        _this.baihu.markDirty();
                        // for(let i = 0; i < this.baihu.children.length; i++) {
                        var mr = _this.baihu.gameObject.getComponent("meshRenderer");
                        mr.materials[0] = new m4m.framework.material("testmat");
                        var sssSH = assetMgr.getShader("pbr_sss.shader.json");
                        mr.materials[0].setShader(sssSH);
                        var brdfimg = assetMgr.getAssetByName("brdf.png");
                        var temp2d = brdfimg.glTexture;
                        temp2d.getReader();
                        temp2d.uploadByteArray(true, false, temp2d.width, temp2d.height, temp2d.reader.data, true);
                        mr.materials[0].setTexture("brdf", assetMgr.getAssetByName("brdf.png"));
                        mr.materials[0].setTexture("uv_Basecolor", assetMgr.getAssetByName("albedo.jpg"));
                        mr.materials[0].setTexture("uv_Thickness", assetMgr.getAssetByName("thickness.png"));
                        mr.materials[0].setTexture("uv_Normal", assetMgr.getAssetByName("normals.png"));
                        mr.materials[0].setCubeTexture("u_sky", skytex1);
                        mr.materials[0].setFloat("CustomMetallic", 0.3);
                        mr.materials[0].setFloat("CustomRoughness", 0.8);
                        // NOTE: Screen Space Sub-Surface Scaterring
                        var blur_options = [
                            new m4m.math.vector4(0.22, 0.437, 0.635, 0.042),
                            new m4m.math.vector4(0.101, 0.355, 0.365, 0.220),
                            new m4m.math.vector4(0.119, 0.208, 0.0, 0.433),
                            new m4m.math.vector4(0.114, 0.0, 0.0, 0.753),
                            new m4m.math.vector4(0.364, 0.0, 0.0, 1.412),
                            new m4m.math.vector4(0.080, 0.0, 0.0, 2.722)
                        ];
                        var sh = _this.scene.app.getAssetMgr().getShader("sssss.shader.json");
                        if (!sh) {
                            console.warn("sssss.shader.json not find");
                            return;
                        }
                        // let psize = 1024;
                        var psize = 2048;
                        var color = new m4m.framework.cameraPostQueue_Color();
                        color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        if (!_this.camera.postQueues)
                            _this.camera.postQueues = [];
                        _this.camera.postQueues.push(color);
                        var depth = new m4m.framework.cameraPostQueue_Depth();
                        depth.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                        _this.camera.postQueues.push(depth);
                        var text = new m4m.framework.texture("_depth");
                        text.glTexture = depth.renderTarget;
                        var textcolor = new m4m.framework.texture("_color");
                        textcolor.glTexture = color.renderTarget;
                        // SSSSS Start
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[0]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[0]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[1]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[1]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[2]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[2]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[3]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[3]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[4]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[4]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        post0.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[5]); // NOTE
                        post0.material.setTexture("_MainTex", textcolor);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(1.0, 0.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        var blurText = new m4m.framework.texture("_color");
                        blurText.glTexture = post0.renderTarget;
                        var post0 = new m4m.framework.cameraPostQueue_Quad();
                        // post0.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, psize, psize, true, false);
                        post0.material.setShader(sh);
                        post0.material.setVector4("_BlurOptions", blur_options[5]); // NOTE
                        post0.material.setTexture("_MainTex", blurText);
                        post0.material.setTexture("_DepthTex", text);
                        post0.material.setVector4("_BlurDirection", new m4m.math.vector4(0.0, 1.0));
                        post0.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1 / psize, 1 / psize, psize, psize));
                        _this.camera.postQueues.push(post0);
                        // var blurText = new m4m.framework.texture("_color");
                        // blurText.glTexture = post0.renderTarget;
                        //_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
                        // var blurText = new m4m.framework.texture("_color");
                        // blurText.glTexture = post0.renderTarget;
                        // new m4m.math.vector3(blur_weights[0][0], );
                        // This function can be precomputed for efficiency
                        // float3 T(float s) {
                        //   return float3(0.233, 0.455, 0.649) * exp(-s * s / 0.0064) +
                        //          float3(0.1,   0.336, 0.344) * exp(-s * s / 0.0484) +
                        //          float3(0.118, 0.198, 0.0)   * exp(-s * s / 0.187)  +
                        //          float3(0.113, 0.007, 0.007) * exp(-s * s / 0.567)  +
                        //          float3(0.358, 0.004, 0.0)   * exp(-s * s / 1.99)   +
                        //          float3(0.078, 0.0,   0.0)   * exp(-s * s / 7.41);
                        // }
                    }
                });
            }
        });
    };
    test_sssss.prototype.loadpbrRes = function (lastState, state) {
        var _this = this;
        this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/SSSSS/") + "albedo.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/SSSSS/") + "normals.png", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/") + "brdf.png", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/SSSSS/") + "thickness.png", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        state.finish = true;
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_sssss.prototype.loadIBL = function (lastState, state) {
        var _this = this;
        this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "negx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "negy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "negz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s2) {
                            if (s2.isfinish) {
                                _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "posx_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s3) {
                                    if (s3.isfinish) {
                                        _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "posy_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s4) {
                                            if (s4.isfinish) {
                                                _this.app.getAssetMgr().load("".concat(resRootPath, "pbrRes/IBL/map/") + "posz_1.jpg", m4m.framework.AssetTypeEnum.Auto, function (s5) {
                                                    if (s5.isfinish) {
                                                        state.finish = true;
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_sssss.prototype.update = function (delta) {
        // this.timer += delta;
        // var x = Math.sin(this.timer);
        // var z = Math.cos(this.timer);
        // var x2 = Math.sin(this.timer * 0.1);
        // var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // // objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        this.taskmgr.move(delta); //推进task
        //    CameraController.instance().update(delta);
    };
    return test_sssss;
}());
var ShockType;
(function (ShockType) {
    ShockType[ShockType["Vertical"] = 0] = "Vertical";
    ShockType[ShockType["Horizontal"] = 1] = "Horizontal";
    ShockType[ShockType["Both"] = 2] = "Both";
})(ShockType || (ShockType = {}));
var CameraShock = /** @class */ (function () {
    function CameraShock() {
    }
    CameraShock.prototype.start = function () {
        this.isPlaying = false;
    };
    CameraShock.prototype.onPlay = function () {
    };
    CameraShock.prototype.play = function (strength, life, fade, shockType) {
        if (strength === void 0) { strength = 0.2; }
        if (life === void 0) { life = 0.5; }
        if (fade === void 0) { fade = false; }
        if (shockType === void 0) { shockType = ShockType.Both; }
        if (this.oldTranslate == null)
            this.oldTranslate = new m4m.math.vector3();
        m4m.math.vec3Clone(this.gameObject.transform.localTranslate, this.oldTranslate);
        this.isPlaying = true;
        this.strength = strength;
        this.ticker = this.life = life;
        this.fade = fade;
        this.shockType = shockType;
    };
    CameraShock.prototype.update = function (delta) {
        if (this.isPlaying) {
            if (this.ticker > 0) {
                this.ticker -= delta;
                var s = this.fade ? this.strength * (this.ticker / this.life) : this.strength;
                if (this.shockType == ShockType.Horizontal || this.shockType == ShockType.Both)
                    this.gameObject.transform.localTranslate.x = this.oldTranslate.x + (Math.random() - 0.5) * s;
                if (this.shockType == ShockType.Vertical || this.shockType == ShockType.Both)
                    this.gameObject.transform.localTranslate.y = this.oldTranslate.y + (Math.random() - 0.5) * s;
                this.gameObject.transform.markDirty();
            }
            else {
                this.gameObject.transform.localTranslate.x = this.oldTranslate.x;
                this.gameObject.transform.localTranslate.y = this.oldTranslate.y;
                this.isPlaying = false;
            }
        }
    };
    CameraShock.prototype.remove = function () {
    };
    CameraShock.prototype.clone = function () {
    };
    CameraShock = __decorate([
        m4m.reflect.nodeComponent
    ], CameraShock);
    return CameraShock;
}());
var Joystick = /** @class */ (function () {
    function Joystick() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.leftAxis = new m4m.math.vector2(0, 0);
        this.rightAxis = new m4m.math.vector2(0, 0);
        this.maxScale = 128;
        this.touchLeft = 0;
        this.touchRight = 0;
        this.mouseLeft = false;
        this.mouseRight = false;
    }
    Joystick.prototype.init = function (app, overlay2d) {
        var _this = this;
        this.app = app;
        this.overlay2d = overlay2d;
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.addJoystick.bind(this));
        document.addEventListener("mousedown", function (e) { _this.onMouseDown(e); });
        document.addEventListener("mouseup", function (e) { _this.onMouseUp(e); });
        document.addEventListener("mousemove", function (e) { _this.onMouseMove(e); });
        document.addEventListener("touchstart", function (e) { _this.onTouchStart(e); e.preventDefault(); });
        document.addEventListener("touchend", function (e) { _this.onTouchEnd(e); e.preventDefault(); });
        document.addEventListener("touchmove", function (e) { _this.onTouchMove(e); e.preventDefault(); });
    };
    Joystick.prototype.loadTexture = function (laststate, state) {
        var _this = this;
        this.app.getAssetMgr().load("".concat(resRootPath, "texture/joystick0.png"), m4m.framework.AssetTypeEnum.Auto, function (s0) {
            if (s0.isfinish) {
                _this.app.getAssetMgr().load("".concat(resRootPath, "texture/joystick1.png"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                    if (s1.isfinish) {
                        state.finish = true;
                    }
                    else {
                        state.error = true;
                    }
                });
            }
            else {
                state.error = true;
            }
        });
    };
    Joystick.prototype.addJoystick = function (laststate, state) {
        { //left
            this.joystickLeft0 = new m4m.framework.transform2D();
            this.joystickLeft0.name = "left0";
            this.joystickLeft0.width = 256;
            this.joystickLeft0.height = 256;
            this.joystickLeft0.pivot = new m4m.math.vector2(0.5, 0.5);
            this.joystickLeft0.localTranslate = new m4m.math.vector2(window.innerWidth * 0.16, window.innerHeight * 0.75);
            var img0 = this.joystickLeft0.addComponent("image2D");
            img0.imageType = m4m.framework.ImageType.Simple;
            var tex0 = this.app.getAssetMgr().getAssetByName("joystick0.png");
            img0.sprite = this.app.getAssetMgr().getDefaultSprite("grid_sprite");
            this.overlay2d.addChild(this.joystickLeft0);
            this.joystickLeft0.markDirty();
            this.joystickLeft1 = new m4m.framework.transform2D();
            this.joystickLeft1.name = "left1";
            this.joystickLeft1.width = 256;
            this.joystickLeft1.height = 256;
            this.joystickLeft1.pivot = new m4m.math.vector2(0.5, 0.5);
            this.joystickLeft1.localTranslate = new m4m.math.vector2(window.innerWidth * 0.16, window.innerHeight * 0.75);
            var img1 = this.joystickLeft1.addComponent("image2D");
            img1.imageType = m4m.framework.ImageType.Simple;
            var tex1 = this.app.getAssetMgr().getAssetByName("joystick1.png");
            img1.sprite = this.app.getAssetMgr().getDefaultSprite("grid_sprite");
            this.overlay2d.addChild(this.joystickLeft1);
            this.joystickLeft1.markDirty();
        }
        { //right
            this.joystickRight0 = new m4m.framework.transform2D();
            this.joystickRight0.name = "right0";
            this.joystickRight0.width = 256;
            this.joystickRight0.height = 256;
            this.joystickRight0.pivot = new m4m.math.vector2(0.5, 0.5);
            this.joystickRight0.localTranslate = new m4m.math.vector2(window.innerWidth * 0.84, window.innerHeight * 0.75);
            var img0 = this.joystickRight0.addComponent("image2D");
            img0.imageType = m4m.framework.ImageType.Simple;
            var tex0 = this.app.getAssetMgr().getAssetByName("joystick0.png");
            img0.sprite = this.app.getAssetMgr().getDefaultSprite("grid_sprite");
            this.overlay2d.addChild(this.joystickRight0);
            this.joystickRight0.markDirty();
            this.joystickRight1 = new m4m.framework.transform2D();
            this.joystickRight1.name = "right1";
            this.joystickRight1.width = 256;
            this.joystickRight1.height = 256;
            this.joystickRight1.pivot = new m4m.math.vector2(0.5, 0.5);
            this.joystickRight1.localTranslate = new m4m.math.vector2(window.innerWidth * 0.84, window.innerHeight * 0.75);
            var img1 = this.joystickRight1.addComponent("image2D");
            img1.imageType = m4m.framework.ImageType.Simple;
            var tex1 = this.app.getAssetMgr().getAssetByName("joystick1.png");
            img1.sprite = this.app.getAssetMgr().getDefaultSprite("grid_sprite");
            this.overlay2d.addChild(this.joystickRight1);
            this.joystickRight1.markDirty();
        }
        state.finish = true;
    };
    Object.defineProperty(Joystick.prototype, "leftTouching", {
        get: function () {
            return this.touchLeft != 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Joystick.prototype, "rightTouching", {
        get: function () {
            return this.touchRight != 0;
        },
        enumerable: false,
        configurable: true
    });
    Joystick.prototype.onMouseDown = function (e) {
        if (e.clientX <= this.overlay2d.canvas.pixelWidth / 2) {
            this.mouseLeft = true;
            var v = new m4m.math.vector2(e.clientX, e.clientY);
            m4m.math.vec2Subtract(v, this.joystickLeft0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickLeft0.localTranslate, v, this.joystickLeft1.localTranslate);
            }
            else {
                this.joystickLeft1.localTranslate.x = e.clientX;
                this.joystickLeft1.localTranslate.y = e.clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.leftAxis);
            this.joystickLeft1.markDirty();
        }
        else {
            this.mouseRight = true;
            var v = new m4m.math.vector2(e.clientX, e.clientY);
            m4m.math.vec2Subtract(v, this.joystickRight0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickRight0.localTranslate, v, this.joystickRight1.localTranslate);
            }
            else {
                this.joystickRight1.localTranslate.x = e.clientX;
                this.joystickRight1.localTranslate.y = e.clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.rightAxis);
            this.joystickRight1.markDirty();
        }
    };
    Joystick.prototype.onMouseUp = function (e) {
        if (this.mouseRight) {
            if (this.triggerFunc != null) {
                this.triggerFunc();
            }
        }
        this.mouseLeft = false;
        this.joystickLeft1.localTranslate.x = this.joystickLeft0.localTranslate.x;
        this.joystickLeft1.localTranslate.y = this.joystickLeft0.localTranslate.y;
        this.leftAxis = new m4m.math.vector2(0, 0);
        this.joystickLeft1.markDirty();
        this.mouseRight = false;
        this.joystickRight1.localTranslate.x = this.joystickRight0.localTranslate.x;
        this.joystickRight1.localTranslate.y = this.joystickRight0.localTranslate.y;
        this.rightAxis = new m4m.math.vector2(0, 0);
        this.joystickRight1.markDirty();
    };
    Joystick.prototype.onMouseMove = function (e) {
        if (this.mouseLeft) {
            var v = new m4m.math.vector2(e.clientX, e.clientY);
            m4m.math.vec2Subtract(v, this.joystickLeft0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickLeft0.localTranslate, v, this.joystickLeft1.localTranslate);
            }
            else {
                this.joystickLeft1.localTranslate.x = e.clientX;
                this.joystickLeft1.localTranslate.y = e.clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.leftAxis);
            this.joystickLeft1.markDirty();
        }
        if (this.mouseRight) {
            var v = new m4m.math.vector2(e.clientX, e.clientY);
            m4m.math.vec2Subtract(v, this.joystickRight0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickRight0.localTranslate, v, this.joystickRight1.localTranslate);
            }
            else {
                this.joystickRight1.localTranslate.x = e.clientX;
                this.joystickRight1.localTranslate.y = e.clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.rightAxis);
            this.joystickRight1.markDirty();
        }
    };
    Joystick.prototype.onTouchStart = function (e) {
        if (e.touches[0].clientX <= this.overlay2d.canvas.pixelWidth / 2) {
            this.touchLeft = e.touches[0].identifier;
            var v = new m4m.math.vector2(e.touches[0].clientX, e.touches[0].clientY);
            m4m.math.vec2Subtract(v, this.joystickLeft0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickLeft0.localTranslate, v, this.joystickLeft1.localTranslate);
            }
            else {
                this.joystickLeft1.localTranslate.x = e.touches[0].clientX;
                this.joystickLeft1.localTranslate.y = e.touches[0].clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.leftAxis);
            this.joystickLeft1.markDirty();
        }
        else {
            this.touchRight = e.touches[0].identifier;
            var v = new m4m.math.vector2(e.touches[0].clientX, e.touches[0].clientY);
            m4m.math.vec2Subtract(v, this.joystickRight0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickRight0.localTranslate, v, this.joystickRight1.localTranslate);
            }
            else {
                this.joystickRight1.localTranslate.x = e.touches[0].clientX;
                this.joystickRight1.localTranslate.y = e.touches[0].clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.rightAxis);
            this.joystickRight1.markDirty();
        }
        if (e.touches[1] != null && e.touches[1].clientX <= this.overlay2d.canvas.pixelWidth / 2 && this.touchLeft == 0) {
            this.touchLeft = e.touches[1].identifier;
            var v = new m4m.math.vector2(e.touches[1].clientX, e.touches[1].clientY);
            m4m.math.vec2Subtract(v, this.joystickLeft0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickLeft0.localTranslate, v, this.joystickLeft1.localTranslate);
            }
            else {
                this.joystickLeft1.localTranslate.x = e.touches[1].clientX;
                this.joystickLeft1.localTranslate.y = e.touches[1].clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.leftAxis);
            this.joystickLeft1.markDirty();
        }
        else if (e.touches[1] != null && e.touches[1].clientX > this.overlay2d.canvas.pixelWidth / 2 && this.touchRight == 0) {
            this.touchRight = e.touches[1].identifier;
            var v = new m4m.math.vector2(e.touches[1].clientX, e.touches[1].clientY);
            m4m.math.vec2Subtract(v, this.joystickRight0.localTranslate, v);
            if (m4m.math.vec2Length(v) > this.maxScale) {
                m4m.math.vec2Normalize(v, v);
                m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                m4m.math.vec2Add(this.joystickRight0.localTranslate, v, this.joystickRight1.localTranslate);
            }
            else {
                this.joystickRight1.localTranslate.x = e.touches[1].clientX;
                this.joystickRight1.localTranslate.y = e.touches[1].clientY;
            }
            m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.rightAxis);
            this.joystickRight1.markDirty();
        }
    };
    Joystick.prototype.onTouchEnd = function (e) {
        if (this.touchLeft) {
            var flag = false;
            for (var i = 0; i < e.touches.length; i++) {
                if (this.touchLeft == e.touches[i].identifier) {
                    flag = true;
                }
            }
            if (!flag) {
                this.touchLeft = 0;
                this.joystickLeft1.localTranslate.x = this.joystickLeft0.localTranslate.x;
                this.joystickLeft1.localTranslate.y = this.joystickLeft0.localTranslate.y;
                this.leftAxis.x = 0;
                this.leftAxis.y = 0;
                this.joystickLeft1.markDirty();
            }
        }
        if (this.touchRight) {
            var flag = false;
            for (var i = 0; i < e.touches.length; i++) {
                if (this.touchRight == e.touches[i].identifier) {
                    flag = true;
                }
            }
            if (!flag) {
                this.touchRight = 0;
                this.joystickRight1.localTranslate.x = this.joystickRight0.localTranslate.x;
                this.joystickRight1.localTranslate.y = this.joystickRight0.localTranslate.y;
                this.rightAxis.x = 0;
                this.rightAxis.y = 0;
                this.joystickRight1.markDirty();
                if (this.triggerFunc != null) {
                    this.triggerFunc();
                }
            }
        }
    };
    Joystick.prototype.onTouchMove = function (e) {
        if (this.touchLeft != 0) {
            var index = -1;
            if (this.touchLeft == e.touches[0].identifier) {
                index = 0;
            }
            else if (e.touches[1] != null && this.touchLeft == e.touches[1].identifier) {
                index = 1;
            }
            if (index != -1) {
                var v = new m4m.math.vector2(e.touches[index].clientX, e.touches[index].clientY);
                m4m.math.vec2Subtract(v, this.joystickLeft0.localTranslate, v);
                if (m4m.math.vec2Length(v) > this.maxScale) {
                    m4m.math.vec2Normalize(v, v);
                    m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                    m4m.math.vec2Add(this.joystickLeft0.localTranslate, v, this.joystickLeft1.localTranslate);
                }
                else {
                    this.joystickLeft1.localTranslate.x = e.touches[index].clientX;
                    this.joystickLeft1.localTranslate.y = e.touches[index].clientY;
                }
                m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.leftAxis);
                this.joystickLeft1.markDirty();
            }
        }
        if (this.touchRight != 0) {
            var index = -1;
            if (this.touchRight == e.touches[0].identifier) {
                index = 0;
            }
            else if (e.touches[1] != null && this.touchRight == e.touches[1].identifier) {
                index = 1;
            }
            if (index != -1) {
                var v = new m4m.math.vector2(e.touches[index].clientX, e.touches[index].clientY);
                m4m.math.vec2Subtract(v, this.joystickRight0.localTranslate, v);
                if (m4m.math.vec2Length(v) > this.maxScale) {
                    m4m.math.vec2Normalize(v, v);
                    m4m.math.vec2ScaleByNum(v, this.maxScale, v);
                    m4m.math.vec2Add(this.joystickRight0.localTranslate, v, this.joystickRight1.localTranslate);
                }
                else {
                    this.joystickRight1.localTranslate.x = e.touches[index].clientX;
                    this.joystickRight1.localTranslate.y = e.touches[index].clientY;
                }
                m4m.math.vec2ScaleByNum(v, 1.0 / this.maxScale, this.rightAxis);
                this.joystickRight1.markDirty();
            }
        }
    };
    Joystick.prototype.update = function (delta) {
        this.taskmgr.move(delta);
    };
    return Joystick;
}());
var demo;
(function (demo) {
    var TankGame = /** @class */ (function () {
        function TankGame() {
            this.cubes = [];
            this.walls = [];
            this.taskmgr = new m4m.framework.taskMgr();
            this.tankMoveSpeed = 4;
            this.tankRotateSpeed = new m4m.math.vector3(0, 72, 0);
            this.gunRotateSpeed = new m4m.math.vector3(0, 150, 0);
            this.angleLimit = 5;
            this.colVisible = false;
            this.keyMap = {};
            this.bulletId = 0;
            this.bulletList = [];
            this.bulletSpeed = 30;
            this.fireStep = 0.5;
            this.fireTick = 0;
        }
        TankGame.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
            });
        };
        TankGame.prototype.loadTexture = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/zg256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
            });
        };
        TankGame.prototype.loadHeroPrefab = function (laststate, state) {
            var _this = this;
            var resName = "tank01";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(resName, "/").concat(resName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("".concat(resName, ".prefab.json"), "".concat(resName, ".assetbundle.json"));
                    _this.heroTank = _prefab.getCloneTrans();
                    _this.scene.addChild(_this.heroTank);
                    _this.heroTank.localScale = new m4m.math.vector3(4, 4, 4);
                    _this.heroTank.localTranslate = new m4m.math.vector3(0, 0, 0);
                    var col = _this.heroTank.gameObject.addComponent("boxcollider");
                    col.center = new m4m.math.vector3(0, 0.2, 0);
                    col.size = new m4m.math.vector3(0.46, 0.4, 0.54);
                    col.colliderVisible = _this.colVisible;
                    _this.heroGun = _this.heroTank.find("tank_up");
                    _this.heroSlot = _this.heroGun.find("slot");
                    state.finish = true;
                }
            });
        };
        TankGame.prototype.loadEnemyPrefab = function (laststate, state) {
            var _this = this;
            var resName = "tank02";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(resName, "/").concat(resName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("".concat(resName, ".prefab.json"), "".concat(resName, ".assetbundle.json"));
                    _this.enemyTank = _prefab.getCloneTrans();
                    _this.scene.addChild(_this.enemyTank);
                    _this.enemyTank.localScale = new m4m.math.vector3(4, 4, 4);
                    _this.enemyTank.localTranslate = new m4m.math.vector3(0, 0, -6);
                    var col = _this.enemyTank.gameObject.addComponent("boxcollider");
                    col.center = new m4m.math.vector3(0, 0.2, 0);
                    col.size = new m4m.math.vector3(0.46, 0.4, 0.54);
                    col.colliderVisible = _this.colVisible;
                    _this.enemyGun = _this.enemyTank.find("tank_up");
                    _this.enemySlot = _this.enemyGun.find("slot");
                    state.finish = true;
                }
            });
        };
        TankGame.prototype.loadScene = function (laststate, state) {
            var _this = this;
            var resName = "test_scene";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(resName, "/").concat(resName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _scene = _this.app.getAssetMgr().getAssetByName("".concat(resName, ".scene.json"), "".concat(resName, ".assetbundle.json"));
                    var _root = _scene.getSceneRoot();
                    _this.scene.addChild(_root);
                    _root.localTranslate.y = -0.1;
                    for (var i = 0; i < 8; i++) {
                        var tran = _root.find("wall" + i);
                        var col = tran.gameObject.getComponent("boxcollider");
                        col.colliderVisible = _this.colVisible;
                        _this.walls.push(tran);
                    }
                    _this.app.getScene().lightmaps = [];
                    _scene.useLightMap(_this.app.getScene());
                    state.finish = true;
                }
            });
        };
        TankGame.prototype.addCameraAndLight = function (laststate, state) {
            var _this = this;
            var tranCam = new m4m.framework.transform();
            tranCam.name = "Cam";
            this.scene.addChild(tranCam);
            this.camera = tranCam.gameObject.addComponent("camera");
            this.camera.near = 0.1;
            this.camera.far = 200;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3);
            this.cameraShock = tranCam.gameObject.addComponent("CameraShock");
            tranCam.localTranslate = new m4m.math.vector3(0, 20, -16);
            tranCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            tranCam.markDirty();
            var list = [
                "标准",
                "马赛克",
                "径向模糊",
                "旋转扭曲",
                "桶模糊",
                "灰度图",
                "棕褐色调",
                "反色",
                "高斯滤波",
                "均值滤波",
                "锐化",
                "膨胀",
                "腐蚀",
                "HDR"
            ];
            var select = document.createElement("select");
            select.style.top = "240px";
            select.style.right = "0px";
            select.style.position = "absolute";
            this.app.container.appendChild(select);
            for (var i = 0; i < list.length; i++) {
                var op = document.createElement("option");
                op.value = i.toString();
                op.innerText = list[i];
                select.appendChild(op);
            }
            select.onchange = function () {
                _this.camera.postQueues = [];
                var color = new m4m.framework.cameraPostQueue_Color();
                color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 2048, 2048, true, false);
                _this.camera.postQueues.push(color);
                var textcolor = new m4m.framework.texture("_color");
                textcolor.glTexture = color.renderTarget;
                if (select.value == "0") {
                    _this.camera.postQueues = [];
                }
                else if (select.value == "1") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("mosaic.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "2") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("radial_blur.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_Level", 25);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "3") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("contort.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_UD", 120);
                    _this.postQuad.material.setFloat("_UR", 0.3);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "4") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("barrel_blur.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_Power", 0.3);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "5") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 1);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "6") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 2);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "7") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 3);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "8") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 4);
                    _this.postQuad.material.setFloat("_Step", 2);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "9") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 5);
                    _this.postQuad.material.setFloat("_Step", 2);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "10") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 6);
                    _this.postQuad.material.setFloat("_Step", 0.1);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "11") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 7);
                    _this.postQuad.material.setFloat("_Step", 0.3);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "12") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("filter_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_FilterType", 8);
                    _this.postQuad.material.setFloat("_Step", 0.3);
                    _this.camera.postQueues.push(_this.postQuad);
                }
                else if (select.value == "13") {
                    _this.postQuad = new m4m.framework.cameraPostQueue_Quad();
                    _this.postQuad.material.setShader(_this.scene.app.getAssetMgr().getShader("hdr_quad.shader.json"));
                    _this.postQuad.material.setTexture("_MainTex", textcolor);
                    _this.postQuad.material.setFloat("_K", 1.5);
                    _this.camera.postQueues.push(_this.postQuad);
                }
            };
            var tranLight = new m4m.framework.transform();
            tranLight.name = "light";
            this.scene.addChild(tranLight);
            this.light = tranLight.gameObject.addComponent("light");
            this.light.type = m4m.framework.LightTypeEnum.Direction;
            tranLight.localTranslate.x = 5;
            tranLight.localTranslate.y = 5;
            tranLight.localTranslate.z = -5;
            tranLight.lookatPoint(new m4m.math.vector3(0, 0, 0));
            tranLight.markDirty();
            state.finish = true;
        };
        TankGame.prototype.addJoystick = function (laststate, state) {
            var _this = this;
            this.overlay2d = new m4m.framework.overlay2D();
            // this.overlay2d.autoAsp = false;
            this.overlay2d.canvas.pixelWidth = window.innerWidth;
            this.overlay2d.canvas.pixelHeight = window.innerHeight;
            this.camera.addOverLay(this.overlay2d);
            this.joystick = new Joystick();
            this.joystick.init(this.app, this.overlay2d);
            this.joystick.triggerFunc = function () {
                if (_this.fireTick >= _this.fireStep) {
                    _this.fireTick = 0;
                    _this.fire();
                }
            };
            state.finish = true;
        };
        TankGame.prototype.addObject = function (laststate, state) {
            { //add some puppets
                var n = 2;
                for (var i = 0; i < n; i++) {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube" + i;
                    cube.localScale = new m4m.math.vector3(3, 3, 3);
                    cube.localTranslate = new m4m.math.vector3(-2 * (n - 1) + i * 4, 2, 16);
                    this.scene.addChild(cube);
                    var filter = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    filter.mesh = smesh;
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var shader = this.app.getAssetMgr().getShader("light1.shader.json");
                    if (shader != null) {
                        renderer.materials = [];
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials[0].setShader(shader);
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        renderer.materials[0].setTexture("_MainTex", texture);
                    }
                    var col = cube.gameObject.addComponent("boxcollider");
                    // col.size = new m4m.math.vector3(1, 1, 1);
                    col.colliderVisible = this.colVisible;
                    cube.markDirty();
                    this.cubes.push(cube);
                }
            }
            state.finish = true;
        };
        TankGame.prototype.start = function (app) {
            var _this = this;
            this.label = document.getElementById("Label");
            this.app = app;
            this.scene = app.getScene();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadTexture.bind(this));
            this.taskmgr.addTaskCall(this.loadHeroPrefab.bind(this));
            this.taskmgr.addTaskCall(this.loadEnemyPrefab.bind(this));
            this.taskmgr.addTaskCall(this.loadScene.bind(this));
            this.taskmgr.addTaskCall(this.addCameraAndLight.bind(this));
            this.taskmgr.addTaskCall(this.addObject.bind(this));
            this.taskmgr.addTaskCall(this.addJoystick.bind(this));
            document.addEventListener("keydown", function (e) { _this.keyMap[e.keyCode] = true; });
        };
        TankGame.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            if (this.joystick != null) {
                this.joystick.update(delta);
            }
            this.tankControl(delta);
            this.updateBullet(delta);
            for (var i = 0; i < this.bulletList.length; i++) {
                var col = this.bulletList[i].transform.gameObject.getComponent("boxcollider");
                for (var j = 0; j < this.cubes.length; j++) {
                    var c = this.cubes[j];
                    if (c != null && col.intersectsTransform(c)) {
                        this.scene.removeChild(c);
                        c.dispose();
                        this.bulletList[i].life = 0;
                        break;
                    }
                }
            }
            this.fireTick += delta;
        };
        TankGame.prototype.testTankCol = function (tran) {
            var col = tran.gameObject.getComponent("boxcollider");
            for (var i = 0; i < this.cubes.length; i++) {
                var c_1 = this.cubes[i].gameObject.getComponent("boxcollider");
                if (c_1 != null && col.obb.intersects(c_1.obb)) {
                    return true;
                }
            }
            for (var i = 0; i < this.walls.length; i++) {
                var c_2 = this.walls[i].gameObject.getComponent("boxcollider");
                if (col.obb.intersects(c_2.obb)) {
                    return true;
                }
            }
            var c = this.enemyTank.gameObject.getComponent("boxcollider");
            if (col.obb.intersects(c.obb)) {
                return true;
            }
            return false;
        };
        TankGame.prototype.tankControl = function (delta) {
            if (this.joystick != null) {
                var targetAngle = new m4m.math.vector3();
                var goForward = true;
                if (m4m.math.vec2Length(this.joystick.leftAxis) > 0.05) { // tank rotate
                    var point = new m4m.math.vector3(this.joystick.leftAxis.x, 0, -this.joystick.leftAxis.y);
                    m4m.math.vec3Add(this.heroTank.getWorldTranslate(), point, point);
                    var quat = new m4m.math.quaternion();
                    m4m.math.quatLookat(this.heroTank.getWorldTranslate(), point, quat);
                    m4m.math.quatToEulerAngles(quat, targetAngle);
                    var rotateSpeed = new m4m.math.vector3();
                    m4m.math.vec3ScaleByNum(this.tankRotateSpeed, delta, rotateSpeed);
                    var d = Math.abs(this.heroTank.localEulerAngles.y - targetAngle.y);
                    if (d > 180) {
                        d = 360 - d;
                    }
                    if (d <= 90) {
                        goForward = true;
                    }
                    else {
                        if (targetAngle.y > 0) {
                            targetAngle.y -= 180;
                        }
                        else {
                            targetAngle.y += 180;
                        }
                        goForward = false;
                    }
                    if (d > rotateSpeed.y) {
                        var vec = new m4m.math.vector3();
                        if (this.heroTank.localEulerAngles.y > targetAngle.y && this.heroTank.localEulerAngles.y - targetAngle.y < 180
                            || targetAngle.y > this.heroTank.localEulerAngles.y && targetAngle.y - this.heroTank.localEulerAngles.y >= 180) {
                            m4m.math.vec3Subtract(this.heroTank.localEulerAngles, rotateSpeed, vec);
                        }
                        else {
                            m4m.math.vec3Add(this.heroTank.localEulerAngles, rotateSpeed, vec);
                        }
                        // var temp = new m4m.math.vector3();
                        // m4m.math.vec3Clone(this.heroTank.localEulerAngles, temp);
                        this.heroTank.localEulerAngles = vec;
                        // if (this.testTankCol(this.heroTank))
                        // {
                        //     this.heroTank.localEulerAngles = temp;
                        // }
                    }
                    else {
                        // var temp = new m4m.math.vector3();
                        // m4m.math.vec3Clone(this.heroTank.localEulerAngles, temp);
                        this.heroTank.localEulerAngles = targetAngle;
                        // if (this.testTankCol(this.heroTank))
                        // {
                        //     this.heroTank.localEulerAngles = temp;
                        // }
                    }
                    this.heroTank.markDirty();
                }
                if (m4m.math.vec2Length(this.joystick.leftAxis) > 0.05) { // tank move
                    var speed = 0;
                    if (Math.abs(this.heroTank.localEulerAngles.y - targetAngle.y) < this.angleLimit) {
                        speed = this.tankMoveSpeed * delta;
                    }
                    else {
                        speed = this.tankMoveSpeed * delta * 0.8;
                    }
                    var v = new m4m.math.vector3();
                    this.heroTank.getForwardInWorld(v);
                    m4m.math.vec3ScaleByNum(v, speed, v);
                    if (!goForward) {
                        m4m.math.vec3ScaleByNum(v, -1, v);
                    }
                    var col = this.heroTank.gameObject.getComponent("boxcollider");
                    var f = false;
                    var r = false;
                    var l = false;
                    m4m.math.vec3Add(col.obb.center, v, col.obb.center);
                    f = this.testTankCol(this.heroTank);
                    m4m.math.vec3Subtract(col.obb.center, v, col.obb.center);
                    var q = new m4m.math.quaternion();
                    var v1 = new m4m.math.vector3();
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, 45, q);
                    m4m.math.quatTransformVector(q, v, v1);
                    m4m.math.vec3ScaleByNum(v1, 0.5, v1);
                    m4m.math.vec3Add(col.obb.center, v1, col.obb.center);
                    r = this.testTankCol(this.heroTank);
                    m4m.math.vec3Subtract(col.obb.center, v1, col.obb.center);
                    var v2 = new m4m.math.vector3();
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, -45, q);
                    m4m.math.quatTransformVector(q, v, v2);
                    m4m.math.vec3ScaleByNum(v2, 0.5, v2);
                    m4m.math.vec3Add(col.obb.center, v2, col.obb.center);
                    l = this.testTankCol(this.heroTank);
                    m4m.math.vec3Subtract(col.obb.center, v2, col.obb.center);
                    if (!f) {
                        m4m.math.vec3Add(this.heroTank.localTranslate, v, this.heroTank.localTranslate);
                    }
                    else if (!r && l) {
                        m4m.math.vec3Add(this.heroTank.localTranslate, v1, this.heroTank.localTranslate);
                    }
                    else if (r && !l) {
                        m4m.math.vec3Add(this.heroTank.localTranslate, v2, this.heroTank.localTranslate);
                    }
                    this.heroTank.markDirty();
                }
                if (m4m.math.vec2Length(this.joystick.rightAxis) > 0.2) { // gun rotate
                    var point = new m4m.math.vector3(this.joystick.rightAxis.x, 0, -this.joystick.rightAxis.y);
                    m4m.math.vec3Add(this.heroGun.getWorldTranslate(), point, point);
                    var quat = new m4m.math.quaternion();
                    m4m.math.quatLookat(this.heroGun.getWorldTranslate(), point, quat);
                    var vec = new m4m.math.vector3();
                    m4m.math.quatToEulerAngles(quat, vec);
                    m4m.math.vec3Subtract(vec, this.heroTank.localEulerAngles, vec);
                    if (vec.y > 180) {
                        vec.y -= 360;
                    }
                    if (vec.y < -180) {
                        vec.y += 360;
                    }
                    var rotateSpeed = new m4m.math.vector3();
                    m4m.math.vec3ScaleByNum(this.gunRotateSpeed, delta, rotateSpeed);
                    if (Math.abs(this.heroGun.localEulerAngles.y - vec.y) > rotateSpeed.y) {
                        if (this.heroGun.localEulerAngles.y > vec.y && this.heroGun.localEulerAngles.y - vec.y < 180
                            || vec.y > this.heroGun.localEulerAngles.y && vec.y - this.heroGun.localEulerAngles.y >= 180) {
                            m4m.math.vec3Subtract(this.heroGun.localEulerAngles, rotateSpeed, vec);
                        }
                        else {
                            m4m.math.vec3Add(this.heroGun.localEulerAngles, rotateSpeed, vec);
                        }
                        this.heroGun.localEulerAngles = vec;
                    }
                    else {
                        this.heroGun.localEulerAngles = vec;
                    }
                    this.heroGun.markDirty();
                }
                if (this.camera != null) {
                    this.camera.gameObject.transform.localTranslate.x = this.heroTank.localTranslate.x;
                    this.camera.gameObject.transform.localTranslate.y = this.heroTank.localTranslate.y + 20;
                    this.camera.gameObject.transform.localTranslate.z = this.heroTank.localTranslate.z - 16;
                    this.camera.gameObject.transform.markDirty();
                }
            }
        };
        TankGame.prototype.fire = function () {
            var tran = new m4m.framework.transform();
            tran.name = "bullet" + this.bulletId;
            tran.localScale = new m4m.math.vector3(0.2, 0.2, 0.2);
            tran.localTranslate = this.heroSlot.getWorldTranslate();
            this.scene.addChild(tran);
            var filter = tran.gameObject.addComponent("meshFilter");
            var smesh = this.app.getAssetMgr().getDefaultMesh("sphere");
            filter.mesh = smesh;
            var renderer = tran.gameObject.addComponent("meshRenderer");
            var shader = this.app.getAssetMgr().getShader("light1.shader.json");
            if (shader != null) {
                renderer.materials = [];
                renderer.materials.push(new m4m.framework.material());
                renderer.materials[0].setShader(shader);
                var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                renderer.materials[0].setTexture("_MainTex", texture);
            }
            var col = tran.gameObject.addComponent("boxcollider");
            col.size = new m4m.math.vector3(0.2, 0.2, 0.2);
            col.colliderVisible = this.colVisible;
            tran.markDirty();
            var dir = new m4m.math.vector3();
            this.heroGun.getForwardInWorld(dir);
            var bullet = {
                id: this.bulletId++,
                transform: tran,
                direction: dir,
                life: 3
            };
            this.bulletList.push(bullet);
            // this.cameraShock.play(1, 0.5, true);
        };
        TankGame.prototype.updateBullet = function (delta) {
            for (var i = 0; i < this.bulletList.length; i++) {
                var b = this.bulletList[i];
                var v = m4m.math.pool.new_vector3();
                var speed = m4m.math.pool.new_vector3();
                m4m.math.vec3ScaleByNum(b.direction, this.bulletSpeed * delta, speed);
                m4m.math.vec3Add(b.transform.localTranslate, speed, v);
                b.transform.localTranslate = v;
                b.transform.markDirty();
                b.life -= delta;
            }
            for (var i = 0; i < this.bulletList.length; i++) {
                var b = this.bulletList[i];
                if (b.life <= 0) {
                    this.bulletList.splice(i, 1);
                    this.scene.removeChild(b.transform);
                    b.transform.dispose();
                }
            }
        };
        return TankGame;
    }());
    demo.TankGame = TankGame;
})(demo || (demo = {}));
var t;
(function (t) {
    var test_three_leaved_rose_curve = /** @class */ (function () {
        function test_three_leaved_rose_curve() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.count = 0;
            this.counttimer = 0;
            this.angularVelocity = new m4m.math.vector3(10, 0, 0);
            this.eulerAngle = m4m.math.pool.new_vector3();
            this.zeroPoint = new m4m.math.vector3(0, 0, 0);
        }
        test_three_leaved_rose_curve.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_three_leaved_rose_curve.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/trailtest2_00000.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_three_leaved_rose_curve.prototype.loadRole = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/dragon/dragon.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("dragon.prefab.json");
                    _this.role = _prefab.getCloneTrans();
                    _this.role.name = "dragon";
                    // this.roleLength = this.role.children.length;
                    _this.scene.addChild(_this.role);
                    var trailtrans = new m4m.framework.transform();
                    trailtrans.localTranslate.y = 0.005;
                    _this.role.addChild(trailtrans);
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_forward, 90, trailtrans.localRotate);
                    trailtrans.markDirty();
                    var trailrender = trailtrans.gameObject.addComponent("trailRender");
                    //trailrender.color=new m4m.math.color(1.0,0,0,1.0);
                    trailrender.setspeed(0.35);
                    trailrender.setWidth(0.5);
                    var mat = new m4m.framework.material();
                    var shader = _this.app.getAssetMgr().getShader("transparent_bothside.shader.json");
                    var tex = _this.app.getAssetMgr().getAssetByName("trailtest2_00000.imgdesc.json");
                    mat.setShader(shader);
                    mat.setTexture("_MainTex", tex);
                    trailrender.material = mat;
                    // this.aniplayer = this.role.gameObject.getComponent("aniplayer") as m4m.framework.aniplayer;
                    state.finish = true;
                }
            });
        };
        test_three_leaved_rose_curve.prototype.addcam = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 1000;
            objCam.localTranslate = new m4m.math.vector3(0, 10, 10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            state.finish = true;
        };
        test_three_leaved_rose_curve.prototype.addcube = function (laststate, state) {
            //添加一个盒子
            {
                //添加一个盒子
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    cube.localScale.x = cube.localScale.y = 0.5;
                    cube.localScale.z = 2;
                    cube.localTranslate.x = 0;
                    this.scene.addChild(cube);
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube = cube;
                    var trailtrans = new m4m.framework.transform();
                    trailtrans.localTranslate.z = -0.5;
                    this.cube.addChild(trailtrans);
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_forward, 90, trailtrans.localRotate);
                    trailtrans.markDirty();
                    var trailrender = trailtrans.gameObject.addComponent("trailRender");
                    //trailrender.color=new m4m.math.color(1.0,0,0,1.0);
                    trailrender.setspeed(0.25);
                    trailrender.setWidth(0.25);
                    var mat = new m4m.framework.material();
                    var shader = this.app.getAssetMgr().getShader("transparent_bothside.shader.json");
                    var tex = this.app.getAssetMgr().getAssetByName("trailtest2_00000.imgdesc.json");
                    mat.setShader(shader);
                    mat.setTexture("_MainTex", tex);
                    trailrender.material = mat;
                }
                {
                    var ref_cube = new m4m.framework.transform();
                    ref_cube.name = "ref_cube";
                    ref_cube.localScale.x = ref_cube.localScale.y = ref_cube.localScale.z = 1;
                    // ref_cube.localTranslate.x = 2;
                    this.scene.addChild(ref_cube);
                    var mesh = ref_cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = ref_cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("shader/def");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube2 = ref_cube;
                }
            }
            state.finish = true;
        };
        test_three_leaved_rose_curve.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.loadRole.bind(this));
            // this.taskmgr.addTaskCall(this.addcube.bind(this))
            this.taskmgr.addTaskCall(this.addcam.bind(this));
        };
        test_three_leaved_rose_curve.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            if (this.role != null) {
                var a = 5;
                {
                    var theta = this.timer * 0.5;
                    this.role.localTranslate.x = a * Math.cos(3 * theta) * Math.cos(theta);
                    this.role.localTranslate.z = a * Math.cos(3 * theta) * Math.sin(theta);
                }
                {
                    var deltaTheta = this.timer * 0.5 + 0.001;
                    var targetPoint = m4m.math.pool.new_vector3();
                    targetPoint.x = a * Math.cos(3 * deltaTheta) * Math.cos(deltaTheta);
                    targetPoint.z = a * Math.cos(3 * deltaTheta) * Math.sin(deltaTheta);
                    this.role.lookatPoint(targetPoint);
                    m4m.math.pool.delete_vector3(targetPoint);
                    var q = m4m.math.pool.new_quaternion();
                    m4m.math.quatFromEulerAngles(-90, 0, 0, q);
                    m4m.math.quatMultiply(this.role.localRotate, q, this.role.localRotate);
                    m4m.math.pool.delete_quaternion(q);
                }
                // {
                //     let deltaTheta = this.timer*0.5 + 0.001;
                //     this.cube.localTranslate.x = a * Math.cos(3 * deltaTheta) * Math.cos(deltaTheta);
                //     this.cube.localTranslate.z = a * Math.cos(3 * deltaTheta) * Math.sin(deltaTheta);
                //     this.role.lookat(this.cube);
                // }
                // // m4m.math.quatFromEulerAngles(0,theta * 3,0,this.cube.localRotate);
                // // this.cube.lookatPoint(this.zeroPoint);
                // this.role.markDirty();
                this.role.markDirty();
                this.role.updateWorldTran();
            }
            if (this.cube != null) {
                // this.cube.localTranslate.x=Math.cos(this.timer)*3.0;
                // this.cube.localTranslate.z=Math.sin(this.timer)*3.0;
                var a = 5;
                {
                    var theta = this.timer * 0.5;
                    this.cube.localTranslate.x = a * Math.cos(3 * theta) * Math.cos(theta);
                    this.cube.localTranslate.z = a * Math.cos(3 * theta) * Math.sin(theta);
                }
                {
                    var deltaTheta = this.timer * 0.5 + 0.001;
                    var targetPoint = m4m.math.pool.new_vector3();
                    targetPoint.x = a * Math.cos(3 * deltaTheta) * Math.cos(deltaTheta);
                    targetPoint.z = a * Math.cos(3 * deltaTheta) * Math.sin(deltaTheta);
                    this.cube.lookatPoint(targetPoint);
                    m4m.math.pool.delete_vector3(targetPoint);
                }
                // {
                //     let deltaTheta = this.timer*0.5 + 0.001;
                //     this.cube.localTranslate.x = a * Math.cos(3 * deltaTheta) * Math.cos(deltaTheta);
                //     this.cube.localTranslate.z = a * Math.cos(3 * deltaTheta) * Math.sin(deltaTheta);
                //     this.role.lookat(this.cube);
                // }
                // // m4m.math.quatFromEulerAngles(0,theta * 3,0,this.cube.localRotate);
                // // this.cube.lookatPoint(this.zeroPoint);
                // this.role.markDirty();
                this.cube.markDirty();
                this.cube.updateWorldTran();
            }
            if (this.cube2) {
                //this.cube2.lookat(this.cube);
                this.cube2.lookatPoint(this.cube.getWorldTranslate());
                this.cube2.markDirty();
            }
        };
        return test_three_leaved_rose_curve;
    }());
    t.test_three_leaved_rose_curve = test_three_leaved_rose_curve;
})(t || (t = {}));
//UI 组件样例
var test_uiPerfabLoad = /** @class */ (function () {
    function test_uiPerfabLoad() {
        this.taskmgr = new m4m.framework.taskMgr();
    }
    test_uiPerfabLoad.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        this.app.closeFps();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10;
        //2dUI root
        this.rooto2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(this.rooto2d);
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadShaders.bind(this));
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.createUI.bind(this));
        //html 输入框
        var inputh = document.createElement("input");
        this.app.container.appendChild(inputh);
        inputh.style.position = "absolute";
        inputh.style.width = 100 + "px";
        inputh.style.height = 30 + "px";
        inputh.value = "button_comb1";
        var btn = document.createElement("button");
        this.app.container.appendChild(btn);
        btn.textContent = "加载";
        btn.style.position = "absolute";
        btn.style.left = 120 + "px";
        btn.onclick = function () {
            console.error(inputh.innerText);
            console.error(inputh.textContent);
            console.error(inputh.value);
            _this.doLoad(inputh.value);
        };
    };
    test_uiPerfabLoad.prototype.createUI = function (astState, state) {
        var atlasComp = this.assetMgr.getAssetByName("comp.atlas.json");
        var tex_0 = this.assetMgr.getAssetByName("zg03_256.png");
        //9宫格拉伸底图
        var bg_t = new m4m.framework.transform2D;
        bg_t.width = 400;
        bg_t.height = 260;
        bg_t.pivot.x = 0;
        bg_t.pivot.y = 0;
        //bg_t.localTranslate.x = 100;
        bg_t.localTranslate.y = 100;
        this.rooto2d.addChild(bg_t);
        var bg_i = bg_t.addComponent("image2D");
        bg_i.imageType = m4m.framework.ImageType.Sliced;
        bg_i.sprite = atlasComp.sprites["bg"];
        bg_i.imageBorder.l = 10;
        bg_i.imageBorder.t = 50;
        bg_i.imageBorder.r = 10;
        bg_i.imageBorder.b = 10;
        bg_t.layoutState = 0 | m4m.framework.layoutOption.LEFT | m4m.framework.layoutOption.RIGHT | m4m.framework.layoutOption.TOP | m4m.framework.layoutOption.BOTTOM;
        bg_t.setLayoutValue(m4m.framework.layoutOption.LEFT, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.TOP, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.RIGHT, 60);
        bg_t.setLayoutValue(m4m.framework.layoutOption.BOTTOM, 60);
        this.bgui = bg_t;
        var prefabName = "button";
        //this.doLoad(prefabName);
        //key dwon test
        var inputMgr = this.app.getInputMgr();
        this.app.webgl.canvas.addEventListener("keydown", function (ev) {
            if (ev.keyCode == 81) {
            }
        }, false);
        state.finish = true;
    };
    test_uiPerfabLoad.prototype.doLoad = function (name) {
        var _this = this;
        if (!this.bgui)
            return;
        if (this.targetui) {
            this.bgui.removeChild(this.targetui);
            this.targetui.dispose();
        }
        var prefabName = name;
        // 加载 ui  预制体
        this.assetMgr.load("".concat(resRootPath, "prefab/").concat(prefabName, "/").concat(prefabName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
            if (s1.isfinish) {
                var ass = _this.assetMgr;
                var temp = _this.assetMgr.getAssetByName("".concat(prefabName, ".prefab.json"), "".concat(prefabName, ".assetbundle.json"));
                var t2d = temp.getCloneTrans2D();
                _this.bgui.addChild(t2d);
                t2d.layoutState = 0 | m4m.framework.layoutOption.H_CENTER | m4m.framework.layoutOption.V_CENTER;
                t2d.markDirty();
                _this.targetui = t2d;
            }
        });
    };
    test_uiPerfabLoad.prototype.loadShaders = function (lastState, state) {
        this.assetMgr.load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    test_uiPerfabLoad.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.json.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.atlas.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        //加载字体资源
                        _this.assetMgr.load("".concat(resRootPath, "font/STXINGKA.TTF.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.assetMgr.load("".concat(resRootPath, "font/STXINGKA.font.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                                    _this.assetMgr.load("".concat(resRootPath, "texture/zg03_256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                                        if (s.isfinish) {
                                            state.finish = true;
                                        }
                                    });
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    test_uiPerfabLoad.prototype.update = function (delta) {
        this.taskmgr.move(delta); //推进task
    };
    return test_uiPerfabLoad;
}());
var test_uimove = /** @class */ (function () {
    function test_uimove() {
        this.timer = 0;
    }
    test_uimove.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        // objCam.lookat(cube);
        objCam.markDirty(); //标记为需要刷新
        this.test();
    };
    test_uimove.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
    };
    test_uimove.prototype.test = function () {
        var parentRect = new Rect();
        parentRect.width = 600;
        parentRect.height = 400;
        parentRect.children = [];
        var childRect = new Rect();
        childRect.width = 300;
        childRect.height = 200;
        parentRect.children.push(childRect);
        childRect["_parent"] = parentRect;
        childRect.alignType = AlignType.CENTER;
        parentRect.layout();
        childRect.localEulerAngles = new m4m.math.vector3(0, 90, 0);
        var matrix = m4m.math.pool.new_matrix();
        var qua = m4m.math.pool.new_quaternion();
        var vec = m4m.math.pool.new_vector3();
        m4m.math.quatFromEulerAngles(childRect.localEulerAngles.x, childRect.localEulerAngles.y, childRect.localEulerAngles.z, qua);
        m4m.math.vec3Add(childRect.localTranslate, childRect.alignPos, vec);
        m4m.math.matrixMakeTransformRTS(vec, childRect.localScale, qua, matrix);
        m4m.math.pool.delete_vector3(vec);
        m4m.math.pool.delete_quaternion(qua);
        console.log(matrix.toString());
        for (var i = 0; i < childRect.points.length; i++) {
            console.log(i + " before: " + childRect.points[i]);
            m4m.math.matrixTransformVector3(childRect.points[i], matrix, childRect.points[i]);
            console.log(i + " after: " + childRect.points[i]);
        }
        m4m.math.pool.delete_matrix(matrix);
        console.log(matrix.toString());
    };
    return test_uimove;
}());
var Rect = /** @class */ (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.offset = new m4m.math.vector3();
        _this.children = [];
        _this.alignType = AlignType.NONE;
        _this.points = [];
        _this.alignPos = new m4m.math.vector3();
        return _this;
    }
    Object.defineProperty(Rect.prototype, "bParent", {
        get: function () { return this.parent; },
        enumerable: false,
        configurable: true
    });
    Rect.prototype.layout = function () {
        if (this.parent != null && this.alignType != null) {
            switch (this.alignType) {
                case AlignType.CENTER:
                    // this.alignPos = new m4m.math.vector3((this.parent.width - this.width) / 2, (this.parent.height - this.height) / 2);
                    this.alignPos = new m4m.math.vector3(0, 0, 0);
                    break;
                case AlignType.LEFT:
                    this.alignPos = new m4m.math.vector3(0, (this.bParent.height - this.height) / 2);
                    break;
                case AlignType.RIGHT:
                    this.alignPos = new m4m.math.vector3(this.bParent.width - this.width, (this.bParent.height - this.height) / 2);
                    break;
                case AlignType.TOP:
                    this.alignPos = new m4m.math.vector3((this.bParent.width - this.width) / 2, 0);
                    break;
                case AlignType.BOTTOM:
                    this.alignPos = new m4m.math.vector3((this.bParent.width - this.width) / 2, this.bParent.height - this.height);
                    break;
                case AlignType.TOP_LEFT:
                    this.alignPos = new m4m.math.vector3(0, 0);
                    break;
                case AlignType.BOTTOM_LEFT:
                    this.alignPos = new m4m.math.vector3(0, this.bParent.height - this.height);
                    break;
                case AlignType.TOP_RIGHT:
                    this.alignPos = new m4m.math.vector3(this.bParent.width - this.width, 0);
                    break;
                case AlignType.BOTTOM_RIGHT:
                    this.alignPos = new m4m.math.vector3(this.bParent.width - this.width, this.bParent.height - this.height);
                    break;
            }
        }
        var pos = m4m.math.pool.new_vector3();
        m4m.math.vec3Add(this.alignPos, this.localTranslate, pos);
        this.points[0] = new m4m.math.vector3(pos.x - this.width / 2, pos.y + this.height / 2, pos.z);
        this.points[1] = new m4m.math.vector3(pos.x - this.width / 2, pos.y - this.height / 2, pos.z);
        this.points[2] = new m4m.math.vector3(pos.x + this.width / 2, pos.y - this.height / 2, pos.z);
        this.points[3] = new m4m.math.vector3(pos.x + this.width / 2, pos.y - this.height / 2, pos.z);
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].layout();
        }
    };
    return Rect;
}(m4m.framework.transform));
var AlignType;
(function (AlignType) {
    AlignType[AlignType["NONE"] = 0] = "NONE";
    AlignType[AlignType["CENTER"] = 1] = "CENTER";
    AlignType[AlignType["LEFT"] = 2] = "LEFT";
    AlignType[AlignType["RIGHT"] = 3] = "RIGHT";
    AlignType[AlignType["TOP"] = 4] = "TOP";
    AlignType[AlignType["BOTTOM"] = 5] = "BOTTOM";
    AlignType[AlignType["TOP_LEFT"] = 6] = "TOP_LEFT";
    AlignType[AlignType["BOTTOM_LEFT"] = 7] = "BOTTOM_LEFT";
    AlignType[AlignType["TOP_RIGHT"] = 8] = "TOP_RIGHT";
    AlignType[AlignType["BOTTOM_RIGHT"] = 9] = "BOTTOM_RIGHT";
})(AlignType || (AlignType = {}));
//UI 视频纹理
var test_videoTexture = /** @class */ (function () {
    function test_videoTexture() {
    }
    test_videoTexture.prototype.loadVideo = function (url) {
        return new Promise(function (res, rej) {
            var video = document.createElement("video");
            //webgl跨域渲染要这样玩 [crossOrigin = ""]否则服务器允许跨域也没用
            video.crossOrigin = "";
            video.src = url;
            //通过 play 触发视频加载
            video.play().then(function () {
                video.pause();
                res(video);
            }).catch(function (err) {
                rej(err);
            });
        });
    };
    test_videoTexture.prototype.makeVideoTexture = function (video) {
        var tex = new m4m.framework.texture("videoTex");
        var t2d = new m4m.render.videoTexture(video);
        tex.glTexture = t2d;
        return tex;
    };
    test_videoTexture.prototype.start = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var assetMgr, obj, mr, scene, objCam, cam, hoverc, mat, video, vTex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetMgr = app.getAssetMgr();
                        obj = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Quad, app);
                        mr = obj.gameObject.getComponent("meshRenderer");
                        scene = app.getScene();
                        scene.addChild(obj);
                        objCam = new m4m.framework.transform();
                        scene.addChild(objCam);
                        cam = objCam.gameObject.addComponent("camera");
                        cam.near = 0.01;
                        cam.far = 120;
                        cam.fov = Math.PI * 0.3;
                        objCam.localTranslate = new m4m.math.vector3(0, 5, -8);
                        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                        hoverc = cam.gameObject.addComponent("HoverCameraScript");
                        hoverc.panAngle = 180;
                        hoverc.tiltAngle = 20;
                        hoverc.distance = 3;
                        hoverc.scaleSpeed = 0.1;
                        hoverc.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                        mat = mr.materials[0];
                        mat.setShader(assetMgr.getShader("shader/def3dbeforeui"));
                        return [4 /*yield*/, this.loadVideo("".concat(resRootPath, "video/movie.mp4"))];
                    case 1:
                        video = _a.sent();
                        video.loop = true;
                        vTex = this.makeVideoTexture(video);
                        // mat.setTexture("_MainTex", assetMgr.getDefaultTexture("grid"));
                        mat.setTexture("_MainTex", vTex);
                        video.play();
                        return [2 /*return*/];
                }
            });
        });
    };
    test_videoTexture.prototype.update = function (delta) {
    };
    return test_videoTexture;
}());
var test_anim = /** @class */ (function () {
    function test_anim() {
    }
    test_anim.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var assetMgr = this.app.getAssetMgr();
        //添加一个摄像机
        var camNode = new m4m.framework.transform();
        this.scene.addChild(camNode);
        this.camera = camNode.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        camNode.localTranslate = new m4m.math.vector3(0, 10, -10);
        util.loadShader(assetMgr)
            .then(function () {
            var prefabName = "PF_PlayerSharkReef";
            assetMgr.load("".concat(resRootPath, "prefab/").concat(prefabName, "/").concat(prefabName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var prefab = assetMgr.getAssetByName(prefabName + ".prefab.json", "".concat(prefabName, ".assetbundle.json"));
                    var ins = prefab.getCloneTrans();
                    _this.scene.addChild(ins);
                    camNode.lookat(ins);
                    camNode.markDirty();
                    var aps = ins.gameObject.getComponentsInChildren("aniplayer");
                    var ap = aps[0];
                    var resPath_1 = "".concat(resRootPath, "prefab/").concat(prefabName, "/resources");
                    var list_1 = ap.awaitLoadClipNames();
                    Promise.all(list_1.map(function (item) { return new Promise(function (resolve, reject) {
                        ap.addClipByNameLoad(assetMgr, resPath_1, item, function () { return resolve(); });
                    }); }))
                        .then(function () {
                        if (list_1.length > 0) {
                            ap.play(list_1[0]);
                        }
                        document.onkeydown = function (ev) {
                            ap.play(list_1[Math.floor(Math.random() * list_1.length)]);
                        };
                    });
                }
            });
        });
    };
    test_anim.prototype.update = function (delta) {
    };
    return test_anim;
}());
var test_loadAsiprefab = /** @class */ (function () {
    function test_loadAsiprefab() {
        this.timer = 0;
    }
    test_loadAsiprefab.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/0001_archangel@idle_none/0001_archangel@idle_none.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("0001_archangel@idle_none.prefab.json");
                        _this.trans = _prefab.getCloneTrans();
                        _this.scene.addChild(_this.trans);
                        // this.baihu.localScale = new m4m.math.vector3(20, 20, 20);
                        // this.baihu.localTranslate = new m4m.math.vector3(2, 0, 0);
                        // this.baihu = _prefab.getCloneTrans();
                        // this.scene.addChild(this.baihu);
                        var test = _this.trans;
                        objCam.lookat(_this.trans);
                        objCam.markDirty();
                        //     var tex=this.app.getAssetMgr().getAssetByName("0001_archangel.imgdesc.json")as m4m.framework.texture;
                        //     var cube=new m4m.framework.transform();
                        //     var meshf=cube.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER)as m4m.framework.meshFilter;
                        //     var meshr=cube.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER)as m4m.framework.meshRenderer;
                        //     var mesh=this.app.getAssetMgr().getDefaultMesh("cube")as m4m.framework.mesh;
                        //     var mat=new m4m.framework.material();
                        //     var shader=this.app.getAssetMgr().getShader("diffuse.shader.json");
                        //     mat.setShader(shader);
                        //     mat.setTexture("_MainTex",tex);
                        //     meshf.mesh=mesh;
                        //     meshr.materials=[];
                        //     meshr.materials.push(mat);
                        //    this.scene.addChild(cube);
                        //    var render= this.baihu.gameObject.getComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER)as m4m.framework.meshRenderer;
                        //    render.materials[0].setTexture("_MainTex",tex);
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 5, 5);
        objCam.markDirty(); //标记为需要刷新
        var hov = objCam.gameObject.addComponent("HoverCameraScript");
        hov.lookAtTarget = this.trans;
        hov.panAngle = 180;
        hov.tiltAngle = -10;
        hov.distance = 8;
        hov.scaleSpeed = 0.1;
        hov.lookAtPoint.x = 0;
        hov.lookAtPoint.y = 2.5;
        hov.lookAtPoint.z = 0;
    };
    test_loadAsiprefab.prototype.update = function (delta) {
        // this.timer += delta;
        // var x = Math.sin(this.timer);
        // var z = Math.cos(this.timer);
        // var x2 = Math.sin(this.timer * 0.1);
        // var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        // if (this.baihu)
        // {
        //     objCam.lookat(this.baihu);
        //     objCam.markDirty();//标记为需要刷新
        // }
    };
    return test_loadAsiprefab;
}());
var test_assestmgr = /** @class */ (function () {
    function test_assestmgr() {
        this.assetName = "elong";
        this.count = 10;
        this.timer = 0;
        this.bere = false;
    }
    test_assestmgr.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.cube = new m4m.framework.transform();
        this.scene.addChild(this.cube);
        var assetName = this.assetName;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                // this.app.getAssetMgr().load("res/scenes/city/city.assetbundle.json", m4m.framework.AssetTypeEnum.Auto,
                //     (s1) =>
                //     {
                //         if (s1.isfinish)
                //         {
                //             this.app.getAssetMgr().loadScene("city.scene.json", () =>
                //             {
                //             });
                //         }
                //     });
                _this.app.getAssetMgr().load("res/prefabs/".concat(assetName, "/").concat(assetName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        _this.baihu = [];
                        _this._prefab = _this.app.getAssetMgr().getAssetByName("".concat(assetName, ".prefab.json"));
                        for (var i = 0; i < _this.count; i++) {
                            _this.baihu[i] = _this._prefab.getCloneTrans();
                            _this.scene.addChild(_this.baihu[i]);
                            _this.baihu[i].localScale = new m4m.math.vector3(0.3, 0.3, 0.3);
                            _this.baihu[i].localTranslate = new m4m.math.vector3(i * 2, 0, 0);
                            _this.baihu[i].markDirty();
                            _this.scene.addChild(_this.baihu[i]);
                        }
                        objCam.lookat(_this.baihu[_this.count / 2]);
                        objCam.markDirty();
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        //this.camera.postQueues.push(new m4m.framework.cameraPostQueue_Depth());
        // this.camera.near = 0.01;
        // this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(50, 82, -500);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
        this.cube.localTranslate = new m4m.math.vector3(40, 0, 10);
    };
    test_assestmgr.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.5);
        var z2 = Math.cos(this.timer * 0.5);
        var objCam = this.camera.gameObject.transform;
        objCam.localTranslate = new m4m.math.vector3(x2 * 10, 30, -z2 * 10);
        //assetbundle test
        // if (this.timer > 20)
        // {
        //     this.app.getScene().getRoot().dispose();
        // }
        // if (this.timer > 40 && !this.bere)
        // {
        //     this.bere = true;
        //     // this.app.getAssetMgr().unload("res/scenes/city/city.assetbundle.json");
        //     this.app.getAssetMgr().getAssetBundle("city.assetbundle.json").unload();
        //     this.app.getAssetMgr().releaseUnuseAsset();
        // }
        //prefab test
        if (this.timer > 20 && !this.bere) {
            this.bere = true;
            for (var i = 0; i < this.count; i++) {
                this.baihu[i].dispose();
            }
            // this._prefab.unuse();
            this.app.getAssetMgr().getAssetBundle("".concat(this.assetName, ".assetbundle.json")).unload();
            this.app.getAssetMgr().releaseUnuseAsset();
        }
    };
    return test_assestmgr;
}());
var t;
(function (t) {
    var test_changeshader = /** @class */ (function () {
        function test_changeshader() {
            this.timer = 0;
        }
        test_changeshader.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var baihu = new m4m.framework.transform();
            baihu.name = "baihu";
            baihu.localScale.x = baihu.localScale.y = baihu.localScale.z = 20;
            this.scene.addChild(baihu);
            this.changeShader();
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                if (state.isfinish) {
                    // this.app.getAssetMgr().load("res/prefabs/baihu/resources/res_baihu_baihu.FBX_baihu.mesh.bin", m4m.framework.AssetTypeEnum.Auto, (s) =>
                    // {
                    //     if (s.isfinish)
                    //     {
                    //         var smesh1 = this.app.getAssetMgr().getAssetByName("res_baihu_baihu.FBX_baihu.mesh.bin") as m4m.framework.mesh;
                    //         var mesh1 = baihu.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
                    //         mesh1.mesh = (smesh1);
                    //         this.renderer = baihu.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
                    //         var collider = baihu.gameObject.addComponent("boxcollider") as m4m.framework.boxcollider;
                    //         baihu.markDirty();
                    //         var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    //         this.renderer.materials = [];
                    //         this.renderer.materials.push(new m4m.framework.material());
                    //         this.renderer.materials.push(new m4m.framework.material());
                    //         this.renderer.materials.push(new m4m.framework.material());
                    //         this.renderer.materials.push(new m4m.framework.material());
                    //         this.renderer.materials[0].setShader(sh);
                    //         this.renderer.materials[1].setShader(sh);
                    //         this.renderer.materials[2].setShader(sh);
                    //         this.renderer.materials[3].setShader(sh);
                    //         this.app.getAssetMgr().load("res/prefabs/baihu/resources/baihu.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, (s2) =>
                    //         {
                    //             if (s2.isfinish)
                    //             {
                    //                 let texture = this.app.getAssetMgr().getAssetByName("baihu.imgdesc.json") as m4m.framework.texture;
                    //                 this.renderer.materials[0].setTexture("_MainTex", texture);
                    //             }
                    //         });
                    //         this.app.getAssetMgr().load("res/prefabs/baihu/resources/baihuan.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, (s2) =>
                    //         {
                    //             if (s2.isfinish)
                    //             {
                    //                 let texture = this.app.getAssetMgr().getAssetByName("baihuan.imgdesc.json") as m4m.framework.texture;
                    //                 this.renderer.materials[1].setTexture("_MainTex", texture);
                    //             }
                    //         });
                    //         this.app.getAssetMgr().load("res/prefabs/baihu/resources/baihuya.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, (s2) =>
                    //         {
                    //             if (s2.isfinish)
                    //             {
                    //                 let texture = this.app.getAssetMgr().getAssetByName("baihuya.imgdesc.json") as m4m.framework.texture;
                    //                 this.renderer.materials[2].setTexture("_MainTex", texture);
                    //             }
                    //         });
                    //         this.app.getAssetMgr().load("res/prefabs/baihu/resources/baihumao.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, (s2) =>
                    //         {
                    //             if (s2.isfinish)
                    //             {
                    //                 let texture = this.app.getAssetMgr().getAssetByName("baihumao.imgdesc.json") as m4m.framework.texture;
                    //                 this.renderer.materials[3].setTexture("_MainTex", texture);
                    //             }
                    //         });
                    //     }
                    // });
                    var prefabname = "0123_limingshibing"; //"shizhiguai"
                    _this.app.getAssetMgr().load("res/prefabs/0123_limingshibing/0123_limingshibing.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                        if (s.isfinish) {
                            var shizi = _this.app.getAssetMgr().getAssetByName("0123_limingshibing.prefab.json");
                            var shizi01 = shizi.getCloneTrans();
                            shizi01.localTranslate = new m4m.math.vector3();
                            //m4m.math.vec3ScaleByNum(shizi01.localScale,20,shizi01.localScale);
                            _this.scene.addChild(shizi01);
                            shizi01.markDirty();
                            var renderer = shizi01.gameObject.getComponentsInChildren(m4m.framework.StringUtil.COMPONENT_SKINMESHRENDER);
                            _this.skinrender = renderer[0];
                        }
                    });
                }
            });
            this.cube = baihu;
            //添加一个摄像机
            this.objCam = new m4m.framework.transform();
            this.objCam.name = "sth.";
            this.scene.addChild(this.objCam);
            this.camera = this.objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 100;
            this.objCam.localTranslate = new m4m.math.vector3(0, 12, 12);
            //this.objCam.lookat(baihu);
            this.objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            this.objCam.markDirty(); //标记为需要刷新
        };
        test_changeshader.prototype.changeShader = function () {
            var _this = this;
            var btn = document.createElement("button");
            btn.textContent = "切换Shader到：diffuse.shader.json";
            btn.onclick = function () {
                var sh = _this.app.getAssetMgr().getShader("diffuse.shader.json");
                _this.change(sh);
            };
            btn.style.top = "160px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            var btn2 = document.createElement("button");
            btn2.textContent = "切换Shader到：transparent-diffuse.shader.json";
            btn2.onclick = function () {
                var shader = "transparent-diffuse.shader.json";
                var addshader = "transparent_additive.shader.json";
                var sh = _this.app.getAssetMgr().getShader(addshader);
                _this.change(sh);
            };
            btn2.style.top = "124px";
            btn2.style.position = "absolute";
            this.app.container.appendChild(btn2);
        };
        test_changeshader.prototype.change = function (sha) {
            // for (let i = 0; i < 4; i++)
            // {
            //     // let _uniform = this.renderer.materials[i].mapUniform;
            //     // this.renderer.materials[i].setShader(sha);
            //     // for (let key in _uniform)
            //     // {
            //     //     if (this.renderer.materials[i].mapUniform[key] != undefined)
            //     //         this.renderer.materials[i].mapUniform[key] = _uniform[key];
            //     // }
            //     this.renderer.materials[i].changeShader(sha);
            // }
            var materials = this.skinrender.materials;
            for (var i = 0; i < materials.length; i++) {
                materials[i] = materials[i].clone();
                materials[i].setShader(sha);
            }
        };
        test_changeshader.prototype.update = function (delta) {
        };
        return test_changeshader;
    }());
    t.test_changeshader = test_changeshader;
})(t || (t = {}));
var t;
(function (t) {
    var test_clearDepth0 = /** @class */ (function () {
        function test_clearDepth0() {
            this.taskmgr = new m4m.framework.taskMgr();
        }
        test_clearDepth0.prototype.start = function (app) {
            this.app = app;
            this.scene = this.app.getScene();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadTexture.bind(this));
            this.taskmgr.addTaskCall(this.initscene.bind(this));
        };
        test_clearDepth0.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_clearDepth0.prototype.loadTexture = function (laststate, state) {
            this.app.getAssetMgr().load("res/rock256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_clearDepth0.prototype.initscene = function (laststate, state) {
            var objCam = new m4m.framework.transform();
            objCam.name = "cam_show";
            this.scene.addChild(objCam);
            this.showcamera = objCam.gameObject.addComponent("camera");
            this.showcamera.order = 0;
            this.showcamera.near = 0.01;
            this.showcamera.far = 30;
            this.showcamera.fov = Math.PI * 0.3;
            console.log(this.showcamera.fov);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //鏍囪涓洪渶瑕佸埛鏂?
            {
                var o2ds = new m4m.framework.overlay2D();
                this.showcamera.addOverLay(o2ds);
                {
                    var t2d = new m4m.framework.transform2D();
                    t2d.name = "ceng1";
                    t2d.localTranslate.x = 0;
                    t2d.localTranslate.y = 0;
                    t2d.width = 150;
                    t2d.height = 150;
                    t2d.pivot.x = 0;
                    t2d.pivot.y = 0;
                    t2d.markDirty();
                    var rawiamge = t2d.addComponent("rawImage2D");
                    rawiamge.image = this.scene.app.getAssetMgr().getAssetByName("rock256.png");
                    t2d.markDirty();
                    o2ds.addChild(t2d);
                }
                {
                    var cube1 = new m4m.framework.transform();
                    cube1.localTranslate.x = -3;
                    cube1.name = "cube1";
                    this.scene.addChild(cube1);
                    cube1.localScale.x = 4;
                    cube1.localScale.y = 4;
                    cube1.localScale.z = 1;
                    cube1.markDirty();
                    var mesh1 = cube1.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("plane");
                    mesh1.mesh = (smesh);
                    var renderer = cube1.gameObject.addComponent("meshRenderer");
                    renderer.materials = [];
                    var mat = new m4m.framework.material();
                    renderer.materials[0] = mat;
                    mat.setShader(this.app.getAssetMgr().getShader("diffuse.shader.json"));
                    mat.setTexture("_MainTex", this.app.getAssetMgr().getAssetByName("rock256.png"));
                }
            }
            state.finish = true;
        };
        test_clearDepth0.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            if (this.target == undefined)
                return;
            // if (this.show_cube == undefined) return;
            this.timer += delta;
            m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer * 3, this.target.localRotate);
            this.target.markDirty();
        };
        return test_clearDepth0;
    }());
    t.test_clearDepth0 = test_clearDepth0;
})(t || (t = {}));
/// <reference path="localSave.ts" />
var test_effect = /** @class */ (function () {
    function test_effect() {
        this.timer = 0;
        this.taskmgr = new m4m.framework.taskMgr();
        this.beclone = false;
        this.effectloaded = false;
        this.bestop = false;
        this.bereplay = false;
    }
    test_effect.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
            if (_state.isfinish) {
                state.finish = true;
            }
        });
    };
    test_effect.prototype.loadText = function (laststate, state) {
        this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                state.finish = true;
            }
            else {
                state.error = true;
            }
        });
    };
    test_effect.prototype.addcube = function (laststate, state) {
        //添加一个盒子
        {
            //添加一个盒子
            {
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                cube.localTranslate.x = 0;
                this.scene.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                if (sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(sh); //----------------使用shader
                    var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
            }
        }
        state.finish = true;
    };
    test_effect.prototype.loadModel = function (laststate, state) {
        var _this = this;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/fx_shuijing_cj/fx_shuijing_cj.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_s) {
                    if (_s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("fx_shuijing_cj.prefab.json");
                        _this.dragon = _prefab.getCloneTrans();
                        _this.scene.addChild(_this.dragon);
                        state.finish = true;
                    }
                });
            }
        });
    };
    test_effect.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadShader.bind(this));
        this.taskmgr.addTaskCall(this.loadText.bind(this));
        this.taskmgr.addTaskCall(this.addcam.bind(this));
        // this.taskmgr.addTaskCall(this.addcube.bind(this));
        // this.taskmgr.addTaskCall(this.loadModel.bind(this));
        this.taskmgr.addTaskCall(this.loadEffect.bind(this));
    };
    test_effect.prototype.loadEffect = function (laststate, state) {
        var _this = this;
        // this._loadEffect("res/particleEffect/hjxnew/hjxnew.assetbundle.json", "hjxnew");//
        // this._loadEffect("res/particleEffect/particle/particle.assetbundle.json", "particle.effect.json");//
        //fx_0005_sword_sword
        var names = ["0fx_boss_02", "fx_boss_02", "fx_shengji_jiaose", "fx_ss_female@attack_03", "fx_ss_female@attack_02", "fx_0_zs_male@attack_02", "fx_shuijing_cj", "fx_fs_female@attack_02", "fx_0005_sword_sword", "fx_0005_sword_sword", "fx_0_zs_male@attack_02", "fx_fs_female@attack_02"];
        var name = names[2];
        this.app.getAssetMgr().load("res/particleEffect/" + name + "/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
            if (_state.isfinish) {
                _this.tr = new m4m.framework.transform();
                _this.effect = _this.tr.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_EFFECTSYSTEM);
                _this.text = _this.app.getAssetMgr().getAssetByName(name + ".effect.json");
                _this.effect.setJsonData(_this.text);
                _this.scene.addChild(_this.tr);
                _this.tr.markDirty();
                state.finish = true;
                _this.effectloaded = true;
                _this.addButton();
            }
        });
    };
    test_effect.prototype.addButton = function () {
        var _this = this;
        var btn = document.createElement("button");
        btn.textContent = "Play";
        btn.onclick = function () {
            // this.app.getAssetMgr().savePrefab(this.tr, "prefabName", (data: m4m.framework.SaveInfo, resourses: string[]) =>
            // {
            //     console.log(data.files);
            //     console.log(resourses.length);
            // });
            // this.effect.stop();
            // this.effect.play();
            // let tr = new m4m.framework.transform();
            // this.scene.addChild(tr);
            // let effect = tr.gameObject.addComponent("effectSystemNew") as m4m.framework.effectSystemNew;
            // let ins = effect.addEffectElement(m4m.framework.EffectElementTypeEnum.SingleMeshType);
            // m4m.io.serializeObj(effect);
            _this.effect.updateJsonData(_this.text);
        };
        btn.style.top = "160px";
        btn.style.position = "absolute";
        this.app.container.appendChild(btn);
        var btn1 = document.createElement("button");
        btn1.textContent = "Save To Prefab";
        btn1.onclick = function () {
            var name = _this.tr.name;
            var _prefab = new m4m.framework.prefab(name);
            _this.app.getAssetMgr().use(_prefab);
            _prefab.assetbundle = name;
            var path = "";
            _this.app.getAssetMgr().savePrefab(_this.tr, name, function (data, resourses) {
                console.log(data.files);
                console.log(resourses.length);
                var _loop_10 = function (key) {
                    var val = data.files[key];
                    var blob = localSave.Instance.file_str2blob(val);
                    var files = [];
                    var resPath = path + "/resources/";
                    var _loop_11 = function (i) {
                        var resourceUrl = resourses[i];
                        var resourceName = _this.getNameFromURL(resourceUrl);
                        var resourceLength = 0;
                        if (resourceName.indexOf(".txt") != -1 || resourceName.indexOf(".json")) {
                            localSave.Instance.loadTextImmediate(resourceUrl, function (_txt, _err) {
                                var blob = localSave.Instance.file_str2blob(_txt);
                                localSave.Instance.save(resPath + resourceName, blob);
                            });
                        }
                        else {
                            localSave.Instance.loadBlobImmediate(resourceUrl, function (_blob, _err) {
                                localSave.Instance.save(resPath + resourceName, _blob);
                            });
                        }
                        var fileInfo_1 = { "name": "resources/" + resourceName, "length": 100 };
                        files.push(fileInfo_1);
                    };
                    //保存资源
                    for (var i = 0; i < resourses.length; i++) {
                        _loop_11(i);
                    }
                    localSave.Instance.save(resPath + name + ".prefab.json", blob);
                    var fileInfo = { "name": "resources/" + name + ".prefab.json", "length": 100 };
                    files.push(fileInfo);
                    var assetBundleStr = JSON.stringify({ "files": files });
                    var assetBundleBlob = localSave.Instance.file_str2blob(assetBundleStr);
                    localSave.Instance.save(path + "/" + name + ".assetbundle.json", assetBundleBlob);
                };
                for (var key in data.files) {
                    _loop_10(key);
                }
            });
        };
        btn1.style.top = "320px";
        btn1.style.position = "absolute";
        this.app.container.appendChild(btn1);
    };
    test_effect.prototype.getNameFromURL = function (path) {
        var index = path.lastIndexOf("/");
        return path.substring(index + 1);
    };
    test_effect.prototype.addcam = function (laststate, state) {
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 200;
        this.camera.fov = Math.PI * 0.3;
        this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 20, 20);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty(); //标记为需要刷新
        state.finish = true;
    };
    test_effect.prototype.update = function (delta) {
        this.taskmgr.move(delta);
        // if(this.effectloaded)
        // {
        //     this.timer += delta;
        //     if(this.timer > 1 && !this.beclone)
        //     {
        //         this.beclone = true;
        //         this.ttr = this.tr.clone(); 
        //         this.eff = this.ttr.gameObject.getComponent("effectSystem") as m4m.framework.effectSystem;
        //         this.scene.addChild(this.ttr);
        //     }
        //     if(this.timer > 3 && !this.bestop)
        //     {
        //         this.bestop = true;
        //         this.eff.stop();
        //     }
        //     if(this.timer > 6 && !this.bereplay)
        //     {
        //         this.bereplay = true;
        //         this.eff.play();
        //     }
        // }
    };
    return test_effect;
}());
var t;
(function (t) {
    var test_integratedrender = /** @class */ (function () {
        function test_integratedrender() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.WaveFrequency = 4.0;
            this.WaveAmplitude = 0.05;
            this.play = true;
        }
        test_integratedrender.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_integratedrender.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/trailtest2_00000.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/rock256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/swingFX.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_integratedrender.prototype.loadRole = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/0000_zs_male/0000_zs_male.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0000_zs_male.prefab.json");
                    _this.role = _prefab.getCloneTrans();
                    _this.role.name = "role";
                    _this.roleLength = _this.role.children.length;
                    _this.scene.addChild(_this.role);
                    _this.role.localScale = new m4m.math.vector3(1, 1, 1);
                    _this.role.localTranslate = new m4m.math.vector3(0, 0, 0);
                    _this.role.gameObject.visible = true;
                    _this.role.markDirty();
                    _this.role.updateWorldTran();
                    _this.aniplayer = _this.role.gameObject.getComponent("aniplayer");
                    state.finish = true;
                }
            });
        };
        test_integratedrender.prototype.loadWeapon = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/0002_sword_sword/0002_sword_sword.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    if (_this.weapon)
                        _this.weapon.parent.removeChild(_this.weapon);
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0002_sword_sword.prefab.json");
                    _this.weapon = _prefab.getCloneTrans();
                    //  this.scene.addChild(this.role);
                    _this.weapon.localScale = new m4m.math.vector3(1, 1, 1);
                    _this.weapon.localTranslate = new m4m.math.vector3(0, 0, 0);
                    var obj = _this.role.find("Bip001 Prop1");
                    obj.addChild(_this.weapon);
                    state.finish = true;
                }
            });
        };
        test_integratedrender.prototype.initscene = function (laststate, state) {
            {
                //添加一个摄像机
                var objCam = new m4m.framework.transform();
                objCam.name = "sth.";
                this.scene.addChild(objCam);
                this.camera = objCam.gameObject.addComponent("camera");
                this.camera.near = 0.01;
                this.camera.far = 100;
                this.camera.fov = Math.PI * 0.3;
                this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
                objCam.localTranslate = new m4m.math.vector3(0, 5, -5);
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty(); //标记为需要刷新
                {
                    var org = new m4m.framework.transform();
                    org.name = "org";
                    this.org = org;
                    this.scene.addChild(org);
                }
                {
                    var ref_cube = new m4m.framework.transform();
                    ref_cube.name = "ref_cube";
                    ref_cube.localScale.x = ref_cube.localScale.y = ref_cube.localScale.z = 5;
                    ref_cube.localTranslate.y = -2;
                    this.scene.addChild(ref_cube);
                    var mesh = ref_cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("plane");
                    mesh.mesh = (smesh);
                    var renderer = ref_cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("diffuse_bothside.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("rock256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube2 = ref_cube;
                }
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    this.cube = cube;
                    org.addChild(cube);
                    cube.localTranslate.x = -5;
                    // cube.localScale.y = 0.1;
                    // cube.localScale.z = 0.5;
                    // cube.localScale.x = 5;
                    cube.markDirty();
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    // var test1=new m4m.framework.transform();
                    // test1.localScale.y=2;
                    // test1.localScale.x=0.3;
                    // test1.localScale.z=0.3;
                    // test1.localTranslate.z=1;
                    // this.weapon.addChild(test1);
                    //  var mesh = test1.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
                    // test1.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
                    // mesh.mesh=smesh;
                    // m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_right, 90, test1.localRotate);
                    // test1.markDirty();
                    var trailtrans = new m4m.framework.transform();
                    trailtrans.localTranslate.z = 2;
                    this.weapon.addChild(trailtrans);
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_right, 270, trailtrans.localRotate);
                    trailtrans.markDirty();
                    var trailrender = trailtrans.gameObject.addComponent("trailRender");
                    //trailrender.color=new m4m.math.color(1.0,0,0,1.0);
                    //trailrender.speed = 1;
                    trailrender.setWidth(2);
                    var mat = new m4m.framework.material();
                    //particles_additive.shader.json
                    //transparent_bothside.shader.json
                    //particles_additive_premultiply.shader.json
                    var shader = this.app.getAssetMgr().getShader("transparent_bothside.shader.json");
                    var tex = this.app.getAssetMgr().getAssetByName("trailtest2_00000.imgdesc.json");
                    mat.setShader(shader);
                    mat.setTexture("_MainTex", tex);
                    trailrender.material = mat;
                    this.trailrender = trailrender;
                    //trailrender.lifetime=0.4;
                    //trailrender.minvertexDistance=0.01;
                    //trailrender.setWidth(1,1);
                }
            }
            state.finish = true;
        };
        test_integratedrender.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            this.wind = new m4m.math.vector4();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.loadRole.bind(this));
            this.taskmgr.addTaskCall(this.loadWeapon.bind(this));
            this.taskmgr.addTaskCall(this.initscene.bind(this));
            var tbn1 = this.addbtn("80px", "0px", "attack_01");
            tbn1.onclick = function () {
                _this.trailrender.play();
                var name = "attack_01.FBAni.aniclip.bin";
                _this.aniplayer.playCross(name, 0.2);
            };
            var btn = this.addbtn("120px", "0px", "attack_02");
            btn.onclick = function () {
                _this.trailrender.play();
                var name = "attack_02.FBAni.aniclip.bin";
                _this.aniplayer.playCross(name, 0.2);
            };
            var btn3 = this.addbtn("200px", "0px", "stop");
            btn3.onclick = function () {
                _this.trailrender.stop();
            };
            {
                var btn2 = this.addbtn("160px", "0px", "playAttackAni");
                btn2.onclick = function () {
                    _this.trailrender.play();
                    var name = "attack_04.FBAni.aniclip.bin";
                    _this.aniplayer.playCross(name, 0.2);
                };
            }
        };
        test_integratedrender.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            // if (this.org != undefined && this.play) {
            //     this.timer++;
            //     // var x = Math.sin(this.timer * 0.01);
            //     // var z = Math.cos(this.timer * 0.01);
            //     this.org.localTranslate.x +=0.05;
            //     // this.cube.localTranslate.z = z * 5;
            //     // this.cube.markDirty();
            //     // m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer, this.org.localRotate); 
            //     this.org.markDirty();
            // }
        };
        test_integratedrender.prototype.addbtn = function (top, left, text) {
            var btn = document.createElement("button");
            btn.style.top = top;
            btn.style.left = left;
            btn.style.position = "absolute";
            btn.textContent = text;
            this.app.container.appendChild(btn);
            return btn;
        };
        return test_integratedrender;
    }());
    t.test_integratedrender = test_integratedrender;
})(t || (t = {}));
var t;
(function (t) {
    var test_light1 = /** @class */ (function () {
        function test_light1() {
            this.timer = 0;
        }
        test_light1.prototype.loadText = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var imgName = "zg256.png";
                var imgURL = "".concat(resRootPath, "texture/").concat(imgName);
                m4m.framework.sceneMgr.app.getAssetMgr().load(imgURL, m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        _this.tex = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName(imgName);
                        resolve();
                    }
                    if (s.isloadFail) {
                        reject();
                    }
                });
            });
        };
        test_light1.prototype.addCubes = function () {
            for (var i = -4; i < 5; i++) {
                for (var j = -4; j < 5; j++) {
                    this.addCube(i, j, 0);
                    this.addCube(i, 0, j);
                }
            }
        };
        test_light1.prototype.addCube = function (x, y, z) {
            var cube = new m4m.framework.transform();
            cube.name = "cube";
            cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.8;
            cube.localTranslate.x = x;
            cube.localTranslate.y = y;
            cube.localTranslate.z = z;
            this.scene.addChild(cube);
            var mesh = cube.gameObject.addComponent("meshFilter");
            var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
            mesh.mesh = (smesh);
            var renderer = cube.gameObject.addComponent("meshRenderer");
            var cuber = renderer;
            var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
            if (sh != null) {
                cuber.materials = [];
                cuber.materials.push(new m4m.framework.material());
                cuber.materials[0].setShader(sh);
                cuber.materials[0].setTexture("_MainTex", this.tex);
            }
        };
        test_light1.prototype.addCameraAndLight = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 30;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var lightNode = new m4m.framework.transform();
            this.scene.addChild(lightNode);
            this.light = lightNode.gameObject.addComponent("light");
            this.light.type = m4m.framework.LightTypeEnum.Direction;
            lightNode.localTranslate.x = 2;
            lightNode.localTranslate.z = 1;
            lightNode.localTranslate.y = 3;
            lightNode.markDirty();
            {
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                lightNode.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                if (sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(sh); //----------------使用shader
                    //cuber.materials[0].setVector4("_Color", new m4m.math.vector4(0.4, 0.4, 0.2, 1.0));
                    var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
            }
        };
        test_light1.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var btn = document.createElement("button");
            btn.textContent = "切换光源类型";
            btn.onclick = function () {
                if (!_this.light)
                    return;
                _this.light.type++;
                _this.light.type %= 3;
                _this.light.intensity = 1;
                if (_this.light.type == m4m.framework.LightTypeEnum.Point) {
                    _this.light.range = 10;
                    _this.light.intensity = 2;
                    console.log("点光源");
                }
                else if (_this.light.type == m4m.framework.LightTypeEnum.Spot) {
                    _this.light.spotAngelCos = Math.cos(0.5 * Math.PI);
                    _this.light.intensity = 2;
                    console.log("聚光灯");
                }
                else {
                    _this.light.intensity = 0.6;
                    console.log("方向光");
                }
            };
            btn.style.top = "124px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            util.loadShader(this.app.getAssetMgr())
                .then(function () { return _this.loadText(); })
                .then(function () { return _this.addCubes(); })
                .then(function () { return _this.addCameraAndLight(); });
        };
        test_light1.prototype.update = function (delta) {
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                objCam.localTranslate = new m4m.math.vector3(x2 * 10, 2.25, -z2 * 10);
                // objCam.markDirty();
                objCam.updateWorldTran();
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                //objCam.markDirty();
            }
            if (this.light != null) {
                var objLight = this.light.gameObject.transform;
                objLight.localTranslate = new m4m.math.vector3(x * 5, 3, z * 5);
                objLight.updateWorldTran();
                objLight.lookatPoint(new m4m.math.vector3(0, 0, 0));
            }
        };
        return test_light1;
    }());
    t.test_light1 = test_light1;
})(t || (t = {}));
var testloadImmediate = /** @class */ (function () {
    function testloadImmediate() {
        this.timer = 0;
    }
    testloadImmediate.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var baihu = new m4m.framework.transform();
        baihu.name = "baihu";
        // baihu.localScale.x = baihu.localScale.y = baihu.localScale.z = 20;
        m4m.math.quatFromEulerAngles(-90, 0, 0, baihu.localRotate);
        this.scene.addChild(baihu);
        this.cube = baihu;
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/baihu/resources/res_baihu_baihu.FBX_baihu.mesh.bin", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var smesh1 = _this.app.getAssetMgr().getAssetByName("res_baihu_baihu.FBX_baihu.mesh.bin");
                        var mesh1 = baihu.gameObject.addComponent("meshFilter");
                        mesh1.mesh = (smesh1);
                        var renderer = baihu.gameObject.addComponent("meshRenderer");
                        var sh = _this.app.getAssetMgr().getShader("diffuse.shader.json");
                        renderer.materials = [];
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials[0].setShader(sh);
                        renderer.materials[1].setShader(sh);
                        renderer.materials[2].setShader(sh);
                        renderer.materials[3].setShader(sh);
                        var texture1 = _this.app.getAssetMgr().loadImmediate("res/prefabs/baihu/resources/baihu.png");
                        var texture2 = _this.app.getAssetMgr().loadImmediate("res/prefabs/baihu/resources/baihuan.png");
                        var texture3 = _this.app.getAssetMgr().loadImmediate("res/prefabs/baihu/resources/baihuya.png");
                        var texture4 = _this.app.getAssetMgr().loadImmediate("res/prefabs/baihu/resources/baihumao.png");
                        renderer.materials[0].setTexture("_MainTex", texture1);
                        renderer.materials[1].setTexture("_MainTex", texture2);
                        renderer.materials[2].setTexture("_MainTex", texture3);
                        renderer.materials[3].setTexture("_MainTex", texture4);
                    }
                });
            }
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(baihu);
        objCam.markDirty(); //标记为需要刷新
    };
    testloadImmediate.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        var objCam = this.camera.gameObject.transform;
        objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
        objCam.updateWorldTran();
    };
    return testloadImmediate;
}());
///// <reference path="../lib/gl-matrix.d.ts" />
//import * as glMatrix from 'gl-matrix'
var dome;
///// <reference path="../lib/gl-matrix.d.ts" />
//import * as glMatrix from 'gl-matrix'
(function (dome) {
    var testCJ = /** @class */ (function () {
        function testCJ() {
            this.time = 0;
        }
        testCJ.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
            });
        };
        testCJ.prototype.loadmesh = function (laststate, state) {
            var _this = this;
            var name = "zs_chuangjue_01";
            //name="Sphere";
            name = "gs_chuangjue_01";
            name = "0000_fs_female_1024";
            this.app.getAssetMgr().load("res/prefabs/" + name + "/" + name + ".assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName(name + ".prefab.json");
                    _this.dragon = _prefab.getCloneTrans();
                    _this.dragon.localEulerAngles = new m4m.math.vector3(0, -180, 0);
                    _this.scene.addChild(_this.dragon);
                    _this.dragon.markDirty();
                    _this.cameraPoint = _this.dragon.find("Camera001");
                    state.finish = true;
                }
            });
        };
        testCJ.prototype.loadweapon = function (laststate, state) {
            var _this = this;
            var name = "Quad"; //Bip01Prop1/
            this.app.getAssetMgr().load("res/prefabs/Quad/Quad.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("Quad.prefab.json");
                    var pp = _prefab.getCloneTrans();
                    pp.localTranslate = new m4m.math.vector3();
                    pp.localEulerAngles = new m4m.math.vector3();
                    //this.dragon.localEulerAngles=new m4m.math.vector3(0,90,0);
                    _this.scene.addChild(pp);
                    //this.dragon.markDirty();
                    state.finish = true;
                }
            });
        };
        testCJ.prototype.test = function (laststate, state) {
            this.dragon = new m4m.framework.transform();
            //this.dragon.localEulerAngles=new m4m.math.vector3(0,90,0);
            var mesh = this.assetMgr.getAssetByName("MU1.0----1.9_TeXiao_Guoyichen_Effect_Mesh_Plane_danxiangsuofang_01.FBX_Plane01.mesh.bin");
            //var mesh=this.assetMgr.getDefaultMesh("quad");
            var mat = this.assetMgr.getAssetByName("WuQi_zhenhong_02.mat.json");
            var shder = this.assetMgr.getAssetByName("diffuse_bothside.shader.json");
            var mattt = new m4m.framework.material();
            mattt.setShader(shder);
            var meshf = this.dragon.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
            meshf.mesh = mesh;
            var meshr = this.dragon.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
            meshr.materials[0] = mat;
            this.dragon.localScale = new m4m.math.vector3(13, 41, 21);
            this.dragon.markDirty();
            this.scene.addChild(this.dragon);
            state.finish = true;
        };
        testCJ.prototype.addCamera = function (laststate, state) {
            var tranCam = new m4m.framework.transform();
            tranCam.name = "Cam";
            this.scene.addChild(tranCam);
            //tranCam.localEulerAngles = new m4m.math.vector3(0, -75,-5);
            tranCam.localTranslate = new m4m.math.vector3(0, 0, -3);
            this.camera = tranCam.gameObject.addComponent("camera");
            this.camera.near = 0.001;
            this.camera.far = 1000;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3);
            // tranCam.lookatPoint(new m4m.math.vector3(0,0,0));
            tranCam.markDirty();
            state.finish = true;
        };
        testCJ.prototype.start = function (app) {
            this.app = app;
            this.scene = this.app.getScene();
            this.assetMgr = this.app.getAssetMgr();
            this.taskmgr = new m4m.framework.taskMgr();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.addCamera.bind(this));
            this.taskmgr.addTaskCall(this.loadweapon.bind(this));
            //this.taskmgr.addTaskCall(this.loadmesh.bind(this));            
            //  this.taskmgr.addTaskCall(this.test.bind(this));
        };
        testCJ.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            // if(this.dragon&&this.camera)
            // {
            //     this.camera.gameObject.transform.lookat(this.dragon);
            // }
            // if(this.cameraPoint)
            // {
            //     this.cameraPoint.addChild(this.camera.gameObject.transform);
            //     this.camera.gameObject.transform.localEulerAngles=new m4m.math.vector3(0,270,0);
            //     this.camera.gameObject.transform.markDirty();
            // }
        };
        return testCJ;
    }());
    dome.testCJ = testCJ;
})(dome || (dome = {}));
var t;
(function (t) {
    var test_xinshouMask = /** @class */ (function () {
        function test_xinshouMask() {
            this.timer = 0;
        }
        test_xinshouMask.prototype.start = function (app) {
            var _this = this;
            this.app = app;
            this.scene = this.app.getScene();
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                if (state.isfinish) {
                    //添加一个片
                    var image = new m4m.framework.transform();
                    image.name = "cube";
                    image.localScale.x = image.localScale.y = image.localScale.z = 1;
                    image.localTranslate.z = 0.01;
                    _this.scene.addChild(image);
                    var mesh = image.gameObject.addComponent("meshFilter");
                    mesh.mesh = _this.app.getAssetMgr().getDefaultMesh("quad");
                    var imageRender_1 = image.gameObject.addComponent("meshRenderer");
                    var imageMask = new m4m.framework.transform();
                    imageMask.name = "mask";
                    imageMask.localScale.x = imageMask.localScale.y = imageMask.localScale.z = 1;
                    _this.scene.addChild(imageMask);
                    var meshMask = imageMask.gameObject.addComponent("meshFilter");
                    meshMask.mesh = _this.app.getAssetMgr().getDefaultMesh("quad");
                    _this.imageRenderMask = imageMask.gameObject.addComponent("meshRenderer");
                    //添加一个摄像机
                    var objCam = new m4m.framework.transform();
                    objCam.name = "sth.";
                    _this.scene.addChild(objCam);
                    _this.camera = objCam.gameObject.addComponent("camera");
                    _this.camera.near = 0.01;
                    _this.camera.far = 110;
                    objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
                    objCam.lookat(image);
                    // objCam.lookat(imageMask);
                    objCam.markDirty(); //标记为需要刷新
                    var assetmgr = _this.app.getAssetMgr();
                    var sh = assetmgr.getShader("diffuse.shader.json");
                    if (sh != null) {
                        //用了从资源里加载出来的shader
                        imageRender_1.materials = [];
                        imageRender_1.materials.push(new m4m.framework.material());
                        imageRender_1.materials[0].setShader(sh);
                        _this.app.getAssetMgr().load("res/uvSprite.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                console.warn("Finish load img.");
                                var texture = _this.app.getAssetMgr().getAssetByName("uvSprite.png");
                                imageRender_1.materials[0].setTexture("_MainTex", texture);
                            }
                        });
                    }
                    var shaderMask = assetmgr.getShader("unlit_transparent.shader.json");
                    debugger;
                    if (shaderMask != null) {
                        _this.imageRenderMask.materials = [];
                        _this.imageRenderMask.materials.push(new m4m.framework.material());
                        _this.imageRenderMask.materials[0].setShader(shaderMask);
                        var url_1 = "res/mask.png";
                        m4m.io.loadImg(url_1, function (_tex, _err) {
                            var fileName = getFileName(url_1);
                            _this.texture = new m4m.framework.texture(fileName);
                            var _textureFormat = m4m.render.TextureFormatEnum.RGBA; //这里需要确定格式
                            var t2d = new m4m.render.glTexture2D(_this.app.getAssetMgr().webgl, _textureFormat);
                            t2d.uploadImage(_tex, true, true, true, false);
                            _this.texture.glTexture = t2d;
                            _this.app.getAssetMgr().setAssetUrl(_this.texture, url_1);
                            _this.app.getAssetMgr().use(_this.texture);
                            _this.imageRenderMask.materials[0].setTexture("_MainTex", _this.texture);
                            _this.imageRenderMask.materials[0].setVector4("_MaskTex_ST", new m4m.math.vector4(1, 1, 0, 0));
                        }, function (loadedLength, totalLength) { });
                    }
                }
            });
            this.addDomUI();
        };
        test_xinshouMask.prototype.addDomUI = function () {
            var _this = this;
            var tillingX = document.createElement("label");
            tillingX.style.top = "160px";
            tillingX.style.position = "absolute";
            tillingX.textContent = "tillingX:";
            this.app.container.appendChild(tillingX);
            var inputEle0 = document.createElement("input");
            inputEle0.style.top = "160px";
            inputEle0.style.left = "60px";
            inputEle0.style.width = "100px";
            inputEle0.style.position = "absolute";
            inputEle0.value = "1";
            this.app.container.appendChild(inputEle0);
            var tillingY = document.createElement("label");
            tillingY.style.top = "160px";
            tillingY.style.left = "180px";
            tillingY.style.position = "absolute";
            tillingY.textContent = "tillingY:";
            this.app.container.appendChild(tillingY);
            var inputEle1 = document.createElement("input");
            inputEle1.style.top = "160px";
            inputEle1.style.left = "240px";
            inputEle1.style.width = "100px";
            inputEle1.style.position = "absolute";
            inputEle1.value = "1";
            this.app.container.appendChild(inputEle1);
            var offsetX = document.createElement("label");
            offsetX.style.top = "160px";
            offsetX.style.left = "360px";
            offsetX.style.position = "absolute";
            offsetX.textContent = "offsetX:";
            this.app.container.appendChild(offsetX);
            var inputEle2 = document.createElement("input");
            inputEle2.style.top = "160px";
            inputEle2.style.left = "420px";
            inputEle2.style.width = "100px";
            inputEle2.style.position = "absolute";
            inputEle2.value = "0";
            this.app.container.appendChild(inputEle2);
            var offsetY = document.createElement("label");
            offsetY.style.top = "160px";
            offsetY.style.left = "540px";
            offsetY.style.position = "absolute";
            offsetY.textContent = "offsetY:";
            this.app.container.appendChild(offsetY);
            var inputEle3 = document.createElement("input");
            inputEle3.style.top = "160px";
            inputEle3.style.left = "620px";
            inputEle3.style.width = "100px";
            inputEle3.style.position = "absolute";
            inputEle3.value = "0";
            this.app.container.appendChild(inputEle3);
            var button = document.createElement("button");
            button.style.top = "220px";
            button.textContent = "update";
            button.style.position = "absolute";
            button.onclick = function () {
                var tillingXVal = parseFloat(inputEle0.value);
                var tillingYVal = parseFloat(inputEle1.value);
                var offsetXVal = parseFloat(inputEle2.value);
                var offsetYVal = parseFloat(inputEle3.value);
                _this.imageRenderMask.materials[0].setVector4("_MaskTex_ST", new m4m.math.vector4(tillingXVal, tillingYVal, offsetXVal, offsetYVal));
            };
            this.app.container.appendChild(button);
        };
        test_xinshouMask.prototype.update = function (delta) {
            this.timer += delta;
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (!this.camera)
                return;
            var objCam = this.camera.gameObject.transform;
            // objCam.localTranslate = new m4m.math.vector3(x2 * 2, 2.25, -z2 * 2);
            // objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        };
        return test_xinshouMask;
    }());
    t.test_xinshouMask = test_xinshouMask;
    function getFileName(url) {
        var filei = url.lastIndexOf("/");
        var file = url.substr(filei + 1);
        return file;
    }
    t.getFileName = getFileName;
})(t || (t = {}));
var test_load = /** @class */ (function () {
    function test_load() {
    }
    test_load.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var assetMgr = this.app.getAssetMgr();
        assetMgr.load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                var name_3 = "0001_shengyi_male";
                assetMgr.load("".concat(resRootPath, "prefab/").concat(name_3, "/").concat(name_3, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var prefab = assetMgr.getAssetByName(name_3 + ".prefab.json", "".concat(name_3, ".assetbundle.json"));
                        var ins = prefab.getCloneTrans();
                        _this.scene.addChild(ins);
                        _this.camNode.lookat(ins);
                        _this.camNode.markDirty();
                    }
                });
            }
        });
        //添加一个摄像机
        var camNode = new m4m.framework.transform();
        this.scene.addChild(camNode);
        this.camera = camNode.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        camNode.localTranslate = new m4m.math.vector3(0, 10, -10);
        this.camNode = camNode;
    };
    test_load.prototype.update = function (delta) {
    };
    return test_load;
}());
var t;
(function (t) {
    var test_metal = /** @class */ (function () {
        function test_metal() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        test_metal.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_metal.prototype.loadText = function (laststate, state) {
            var c = 0;
            c++;
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            //rock_n256_1.png
            c++;
            this.app.getAssetMgr().load("res/rock_n256_1.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            c++;
            this.app.getAssetMgr().load("res/cube_texture_1.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            c++;
            this.app.getAssetMgr().load("res/cube_specular_1.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            c++;
            state.finish = true;
            // this.app.getAssetMgr().load("res/prefabs/cube/resources/Cube.mesh.bin", m4m.framework.AssetTypeEnum.Auto, (s) =>
            // {
            //     if (s.isfinish)
            //     {
            //         c--;
            //         if (c == 0)
            //             state.finish = true;
            //     }
            //     else
            //     {
            //         state.error = true;
            //     }
            // }
            // );
        };
        test_metal.prototype.addcamandlight = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 30;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 3, -3);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            // lighttran.lookatPoint(new m4m.math.vector3(0,0,0));
            lighttran.markDirty();
            {
                var cube = new m4m.framework.transform();
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                lighttran.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                var tex1 = this.app.getAssetMgr().getDefaultTexture("grid");
                var mat = new m4m.framework.material();
                mat.setShader(sh);
                mat.setTexture("_MainTex", tex1);
                renderer.materials = [];
                renderer.materials.push(mat);
                var cuber = renderer;
            }
            state.finish = true;
        };
        test_metal.prototype.addmetalmodel = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/specular/0122_huanghunshibing.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0122_huanghunshibing.prefab.json");
                    var model = _prefab.getCloneTrans();
                    model.localTranslate.x = 0;
                    model.localTranslate.y = 0;
                    model.localTranslate.z = 0;
                    _this.scene.addChild(model);
                    model.markDirty();
                    _this.model = model;
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_metal.prototype.addAsiModel = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/asi_streamlight/asi_streamlight.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("asi_streamlight.prefab.json");
                    var model = _prefab.getCloneTrans();
                    model.localTranslate.x = 0;
                    model.localTranslate.y = 0;
                    model.localTranslate.z = 0;
                    _this.scene.addChild(model);
                    model.markDirty();
                    _this.model = model;
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_metal.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var btn = document.createElement("button");
            btn.textContent = "切换光源类型";
            btn.onclick = function () {
                if (_this.light != null) {
                    if (_this.light.type == m4m.framework.LightTypeEnum.Direction) {
                        _this.light.type = m4m.framework.LightTypeEnum.Point;
                        console.log("点光源");
                    }
                    else if (_this.light.type == m4m.framework.LightTypeEnum.Point) {
                        _this.light.type = m4m.framework.LightTypeEnum.Spot;
                        console.log("聚光灯");
                    }
                    else {
                        _this.light.type = m4m.framework.LightTypeEnum.Direction;
                        console.log("方向光");
                    }
                }
            };
            btn.style.top = "124px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            //this.taskmgr.addTaskCall(this.addmetalmodel.bind(this));
            this.taskmgr.addTaskCall(this.addAsiModel.bind(this));
            // this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.addcamandlight.bind(this));
            this.addinput("260px", "0px", "diffuse", "string");
            var input = this.addinput("260px", "100px", "0");
            this.addinput("300px", "0px", "emitpower", "string");
            var input1 = this.addinput("300px", "100px", "1");
            this.diffuse = input;
            this.emitpower = input1;
        };
        test_metal.prototype.addinput = function (top, left, text, type) {
            if (type === void 0) { type = "number"; }
            var input = document.createElement("input");
            input.type = type;
            this.app.container.appendChild(input);
            input.style.top = top;
            input.style.left = left;
            input.style.position = "absolute";
            input.value = text;
            return input;
        };
        test_metal.prototype.addbtn = function (top, left, text) {
            var btn = document.createElement("button");
            btn.style.top = top;
            btn.style.left = left;
            btn.style.position = "absolute";
            btn.textContent = "diffuse";
            this.app.container.appendChild(btn);
            return btn;
        };
        test_metal.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            // if (this.camera != null)
            // {
            //     var objCam = this.camera.gameObject.transform;
            //     objCam.localTranslate = new m4m.math.vector3(x2 * 5, 4, -z2 * 5);
            //     // objCam.markDirty();
            //     //objCam.updateWorldTran();
            //     objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            //     objCam.markDirty();
            // }
            if (this.light != null) {
                var objlight = this.light.gameObject.transform;
                objlight.localTranslate = new m4m.math.vector3(x * 3, 3, z * 3);
                //objlight.updateWorldTran();
                objlight.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objlight.markDirty();
            }
            if (this.model != undefined) {
                m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer * 5, this.model.localRotate);
                this.model.markDirty();
                var ss = this.model.find("0107_lmsb");
                if (ss) {
                    var meshrender = ss.gameObject.getComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
                    meshrender.materials[0].setFloat("_diffuse", this.diffuse.valueAsNumber);
                    meshrender.materials[0].setFloat("_emitPow", this.emitpower.valueAsNumber);
                }
            }
        };
        return test_metal;
    }());
    t.test_metal = test_metal;
})(t || (t = {}));
var test_multipleplayer_anim = /** @class */ (function () {
    function test_multipleplayer_anim() {
        this.cubes = {};
        this.resName = "elong";
        this.timer = 0;
        this.aniplayers = [];
    }
    Object.defineProperty(test_multipleplayer_anim.prototype, "abName", {
        get: function () { return "res/prefabs/".concat(this.resName, "/").concat(this.resName, ".assetbundle.json"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(test_multipleplayer_anim.prototype, "prefabName", {
        get: function () { return "".concat(this.resName, ".prefab.json"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(test_multipleplayer_anim.prototype, "resPath", {
        get: function () { return "res/prefabs/".concat(this.resName, "/resources/"); },
        enumerable: false,
        configurable: true
    });
    test_multipleplayer_anim.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = this.app.getScene();
        var baihu = new m4m.framework.transform();
        baihu.name = "obj";
        baihu.localScale.x = baihu.localScale.y = baihu.localScale.z = 1;
        this.scene.addChild(baihu);
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load(_this.abName, m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName(_this.prefabName);
                        var a = 10;
                        var b = 10;
                        var count = 13;
                        for (var i = -count; i <= count; i++) {
                            for (var j = -count; j <= count; j++) {
                                var trans = _prefab.getCloneTrans();
                                _this.scene.addChild(trans);
                                trans.localScale = new m4m.math.vector3(1, 1, 1);
                                // trans.localTranslate = new m4m.math.vector3((-a + i) * 5, 0, (-b + j) * 5);
                                trans.localTranslate = new m4m.math.vector3(i * 5, 0, j * 5);
                                if (i == 0 && j == 0) {
                                    objCam.lookat(trans);
                                }
                                var ap_2 = trans.gameObject.getComponent("aniplayer");
                                _this.aniplayers.push(ap_2);
                            }
                        }
                        //加载动画
                        var ap_3 = _this.aniplayers[0];
                        var list = ap_3.awaitLoadClipNames();
                        var resPath = _this.resPath;
                        var cname_2 = "";
                        if (list.length > 0) {
                            cname_2 = list[1];
                            ap_3.addClipByNameLoad(_this.app.getAssetMgr(), resPath, cname_2, function (sta, clipName) {
                                if (sta.isfinish) {
                                    var clip_1 = ap_3.getClip(cname_2);
                                    _this.aniplayers.forEach(function (sub) {
                                        sub.addClip(clip_1);
                                    });
                                    _this.aniplayers.forEach(function (sub) {
                                        sub.play(cname_2);
                                    });
                                }
                            });
                        }
                        objCam.markDirty();
                    }
                });
            }
        });
        this.cube = baihu;
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 399;
        objCam.localTranslate = new m4m.math.vector3(0, 286, 0);
        // objCam.lookat(baihu);
        objCam.markDirty(); //标记为需要刷新
        var tipsLabel = document.createElement("label");
        tipsLabel.style.top = "300px";
        tipsLabel.style.position = "absolute";
        tipsLabel.textContent = "开启cache";
        this.app.container.appendChild(tipsLabel);
        var cacheOpenCheckBox = document.createElement("input");
        cacheOpenCheckBox.type = "checkbox";
        cacheOpenCheckBox.checked = false;
        cacheOpenCheckBox.onchange = function () {
            // for(let key in this.aniplayers)
            // {
            //     this.aniplayers[key].isCache = cacheOpenCheckBox.checked;
            // }
        };
        cacheOpenCheckBox.style.top = "350px";
        cacheOpenCheckBox.style.position = "absolute";
        this.app.container.appendChild(cacheOpenCheckBox);
    };
    test_multipleplayer_anim.prototype.update = function (delta) {
    };
    return test_multipleplayer_anim;
}());
var t;
(function (t) {
    var Test_NormalMap = /** @class */ (function () {
        function Test_NormalMap() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        Test_NormalMap.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        Test_NormalMap.prototype.loadText = function (laststate, state) {
            var c = 0;
            c++;
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/zg256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            c++;
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/map_diffuse.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            c++;
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/map_normal.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    c--;
                    if (c == 0)
                        state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        Test_NormalMap.prototype.addnormalcube = function (laststate, state) {
            this.normalCube = new m4m.framework.transform();
            this.normalCube.name = "cube";
            this.normalCube.localScale.x = this.normalCube.localScale.y = this.normalCube.localScale.z = 3;
            this.scene.addChild(this.normalCube);
            var mesh = this.normalCube.gameObject.addComponent("meshFilter");
            var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
            mesh.mesh = (smesh);
            var renderer = this.normalCube.gameObject.addComponent("meshRenderer");
            this.cuber = renderer;
            var sh = this.app.getAssetMgr().getShader("normalmap.shader.json");
            if (sh != null) {
                this.cuber.materials = [];
                this.cuber.materials.push(new m4m.framework.material());
                this.cuber.materials[0].setShader(sh); //----------------使用shader
                //cuber.materials[0].setVector4("_Color", new m4m.math.vector4(0.4, 0.4, 0.2, 1.0));
                var texture = this.app.getAssetMgr().getAssetByName("map_diffuse.png");
                this.cuber.materials[0].setTexture("_MainTex", texture);
                var normalTexture = this.app.getAssetMgr().getAssetByName("map_normal.png");
                this.cuber.materials[0].setTexture("_NormalTex", normalTexture);
                // 瞎搞
                // if(this.light)
                // {
                //      let objlight = this.light.gameObject.transform;
                //      this.cuber.materials[0].setVector4("lightpos",new m4m.math.vector4(objlight.localTranslate.x,objlight.localTranslate.y,objlight.localTranslate.z,1));
                // }
            }
            state.finish = true;
        };
        Test_NormalMap.prototype.addcube = function (laststate, state) {
            var cube = new m4m.framework.transform();
            cube.name = "cube";
            cube.localScale.x = cube.localScale.y = cube.localScale.z = 2;
            cube.localTranslate.x = 3;
            this.scene.addChild(cube);
            var mesh = cube.gameObject.addComponent("meshFilter");
            var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
            mesh.mesh = (smesh);
            var renderer = cube.gameObject.addComponent("meshRenderer");
            var cuber = renderer;
            var sh = this.app.getAssetMgr().getShader("light1.shader.json");
            if (sh != null) {
                cuber.materials = [];
                cuber.materials.push(new m4m.framework.material());
                cuber.materials[0].setShader(sh); //----------------使用shader
                var texture = this.app.getAssetMgr().getAssetByName("map_diffuse.png");
                cuber.materials[0].setTexture("_MainTex", texture);
            }
            state.finish = true;
        };
        Test_NormalMap.prototype.addcamandlight = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 30;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -5);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
            {
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                lighttran.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var sh = this.app.getAssetMgr().getShader("light1.shader.json");
                if (sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(sh); //----------------使用shader
                    //cuber.materials[0].setVector4("_Color", new m4m.math.vector4(0.4, 0.4, 0.2, 1.0));
                    var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
            }
            state.finish = true;
        };
        Test_NormalMap.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var btn = document.createElement("button");
            btn.textContent = "切换光源类型";
            btn.onclick = function () {
                if (_this.light != null) {
                    if (_this.light.type == m4m.framework.LightTypeEnum.Direction) {
                        _this.light.type = m4m.framework.LightTypeEnum.Point;
                        console.log("点光源");
                    }
                    else if (_this.light.type == m4m.framework.LightTypeEnum.Point) {
                        _this.light.type = m4m.framework.LightTypeEnum.Spot;
                        console.log("聚光灯");
                    }
                    else {
                        _this.light.type = m4m.framework.LightTypeEnum.Direction;
                        console.log("方向光");
                    }
                }
            };
            btn.style.top = "124px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.addnormalcube.bind(this));
            this.taskmgr.addTaskCall(this.addcamandlight.bind(this));
        };
        Test_NormalMap.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                objCam.localTranslate = new m4m.math.vector3(x2 * 10, 2.25, -z2 * 10);
                // objCam.markDirty();
                objCam.updateWorldTran();
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                //objCam.markDirty();
            }
            // if (this.normalCube != null) {
            //     let transform = this.normalCube.gameObject.transform;
            //     m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up,this.timer*30,transform.localRotate);
            //     transform.markDirty();
            // }
            // what the fuck。
            if (this.light != null) {
                var objlight = this.light.gameObject.transform;
                objlight.localTranslate = new m4m.math.vector3(x * 5, 3, z * 5);
                //     // objlight.markDirty();
                //     objlight.updateWorldTran();
                objlight.lookatPoint(new m4m.math.vector3(0, 0, 0));
                //     let lightPos = new m4m.math.vector4(x * 5, 3, z * 5,1.0);
                //     this.cuber.materials[0].setVector4("lightpos",lightPos);
                //     let eyePos = new m4m.math.vector4(x2 * 10, 2.25, -z2 * 10);
                //     this.cuber.materials[0].setVector4("eyepos",eyePos);
            }
        };
        return Test_NormalMap;
    }());
    t.Test_NormalMap = Test_NormalMap;
})(t || (t = {}));
var test_pick = /** @class */ (function () {
    function test_pick() {
        this.timer = 0;
        this.movetarget = new m4m.math.vector3();
        this.pointDown = false;
    }
    test_pick.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.inputMgr = this.app.getInputMgr();
        this.scene = this.app.getScene();
        var cuber;
        console.warn("Finish it.");
        //添加一个盒子
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = 10;
        cube.localScale.y = 0.1;
        cube.localScale.z = 10;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        var smesh = this.app.getAssetMgr().getDefaultMesh("pyramid");
        mesh.mesh = (this.app.getAssetMgr().getDefaultMesh("cube"));
        var renderer = cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        cuber = renderer;
        this.cube = cube;
        {
            this.cube2 = new m4m.framework.transform();
            this.cube2.name = "cube2";
            this.scene.addChild(this.cube2);
            this.cube2.localScale.x = this.cube2.localScale.y = this.cube2.localScale.z = 1;
            this.cube2.localTranslate.x = -5;
            this.cube2.markDirty();
            var mesh = this.cube2.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube2.gameObject.addComponent("meshRenderer");
            var coll = this.cube2.gameObject.addComponent("boxcollider");
            // coll.center = new m4m.math.vector3(0, 1, 0);
            // coll.radius = 1;
            coll.colliderVisible = true;
            //---------------------baocuo
            //this.cube2.gameObject.addComponent("frustumculling") as m4m.framework.frustumculling;
        }
        this.cube3 = this.cube2.clone();
        this.scene.addChild(this.cube3);
        {
            this.cube3 = new m4m.framework.transform();
            this.cube3.name = "cube3";
            this.scene.addChild(this.cube3);
            this.cube3.localScale.x = this.cube3.localScale.y = this.cube3.localScale.z = 1;
            this.cube3.localTranslate.x = -5;
            this.cube3.markDirty();
            var mesh = this.cube3.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube3.gameObject.addComponent("meshRenderer");
            var coll = this.cube3.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        {
            this.cube4 = new m4m.framework.transform();
            this.cube4.name = "cube4";
            this.scene.addChild(this.cube4);
            this.cube4.localScale.x = this.cube4.localScale.y = this.cube4.localScale.z = 1;
            this.cube4.localTranslate.x = 5;
            this.cube4.markDirty();
            var mesh = this.cube4.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube4.gameObject.addComponent("meshRenderer");
            var coll = this.cube4.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
        CameraController.instance().init(this.app, this.camera);
    };
    test_pick.prototype.update = function (delta) {
        CameraController.instance().update(delta);
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            var ray = this.camera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
            var tempinfo = m4m.math.pool.new_pickInfo();
            var bool = this.scene.pick(ray, tempinfo, true);
            if (bool != null) {
                m4m.math.vec3Clone(tempinfo.hitposition, this.movetarget);
                this.timer = 0;
            }
            m4m.math.pool.delete_pickInfo(tempinfo);
        }
        this.pointDown = this.inputMgr.point.touch;
        if (this.cube3.gameObject.getComponent("boxcollider").intersectsTransform(this.cube4)) {
            return;
        }
        if (this.cube2.gameObject.getComponent("boxcollider").intersectsTransform(this.cube3)) {
            return;
        }
        this.timer += delta;
        this.cube3.localTranslate.x += delta;
        this.cube3.localTranslate = this.cube3.localTranslate;
        this.cube3.markDirty();
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate.x += delta;
        // objCam.markDirty();
        var tv = new m4m.math.vector3();
        m4m.math.vec3SLerp(this.cube2.localTranslate, this.movetarget, this.timer, this.cube2.localTranslate);
        this.cube2.localTranslate = this.movetarget;
        this.cube2.markDirty();
    };
    return test_pick;
}());
var test_pick_4p = /** @class */ (function () {
    function test_pick_4p() {
        this.timer = 0;
        this.movetarget = new m4m.math.vector3();
        this.pointDown = false;
    }
    test_pick_4p.prototype.start = function (app) {
        console.log("i am here.");
        this.app = app;
        this.inputMgr = this.app.getInputMgr();
        this.scene = this.app.getScene();
        var cuber;
        console.warn("Finish it.");
        //添加一个盒子
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localScale.x = 10;
        cube.localScale.y = 0.1;
        cube.localScale.z = 10;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        var smesh = this.app.getAssetMgr().getDefaultMesh("pyramid");
        mesh.mesh = (this.app.getAssetMgr().getDefaultMesh("cube"));
        var renderer = cube.gameObject.addComponent("meshRenderer");
        cube.gameObject.addComponent("boxcollider");
        cube.markDirty();
        cuber = renderer;
        this.cube = cube;
        {
            this.cube2 = new m4m.framework.transform();
            this.cube2.name = "cube2";
            this.scene.addChild(this.cube2);
            this.cube2.localScale.x = this.cube2.localScale.y = this.cube2.localScale.z = 1;
            this.cube2.localTranslate.x = -5;
            this.cube2.markDirty();
            var mesh = this.cube2.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube2.gameObject.addComponent("meshRenderer");
            var coll = this.cube2.gameObject.addComponent("spherecollider");
            coll.center = new m4m.math.vector3(0, 1, 0);
            coll.radius = 1;
            //---------------------baocuo
            //this.cube2.gameObject.addComponent("frustumculling") as m4m.framework.frustumculling;
        }
        this.cube3 = this.cube2.clone();
        this.scene.addChild(this.cube3);
        {
            this.cube3 = new m4m.framework.transform();
            this.cube3.name = "cube3";
            this.scene.addChild(this.cube3);
            this.cube3.localScale.x = this.cube3.localScale.y = this.cube3.localScale.z = 1;
            this.cube3.localTranslate.x = -5;
            this.cube3.markDirty();
            var mesh = this.cube3.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube3.gameObject.addComponent("meshRenderer");
            var coll = this.cube3.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        {
            this.cube4 = new m4m.framework.transform();
            this.cube4.name = "cube4";
            this.scene.addChild(this.cube4);
            this.cube4.localScale.x = this.cube4.localScale.y = this.cube4.localScale.z = 1;
            this.cube4.localTranslate.x = 5;
            this.cube4.markDirty();
            var mesh = this.cube4.gameObject.addComponent("meshFilter");
            mesh.mesh = (smesh);
            var renderer = this.cube4.gameObject.addComponent("meshRenderer");
            var coll = this.cube4.gameObject.addComponent("boxcollider");
            coll.colliderVisible = true;
        }
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        this.camera.viewport = new m4m.math.rect(0, 0, 0.5, 0.5);
        objCam.markDirty(); //标记为需要刷新
        {
            //添加2号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false;
            objCam2.localTranslate = new m4m.math.vector3(0, 5, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0.5, 0.5, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
        {
            //添加3号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false;
            objCam2.localTranslate = new m4m.math.vector3(0, 8, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0.5, 0, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
        {
            //添加4号摄像机
            var objCam2 = new m4m.framework.transform();
            objCam2.name = "sth2.";
            this.scene.addChild(objCam2);
            var _camera = objCam2.gameObject.addComponent("camera");
            _camera.near = 0.01;
            _camera.far = 100;
            _camera.clearOption_Color = false;
            objCam2.localTranslate = new m4m.math.vector3(0, 8, -10);
            objCam2.lookat(this.cube);
            _camera.viewport = new m4m.math.rect(0, 0.5, 0.5, 0.5);
            objCam2.markDirty(); //标记为需要刷新
        }
    };
    test_pick_4p.prototype.update = function (delta) {
        if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
         {
            var ray = this.camera.creatRayByScreen(new m4m.math.vector2(this.inputMgr.point.x, this.inputMgr.point.y), this.app);
            var tempInfo = m4m.math.pool.new_pickInfo();
            var bool = this.scene.pick(ray, tempInfo);
            if (bool != null) {
                m4m.math.vec3Clone(tempInfo.hitposition, this.movetarget);
                this.timer = 0;
            }
        }
        this.pointDown = this.inputMgr.point.touch;
        if (this.cube3.gameObject.getComponent("boxcollider").intersectsTransform(this.cube4)) {
            return;
        }
        this.timer += delta;
        this.cube3.localTranslate.x += delta;
        this.cube3.markDirty();
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 0.1);
        var z2 = Math.cos(this.timer * 0.1);
        // var objCam = this.camera.gameObject.transform;
        // objCam.localTranslate.x += delta;
        // objCam.markDirty();
        // var tv = new m4m.math.vector3();
        // m4m.math.vec3SLerp(this.cube2.localTranslate, this.movetarget, this.timer, this.cube2.localTranslate);
        // //this.cube2.localTranslate = this.movetarget;
        // this.cube2.markDirty();
    };
    return test_pick_4p;
}());
var t;
(function (t) {
    var test_post_bloom = /** @class */ (function () {
        function test_post_bloom() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        test_post_bloom.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_post_bloom.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_post_bloom.prototype.addcamandlight = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 1;
            this.camera.far = 15;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            state.finish = true;
        };
        test_post_bloom.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            this.addbtn("50px", "normal", function () {
                _this.camera.postQueues = [];
            });
            this.addbtn("150px", "模糊", function () {
                _this.camera.postQueues = [];
                var color = new m4m.framework.cameraPostQueue_Color();
                color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                //color.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, 512, 512, true, false);
                _this.camera.postQueues.push(color);
                var textcolor = new m4m.framework.texture("_color");
                textcolor.glTexture = color.renderTarget;
                var texsize = 512;
                var post = new m4m.framework.cameraPostQueue_Quad();
                post.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, texsize, texsize, true, false);
                post.material.setShader(_this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
                post.material.setTexture("_MainTex", textcolor);
                post.material.setVector4("sample_offsets", new m4m.math.vector4(0, 1.0, 0, -1.0));
                post.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
                _this.camera.postQueues.push(post);
                var texBlur0 = new m4m.framework.texture("_blur0");
                texBlur0.glTexture = post.renderTarget;
                var post1 = new m4m.framework.cameraPostQueue_Quad();
                post1.material.setShader(_this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
                post1.material.setTexture("_MainTex", texBlur0);
                post1.material.setVector4("sample_offsets", new m4m.math.vector4(1.0, 0, -1.0, 0));
                post1.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
                _this.camera.postQueues.push(post1);
            });
            this.addbtn("350px", "景深", function () {
                _this.camera.postQueues = [];
                var color = new m4m.framework.cameraPostQueue_Color();
                color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                _this.camera.postQueues.push(color);
                var textcolor = new m4m.framework.texture("_color");
                textcolor.glTexture = color.renderTarget;
                var depth = new m4m.framework.cameraPostQueue_Depth();
                depth.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                _this.camera.postQueues.push(depth);
                var depthcolor = new m4m.framework.texture("_depthcolor");
                depthcolor.glTexture = depth.renderTarget;
                var texsize = 512;
                var post = new m4m.framework.cameraPostQueue_Quad();
                post.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, texsize, texsize, true, false);
                post.material.setShader(_this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
                post.material.setTexture("_MainTex", textcolor);
                post.material.setVector4("sample_offsets", new m4m.math.vector4(0, 1.0, 0, -1.0));
                post.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
                _this.camera.postQueues.push(post);
                var texBlur0 = new m4m.framework.texture("_blur0");
                texBlur0.glTexture = post.renderTarget;
                var post1 = new m4m.framework.cameraPostQueue_Quad();
                post1.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, texsize, texsize, true, false);
                post1.material.setShader(_this.scene.app.getAssetMgr().getShader("separate_blur.shader.json"));
                post1.material.setTexture("_MainTex", texBlur0);
                post1.material.setVector4("sample_offsets", new m4m.math.vector4(1.0, 0, -1.0, 0));
                post1.material.setVector4("_MainTex_TexelSize", new m4m.math.vector4(1.0 / texsize, 1.0 / texsize, texsize, texsize));
                _this.camera.postQueues.push(post1);
                var texBlur = new m4m.framework.texture("_blur");
                texBlur.glTexture = post1.renderTarget;
                var post2 = new m4m.framework.cameraPostQueue_Quad();
                post2.material.setShader(_this.scene.app.getAssetMgr().getShader("dof.shader.json"));
                post2.material.setTexture("_MainTex", textcolor);
                post2.material.setTexture("_BlurTex", texBlur);
                post2.material.setTexture("_DepthTex", depthcolor);
                //var focalDistance=(10-this.camera.near)/(this.camera.far-this.camera.near);
                var focalDistance = 0.96;
                post2.material.setFloat("_focalDistance", focalDistance);
                _this.camera.postQueues.push(post2);
            });
            this.addbtn("350px", "bloom", function () {
                _this.camera.postQueues = [];
            });
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.addcamandlight.bind(this));
        };
        test_post_bloom.prototype.addbtn = function (topOffset, textContent, func) {
            var _this = this;
            var btn = document.createElement("button");
            btn.style.top = topOffset;
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            btn.textContent = textContent;
            btn.onclick = function () {
                _this.camera.postQueues = [];
                func();
            };
        };
        test_post_bloom.prototype.update = function (delta) {
            this.taskmgr.move(delta);
        };
        return test_post_bloom;
    }());
    t.test_post_bloom = test_post_bloom;
})(t || (t = {}));
var t;
(function (t) {
    var test_posteffect = /** @class */ (function () {
        function test_posteffect() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
        }
        test_posteffect.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_posteffect.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/map_diffuse.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_posteffect.prototype.addcube = function (laststate, state) {
            for (var i = -4; i < 5; i++) {
                for (var j = -4; j < 5; j++) {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                    cube.localTranslate.x = i;
                    cube.localTranslate.z = j;
                    this.scene.addChild(cube);
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("light1.shader.json");
                    // var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        //cuber.materials[0].setVector4("_Color", new m4m.math.vector4(0.4, 0.4, 0.2, 1.0));
                        var texture = this.app.getAssetMgr().getAssetByName("map_diffuse.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                }
            }
            state.finish = true;
        };
        test_posteffect.prototype.addcamandlight = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 1;
            this.camera.far = 100;
            this.camera.fov = Math.PI * 0.3;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            //set post effect
            {
                //color 2 rt
                var color = new m4m.framework.cameraPostQueue_Color();
                color.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, 1024, 1024, true, false);
                this.camera.postQueues.push(color);
                //depth 2 rt
                var depth = new m4m.framework.cameraPostQueue_Depth();
                depth.renderTarget = new m4m.render.glRenderTarget(this.scene.webgl, 1024, 1024, true, false);
                this.camera.postQueues.push(depth);
                var post = new m4m.framework.cameraPostQueue_Quad();
                post.material.setShader(this.scene.app.getAssetMgr().getShader("outline.shader.json"));
                var text = new m4m.framework.texture("_depth");
                text.glTexture = depth.renderTarget;
                var textcolor = new m4m.framework.texture("_color");
                textcolor.glTexture = color.renderTarget;
                post.material.setTexture("_MainTex", textcolor);
                post.material.setTexture("_DepthTex", text);
                this.camera.postQueues.push(post);
            }
            //灯光
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            this.light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
            {
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 0.5;
                lighttran.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var sh = this.app.getAssetMgr().getShader("light1.shader.json");
                if (sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(sh); //----------------使用shader
                    //cuber.materials[0].setVector4("_Color", new m4m.math.vector4(0.4, 0.4, 0.2, 1.0));
                    var texture = this.app.getAssetMgr().getAssetByName("map_diffuse.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
            }
            state.finish = true;
        };
        test_posteffect.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var btn = document.createElement("button");
            btn.textContent = "切换光源类型";
            btn.style.top = "120px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            btn.onclick = function () {
                if (_this.light != null) {
                    if (_this.light.type == m4m.framework.LightTypeEnum.Direction) {
                        _this.light.type = m4m.framework.LightTypeEnum.Point;
                        console.log("点光源");
                    }
                    else if (_this.light.type == m4m.framework.LightTypeEnum.Point) {
                        _this.light.type = m4m.framework.LightTypeEnum.Spot;
                        _this.light.spotAngelCos = Math.cos(0.2 * Math.PI);
                        console.log("聚光灯");
                    }
                    else {
                        _this.light.type = m4m.framework.LightTypeEnum.Direction;
                        console.log("方向光");
                    }
                }
            };
            var list = [
                "灰度+描边",
                "马赛克",
                "均值模糊",
                "高斯模糊",
                "径向模糊",
                "旋转扭曲",
                "桶模糊",
                "bloom",
                "景深",
                "Vignetting",
                "校色"
            ];
            var select = document.createElement("select");
            select.style.top = "240px";
            select.style.position = "absolute";
            this.app.container.appendChild(select);
            for (var i = 0; i < list.length; i++) {
                var op = document.createElement("option");
                op.value = i.toString();
                op.innerText = list[i];
                select.appendChild(op);
            }
            select.onchange = function () {
                _this.camera.postQueues = [];
                if (select.value == "0") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    //depth 2 rt
                    var depth = new m4m.framework.cameraPostQueue_Depth();
                    depth.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(depth);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("outline.shader.json"));
                    var text = new m4m.framework.texture("_depth");
                    text.glTexture = depth.renderTarget;
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    post.material.setTexture("_DepthTex", text);
                    _this.camera.postQueues.push(post);
                    console.log("灰度+描边");
                }
                else if (select.value == "1") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    var sh = _this.scene.app.getAssetMgr().getShader("mosaic.shader.json");
                    post.material.setShader(sh);
                    var textcolor = new m4m.framework.texture("_color");
                    0;
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    _this.camera.postQueues.push(post);
                    console.log("马赛克");
                }
                else if (select.value == "2") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("blur.shader.json"));
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    post.material.setFloat("_BlurGap", 1);
                    _this.camera.postQueues.push(post);
                    console.log("均值模糊");
                }
                else if (select.value == "3") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("gaussianBlur.shader.json"));
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    post.material.setFloat("_BlurGap", 2);
                    post.material.setFloat("_BlurSigma", 6);
                    post.material.setFloat("_BlurLayer", 10);
                    _this.camera.postQueues.push(post);
                    console.log("高斯模糊");
                }
                else if (select.value == "4") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("radial_blur.shader.json"));
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    post.material.setFloat("_Level", 50);
                    _this.camera.postQueues.push(post);
                    console.log("径向模糊");
                }
                else if (select.value == "5") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("contort.shader.json"));
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    _this.camera.postQueues.push(post);
                    console.log("旋转扭曲");
                }
                else if (select.value == "6") {
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("barrel_blur.shader.json"));
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    post.material.setTexture("_MainTex", textcolor);
                    _this.camera.postQueues.push(post);
                    console.log("桶模糊");
                }
                else if (select.value == "7") {
                    var bloomctr = _this.scene.mainCamera.gameObject.addComponent("bloomctr");
                    console.log("bloom");
                }
                else if (select.value == "8") {
                    _this.camera.postQueues = [];
                    var color = new m4m.framework.cameraPostQueue_Color();
                    color.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(color);
                    var textcolor = new m4m.framework.texture("_color");
                    textcolor.glTexture = color.renderTarget;
                    var depth = new m4m.framework.cameraPostQueue_Depth();
                    depth.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                    _this.camera.postQueues.push(depth);
                    var depthcolor = new m4m.framework.texture("_depthcolor");
                    depthcolor.glTexture = depth.renderTarget;
                    var texsize = 1024;
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, texsize, texsize, true, false);
                    var isGaussianblur = false; //高斯模糊 和普通模糊
                    if (isGaussianblur) {
                        post.material.setShader(_this.scene.app.getAssetMgr().getShader("gaussianBlur.shader.json"));
                        post.material.setTexture("_MainTex", textcolor);
                        post.material.setFloat("_BlurGap", 2);
                        post.material.setFloat("_BlurSigma", 6);
                        post.material.setFloat("_BlurLayer", 10);
                    }
                    else {
                        post.material.setShader(_this.scene.app.getAssetMgr().getShader("blur.shader.json"));
                        post.material.setTexture("_MainTex", textcolor);
                    }
                    _this.camera.postQueues.push(post);
                    var texBlur = new m4m.framework.texture("_blur");
                    texBlur.glTexture = post.renderTarget;
                    var post2 = new m4m.framework.cameraPostQueue_Quad();
                    post2.material.setShader(_this.scene.app.getAssetMgr().getShader("dof.shader.json"));
                    post2.material.setTexture("_MainTex", textcolor);
                    post2.material.setTexture("_BlurTex", texBlur);
                    post2.material.setTexture("_DepthTex", depthcolor);
                    //var focalDistance=(10-this.camera.near)/(this.camera.far-this.camera.near);
                    var focalDistance = 0.96;
                    post2.material.setFloat("_focalDistance", focalDistance);
                    _this.camera.postQueues.push(post2);
                    console.log("景深");
                }
                else if (select.value == "9") {
                    var actr = _this.scene.mainCamera.gameObject.addComponent("vignettingCtr");
                    console.log("Vignetting");
                }
                else if (select.value == "10") {
                    // let actr = this.scene.mainCamera.gameObject.addComponent("colorCorrect") as m4m.framework.colorCorrect;
                    // console.log("colorCorrect"); 
                }
            };
            this.addbtn("60px", "深度图", function () {
                _this.camera.postQueues = [];
                var depth = new m4m.framework.cameraPostQueue_Depth();
                _this.camera.postQueues.push(depth);
            });
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.addcamandlight.bind(this));
        };
        test_posteffect.prototype.addbtn = function (topOffset, textContent, func) {
            var _this = this;
            var btn = document.createElement("button");
            btn.style.top = topOffset;
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
            btn.textContent = textContent;
            btn.onclick = function () {
                _this.camera.postQueues = [];
                func();
                console.log("Handle Clicking..." + textContent);
            };
        };
        test_posteffect.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                objCam.localTranslate = new m4m.math.vector3(x2 * 10, 2.25, -z2 * 10);
                // objCam.markDirty();
                objCam.updateWorldTran();
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty();
            }
            var isbreak = false;
            if (isbreak)
                return;
            if (this.light != null) {
                var objlight = this.light.gameObject.transform;
                objlight.localTranslate = new m4m.math.vector3(x * 5, 3, z * 5);
                objlight.updateWorldTran();
                objlight.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objlight.markDirty();
            }
        };
        return test_posteffect;
    }());
    t.test_posteffect = test_posteffect;
})(t || (t = {}));
var t;
(function (t) {
    var TestRotate = /** @class */ (function () {
        function TestRotate() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.count = 0;
            this.counttimer = 0;
            this.name = "rock256.png";
            this.angularVelocity = new m4m.math.vector3(10, 0, 0);
            this.eulerAngle = m4m.math.pool.new_vector3();
            this.zeroPoint = new m4m.math.vector3(0, 0, 0);
            //--------------------
            this.startdir = new m4m.math.vector3(-1, 0, 0);
            this.enddir = new m4m.math.vector3(0, 0, -1);
            this.targetdir = new m4m.math.vector3();
        }
        TestRotate.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                //state.finish = true;
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        TestRotate.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        TestRotate.prototype.loadPvr = function (laststate, state) {
            this.app.getAssetMgr().load("res/resources/" + this.name, m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
            });
        };
        TestRotate.prototype.changeShader = function () {
            var _this = this;
            var btn = document.createElement("button");
            // btn.textContent = "切换Shader到：diffuse.shader.json";
            btn.textContent = "save";
            btn.onclick = function () {
                // var sh = this.app.getAssetMgr().getShader("diffuse.shader.json") as m4m.framework.shader;
                // this.change(sh);
                var trans = _this.cube;
                var name = trans.name;
                var prefab = new m4m.framework.prefab(name + ".prefab.json");
                prefab.assetbundle = name + ".assetbundle.json";
                prefab.apply(trans);
                // this.app.getAssetMgr().setAssetUrl(prefab, url);
                _this.app.getAssetMgr().use(prefab);
                _this.app.getAssetMgr().savePrefab(trans, name + ".prefab.json", function (data, resourses, content) {
                    console.log(data);
                });
            };
            btn.style.top = "160px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        TestRotate.prototype.addcam = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 1000;
            objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            state.finish = true;
        };
        TestRotate.prototype.addcube = function (laststate, state) {
            //添加一个盒子
            {
                //添加一个盒子
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
                    cube.localTranslate.x = 0;
                    this.scene.addChild(cube);
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    // "rock256.png"
                    var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    if (sh != null) {
                        console.log("sh 不是空的");
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        if (texture == null)
                            console.error("为什么他是空的呀");
                        else {
                            console.log("texture 不是空的");
                            cuber.materials[0].setTexture("_MainTex", texture);
                        }
                    }
                    this.cube = cube;
                    // var tt=dome.addcube(this.app.getAssetMgr());
                    // this.cube.addChild(tt);
                    // tt.localTranslate.z=1;
                    // tt.localScale=new m4m.math.vector3(0.2,0.2,0.2);
                    // tt.markDirty();
                }
                {
                    var ref_cube = new m4m.framework.transform();
                    ref_cube.name = "ref_cube";
                    ref_cube.localScale.x = ref_cube.localScale.y = ref_cube.localScale.z = 1;
                    // ref_cube.localTranslate.x = 2;
                    this.scene.addChild(ref_cube);
                    var mesh = ref_cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = ref_cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("shader/def");
                    if (sh != null) {
                        renderer.materials = [];
                        renderer.materials.push(new m4m.framework.material());
                        renderer.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName(this.name);
                        renderer.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube2 = ref_cube;
                }
                {
                    this.cubetrail = new m4m.framework.transform();
                    this.cubetrail.localScale.x = this.cubetrail.localScale.y = this.cubetrail.localScale.z = 0.2;
                    this.cubetrail.localTranslate.x = -3;
                    var mesh = this.cubetrail.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = smesh;
                    this.cubetrail.gameObject.addComponent("meshRenderer");
                    this.scene.addChild(this.cubetrail);
                    this.cubetrail.markDirty();
                }
            }
            state.finish = true;
        };
        TestRotate.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.loadPvr.bind(this));
            this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.addcam.bind(this));
            this.changeShader();
        };
        //-------------
        TestRotate.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            if (this.cube != null) {
                this.cube.localTranslate.x = Math.cos(this.timer) * 3.0;
                this.cube.localTranslate.z = Math.sin(this.timer) * 3.0;
                this.cube.lookatPoint(this.zeroPoint);
                this.cube.markDirty();
            }
            if (this.cube2) {
                //this.cube2.lookat(this.cube);
                this.cube2.lookatPoint(this.cube.getWorldTranslate());
                this.cube2.markDirty();
            }
            if (this.cubetrail) {
                var cube = this.cubetrail.clone();
                this.scene.addChild(cube);
                //m4m.framework.traillerp(this.startdir,this.enddir,this.timer*0.1,this.targetdir);
                m4m.math.vec3ScaleByNum(this.targetdir, 3, this.targetdir);
                m4m.math.vec3Clone(this.targetdir, cube.localTranslate);
                cube.markDirty();
            }
        };
        return TestRotate;
    }());
    t.TestRotate = TestRotate;
})(t || (t = {}));
var test_ShadowMap = /** @class */ (function () {
    function test_ShadowMap() {
        this.shadowSh = "shadowmap.shader.json";
        this.mats = [];
        this.timer = 0;
        this.posToUV = new m4m.math.matrix();
        this.lightProjection = new m4m.math.matrix();
    }
    test_ShadowMap.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.assetmgr = this.app.getAssetMgr();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        var name = "baihu";
        this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("".concat(resRootPath, "prefab/testshadowmap/testshadowmap.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _scene = _this.app.getAssetMgr().getAssetByName("testshadowmap.scene.json", "testshadowmap.assetbundle.json");
                        var _root = _scene.getSceneRoot();
                        var assetmgr = _this.app.getAssetMgr();
                        _this.scene.addChild(_root);
                        // this.scene.getRoot().markDirty();
                        _root.markDirty();
                        //_root.updateTran(false);
                        //_root.updateAABBChild();
                        var _aabb = _root.aabb;
                        console.log(_aabb.maximum + " : " + _aabb.minimum);
                        _this.FitToScene(_this.lightcamera, _aabb);
                        _this.ShowCameraInfo(_this.lightcamera);
                        {
                            var depth = new m4m.framework.cameraPostQueue_Depth();
                            depth.renderTarget = new m4m.render.glRenderTarget(_this.scene.webgl, 1024, 1024, true, false);
                            _this.lightcamera.postQueues.push(depth);
                            _this.depthTexture = new m4m.framework.texture("_depth");
                            _this.depthTexture.glTexture = depth.renderTarget;
                            // m4m.framework.shader.setGlobalTexture ("_Light_Depth",this.depthTexture);
                        }
                        var mrs = _root.gameObject.getComponentsInChildren("meshRenderer");
                        mrs.forEach(function (item) {
                            item.materials.forEach(function (el) {
                                if (el.getShader().getName() == _this.shadowSh) {
                                    _this.mats.push(el);
                                }
                            });
                        });
                        // this.collectMat();
                        _this.mats.forEach(function (element) {
                            if (element)
                                element.setTexture("_Light_Depth", _this.depthTexture);
                        });
                    }
                });
            }
        });
        //添加一个摄像机
        var lightCamObj = new m4m.framework.transform();
        lightCamObj.name = "LightCamera";
        this.scene.addChild(lightCamObj);
        lightCamObj.localTranslate = new m4m.math.vector3(10, 10, -10);
        this.lightcamera = lightCamObj.gameObject.addComponent("camera");
        this.lightcamera.opvalue = 0;
        this.lightcamera.gameObject.transform.lookatPoint(new m4m.math.vector3(0, 0, 0));
        lightCamObj.markDirty(); //标记为需要刷新
        var viewCamObj = new m4m.framework.transform();
        viewCamObj.name = "ViewCamera";
        this.scene.addChild(viewCamObj);
        viewCamObj.localTranslate = new m4m.math.vector3(20, 20, 20);
        viewCamObj.lookatPoint(new m4m.math.vector3(0, 0, 0));
        this.viewcamera = viewCamObj.gameObject.addComponent("camera");
        viewCamObj.markDirty();
        this.ShowUI();
    };
    test_ShadowMap.prototype.collectMat = function () {
        if (!this.assetmgr)
            return;
        var resmap = this.assetmgr.mapRes;
        for (var key in resmap) {
            var asset = resmap[key];
            if (!asset["asset"] || !(asset["asset"] instanceof m4m.framework.material))
                continue;
            var mat = asset["asset"];
            if (!mat["shader"] || mat["shader"].getName() != this.shadowSh)
                continue;
            this.mats.push(mat);
        }
    };
    test_ShadowMap.prototype.setmat = function (key, value) {
        var _this = this;
        if (!this.mats)
            return;
        this.mats.forEach(function (element) {
            if (element)
                element.setTexture("_Light_Depth", _this.depthTexture);
        });
    };
    test_ShadowMap.prototype.update = function (delta) {
        var _this = this;
        this.posToUV.rawData[0] = 0.5;
        this.posToUV.rawData[1] = 0.0;
        this.posToUV.rawData[2] = 0.0;
        this.posToUV.rawData[3] = 0.0;
        this.posToUV.rawData[4] = 0.0;
        this.posToUV.rawData[5] = 0.5;
        this.posToUV.rawData[6] = 0.0;
        this.posToUV.rawData[7] = 0.0;
        this.posToUV.rawData[8] = 0.0;
        this.posToUV.rawData[9] = 0.0;
        this.posToUV.rawData[10] = 1.0;
        this.posToUV.rawData[11] = 0.0;
        this.posToUV.rawData[12] = 0.5;
        this.posToUV.rawData[13] = 0.5;
        this.posToUV.rawData[14] = 0.0;
        this.posToUV.rawData[15] = 1.0;
        var worldToView = m4m.math.pool.new_matrix();
        this.lightcamera.calcViewMatrix(worldToView);
        var vpp = new m4m.math.rect();
        this.lightcamera.calcViewPortPixel(this.app, vpp);
        this.asp = vpp.w / vpp.h;
        var projection = m4m.math.pool.new_matrix();
        this.lightcamera.calcProjectMatrix(this.asp, projection);
        m4m.math.matrixMultiply(projection, worldToView, this.lightProjection);
        m4m.math.matrixMultiply(this.posToUV, this.lightProjection, this.lightProjection);
        // m4m.framework.shader.setGlobalMatrix("_LightProjection", this.lightProjection);
        // m4m.framework.shader.setGlobalFloat("_bias",0.001);
        this.mats.forEach(function (element) {
            if (element) {
                element.setMatrix("_LightProjection", _this.lightProjection);
                if (element)
                    element.setFloat("_bias", 0.001);
            }
        });
    };
    test_ShadowMap.prototype.FitToScene = function (lightCamera, aabb) {
        lightCamera.gameObject.transform.setWorldPosition(new m4m.math.vector3(aabb.center.x, aabb.center.y, aabb.center.z));
        var _vec3 = m4m.math.pool.new_vector3();
        m4m.math.vec3Subtract(aabb.maximum, aabb.minimum, _vec3);
        var maxLength = m4m.math.vec3Length(_vec3);
        lightCamera.size = maxLength;
        lightCamera.near = -maxLength / 2;
        lightCamera.far = maxLength / 2;
    };
    test_ShadowMap.prototype.ShowUI = function () {
        var _this = this;
        document.addEventListener("keydown", function (ev) {
            if (ev.key === "c") {
                if (_this.viewcamera.postQueues.length > 0)
                    _this.viewcamera.postQueues = [];
                else {
                    var post = new m4m.framework.cameraPostQueue_Quad();
                    post.material.setShader(_this.scene.app.getAssetMgr().getShader("mask.shader.json"));
                    post.material.setTexture("_MainTex", _this.depthTexture);
                    _this.viewcamera.postQueues.push(post);
                }
            }
        });
        this.labelNear = document.createElement("label");
        this.labelNear.style.top = "100px";
        this.labelNear.style.position = "absolute";
        this.app.container.appendChild(this.labelNear);
        this.inputNear = document.createElement("input");
        this.inputNear.type = "range";
        this.inputNear.min = "-15";
        this.inputNear.max = "15";
        this.inputNear.step = "0.1";
        this.inputNear.oninput = function () {
            var _value = parseFloat(_this.inputNear.value);
            if (_value > _this.lightcamera.far) {
                _value = _this.lightcamera.far;
                _this.inputNear.value = _value.toString();
            }
            _this.labelNear.textContent = "near :" + _value;
            _this.lightcamera.near = _value;
            // this.lightArea.localScale = new m4m.math.vector3(this.asp * this.lightcamera.size,this.lightcamera.size,this.lightcamera.far - this.lightcamera.near);
            // this.lightArea.localTranslate = new m4m.math.vector3(0,0,(this.lightcamera.far + this.lightcamera.near)/2);
            // this.lightArea.markDirty();
        };
        this.inputNear.style.top = "124px";
        this.inputNear.style.position = "absolute";
        this.app.container.appendChild(this.inputNear);
        this.labelFar = document.createElement("label");
        this.labelFar.style.top = "225px";
        this.labelFar.style.position = "absolute";
        this.app.container.appendChild(this.labelFar);
        this.inputFar = document.createElement("input");
        this.inputFar.type = "range";
        this.inputFar.min = "-15";
        this.inputFar.max = "15";
        this.inputFar.step = "0.1";
        this.inputFar.oninput = function () {
            var _value = parseFloat(_this.inputFar.value);
            if (_value < _this.lightcamera.near) {
                _value = _this.lightcamera.near;
                _this.inputFar.value = _value.toString();
            }
            _this.labelFar.textContent = "far :" + _value;
            _this.lightcamera.far = _value;
            // this.lightArea.localScale = new m4m.math.vector3(this.asp * this.lightcamera.size,this.lightcamera.size,this.lightcamera.far - this.lightcamera.near);
            // this.lightArea.localTranslate = new m4m.math.vector3(0,0,(this.lightcamera.far + this.lightcamera.near)/2);
            // this.lightArea.markDirty();
        };
        this.inputFar.style.top = "250px";
        this.inputFar.style.position = "absolute";
        this.app.container.appendChild(this.inputFar);
        // let castShadowCheckBox = document.createElement("input");
        // castShadowCheckBox.type = "checkbox";
        // castShadowCheckBox.checked = false;
        // castShadowCheckBox.onchange = () =>
        // {
        //     let castshadowNum = castShadowCheckBox.checked?1.0:0.0;
        //     m4m.framework.shader.setGlobalFloat("_CastShadow",castshadowNum);
        // }
        // castShadowCheckBox.style.top = "350px";
        // castShadowCheckBox.style.position = "absolute";
        // this.app.container.appendChild(castShadowCheckBox);
        // var inputDepth = document.createElement("input");
        // inputDepth.type = "range";
        // inputDepth.min = "-15";
        // inputDepth.max = "15";
        // inputDepth.step = "0.1";
        // inputDepth.oninput = () =>
        // {
        //     let _value = parseFloat(inputDepth.value);
        //     this.depthTexTrans.localTranslate = new m4m.math.vector3(0,0,_value);
        //     this.depthTexTrans.markDirty();
        // }
        // inputDepth.style.top = "400px";
        // inputDepth.style.position = "absolute";
        // this.app.container.appendChild(inputDepth);
        var cameraRotateLabel = document.createElement("label");
        cameraRotateLabel.style.top = "375px";
        cameraRotateLabel.style.position = "absolute";
        cameraRotateLabel.textContent = "改变灯光角度";
        this.app.container.appendChild(cameraRotateLabel);
        var inputCameraRotateY = document.createElement("input");
        inputCameraRotateY.type = "range";
        inputCameraRotateY.min = "-180";
        inputCameraRotateY.max = "180";
        inputCameraRotateY.step = "1";
        inputCameraRotateY.oninput = function () {
            var _value = parseFloat(inputCameraRotateY.value);
            var _angle = _this.lightcamera.gameObject.transform.localEulerAngles;
            _this.lightcamera.gameObject.transform.localEulerAngles = new m4m.math.vector3(_angle.x, _value, _angle.z);
            _this.lightcamera.gameObject.transform.markDirty();
        };
        inputCameraRotateY.style.top = "400px";
        inputCameraRotateY.style.position = "absolute";
        this.app.container.appendChild(inputCameraRotateY);
    };
    test_ShadowMap.prototype.ShowCameraInfo = function (camera) {
        var near = camera.near.toString();
        var far = camera.far.toString();
        this.inputNear.value = near;
        this.inputFar.value = far;
        this.labelNear.textContent = "near :" + near;
        this.labelFar.textContent = "far :" + far;
    };
    return test_ShadowMap;
}());
var t;
(function (t) {
    var test_skillsystem = /** @class */ (function () {
        function test_skillsystem() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.count = 0;
            this.counttimer = 0;
            this.role = new m4m.framework.transform();
            this.angularVelocity = new m4m.math.vector3(0, 10, 0);
            this.eulerAngle = m4m.math.pool.new_vector3();
        }
        test_skillsystem.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_skillsystem.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_skillsystem.prototype.addcam = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 120;
            objCam.localTranslate = new m4m.math.vector3(0, 10, 0);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            state.finish = true;
        };
        test_skillsystem.prototype.addcube = function (laststate, state) {
            //添加一个盒子
            {
                //添加一个盒子
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
                    cube.localTranslate.x = 0;
                    this.scene.addChild(cube);
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube = cube;
                }
                //添加一个盒子
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    // this.scene.addChild(cube);
                    cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("zg256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube2 = cube;
                }
            }
            state.finish = true;
        };
        test_skillsystem.prototype.loadRole = function (laststate, state) {
            var _this = this;
            this.role.name = "role";
            this.app.getAssetMgr().load("res/prefabs/0000_zs_male/0000_zs_male.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0000_zs_male.prefab.json");
                    _this.role = _prefab.getCloneTrans();
                    _this.scene.addChild(_this.role);
                    _this.role.localScale = new m4m.math.vector3(1, 1, 1);
                    _this.role.localTranslate = new m4m.math.vector3(0, 0, 0);
                    _this.role.gameObject.visible = true;
                    var ap = _this.role.gameObject.getComponent("aniplayer");
                    ap.autoplay = true;
                    {
                        var play = document.createElement("button");
                        play.textContent = "play1";
                        play.onclick = function () {
                            // this.playAniAndEffect(ap, "attack_01", 0, 0);
                            _this.playAniAndEffect(ap, "attack_01", "fx_zs_male@attack_01", 0, 0);
                            //this.playAniAndEffect(ap, "attack_02", "fx_zs_male@attack_02", 1000, 1000);
                            _this.playAniAndEffect(ap, "attack_04", "fx_zs_male@attack_03", 3000, 1000);
                            setInterval(function () {
                                _this.playAniAndEffect(ap, "attack_01", "fx_zs_male@attack_01", 0, 0);
                                //this.playAniAndEffect(ap, "attack_02", "fx_zs_male@attack_02", 1000, 1000);
                                _this.playAniAndEffect(ap, "attack_04", "fx_zs_male@attack_03", 3000, 1000);
                            }, 6000);
                        };
                        play.style.left = "0px";
                        play.style.top = "240px";
                        play.style.position = "absolute";
                        _this.app.container.appendChild(play);
                    }
                    // ap._playTimer = Math.random() * 1000;
                }
                state.finish = true;
            });
        };
        test_skillsystem.prototype.playAniAndEffect = function (aniplayer, aniName, effectName, playAniDelay, afterAni_PlayEffectDelay) {
            var _this = this;
            {
                setTimeout(function () {
                    var aniclipName = aniName + ".FBAni.aniclip.bin";
                    aniplayer.playCross(aniclipName, 0.2);
                    setTimeout(function () {
                        if (_this.effect != null) {
                            _this.effect.gameObject.transform.dispose();
                        }
                        var path = "res/particleEffect/" + effectName + "/" + effectName + ".assetbundle.json";
                        _this.app.getAssetMgr().load(path, m4m.framework.AssetTypeEnum.Auto, function (_state) {
                            if (_state.isfinish) {
                                var tr = new m4m.framework.transform();
                                _this.effect = tr.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_EFFECTSYSTEM);
                                var text = _this.app.getAssetMgr().getAssetByName(effectName + ".effect.json");
                                _this.effect.setJsonData(text);
                                _this.role.addChild(tr);
                                var rotateVelocity = m4m.math.pool.new_quaternion();
                                m4m.math.quatFromEulerAngles(180, 0, 0, rotateVelocity);
                                m4m.math.quatMultiply(rotateVelocity, tr.localRotate, tr.localRotate);
                                m4m.math.pool.delete_quaternion(rotateVelocity);
                                tr.markDirty();
                                tr.updateWorldTran();
                            }
                        });
                    }, afterAni_PlayEffectDelay);
                }, playAniDelay);
            }
        };
        test_skillsystem.prototype.loadEffect = function (laststate, state) {
            var _this = this;
            var name = "fx_zs_male@attack_01";
            var path = "res/particleEffect/" + name + "/" + name + ".assetbundle.json";
            this.app.getAssetMgr().load(path, m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    var tr = new m4m.framework.transform();
                    _this.effect = tr.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_EFFECTSYSTEM);
                    var text = _this.app.getAssetMgr().getAssetByName(name + ".effect.json");
                    _this.effect.setJsonData(text);
                    _this.role.addChild(tr);
                    var rotateVelocity = m4m.math.pool.new_quaternion();
                    m4m.math.quatFromEulerAngles(180, 0, 0, rotateVelocity);
                    m4m.math.quatMultiply(rotateVelocity, tr.localRotate, tr.localRotate);
                    m4m.math.pool.delete_quaternion(rotateVelocity);
                    tr.markDirty();
                    tr.updateWorldTran();
                    state.finish = true;
                }
            });
        };
        test_skillsystem.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.addcam.bind(this));
            // this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.loadRole.bind(this));
            this.taskmgr.addTaskCall(this.loadEffect.bind(this));
        };
        test_skillsystem.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            if (this.role != null) {
                var cubeTransform = this.role.gameObject.transform;
                this.eulerAngle.x = delta * this.angularVelocity.x;
                this.eulerAngle.y = delta * this.angularVelocity.y;
                this.eulerAngle.z = delta * this.angularVelocity.z;
                var rotateVelocity = m4m.math.pool.new_quaternion();
                //替代掉这个函数
                m4m.math.quatFromEulerAngles(this.eulerAngle.x, this.eulerAngle.y, this.eulerAngle.z, rotateVelocity);
                //一切ok
                //m4m.math.quatFromAxisAngle(new m4m.math.vector3(0, 1, 0), this.timer, rotateVelocity);
                m4m.math.quatMultiply(rotateVelocity, cubeTransform.localRotate, cubeTransform.localRotate);
                m4m.math.pool.delete_quaternion(rotateVelocity);
                cubeTransform.markDirty();
            }
        };
        return test_skillsystem;
    }());
    t.test_skillsystem = test_skillsystem;
})(t || (t = {}));
var t;
(function (t) {
    var test_sound = /** @class */ (function () {
        function test_sound() {
            this.once1 = null;
            this.once2 = null;
        }
        test_sound.prototype.loadSoundInfe = function () {
            var _this = this;
            {
                //接收器
                var listener = this.camera.gameObject.addComponent("AudioListener");
                //播放器1
                var tr = new m4m.framework.transform();
                var player_1 = tr.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_AUDIOPLAYER);
                player_1.be3DSound = false;
                // this.app.getScene().addChild(tr);
                this.scene.addChild(tr);
                tr.localTranslate = new m4m.math.vector3(0, 0, 0);
                {
                    var button = document.createElement("button");
                    button.textContent = "play once1";
                    button.onclick = function () {
                        m4m.framework.AudioEx.instance().loadAudioBuffer("".concat(resRootPath, "audio/sound1.mp3"), function (buf, err) {
                            _this.once1 = buf;
                            // player.stop();
                            player_1.play(_this.once1, false, 10);
                        });
                    };
                    button.style.top = "130px";
                    button.style.position = "absolute";
                    this.app.container.appendChild(button);
                }
                {
                    var button = document.createElement("button");
                    button.textContent = "play once2";
                    button.onclick = function () {
                        m4m.framework.AudioEx.instance().loadAudioBuffer("".concat(resRootPath, "audio/sound2.mp3"), function (buf, err) {
                            _this.once2 = buf;
                            player_1.play(_this.once2, true, 1);
                        });
                    };
                    button.style.top = "130px";
                    button.style.left = "90px";
                    button.style.position = "absolute";
                    this.app.container.appendChild(button);
                }
                {
                    var button = document.createElement("button");
                    button.textContent = "play loop";
                    button.onclick = function () {
                        m4m.framework.AudioEx.instance().loadAudioBuffer("".concat(resRootPath, "audio/music1.mp3"), function (buf, err) {
                            player_1.play(buf, false, 1);
                        });
                    };
                    button.style.top = "160px";
                    button.style.position = "absolute";
                    this.app.container.appendChild(button);
                }
                {
                    var button = document.createElement("button");
                    button.textContent = "stop loop";
                    button.onclick = function () {
                        player_1.stop();
                    };
                    button.style.top = "160px";
                    button.style.left = "90px";
                    button.style.position = "absolute";
                    this.app.container.appendChild(button);
                }
                {
                    document.body.appendChild(document.createElement("p")); //这句话的作用？
                    var input = document.createElement("input");
                    input.type = "range";
                    input.valueAsNumber = 5;
                    player_1.volume = input.valueAsNumber / 100;
                    input.oninput = function (e) {
                        player_1.volume = input.valueAsNumber / 100;
                    };
                    input.style.top = "190px";
                    input.style.position = "absolute";
                    this.app.container.appendChild(input);
                }
            }
        };
        test_sound.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            this.camera = util.addCamera(this.scene);
            this.loadSoundInfe();
            m4m.framework.AudioEx.instance().clickInit();
        };
        test_sound.prototype.update = function (delta) {
        };
        return test_sound;
    }());
    t.test_sound = test_sound;
})(t || (t = {}));
var test_streamlight = /** @class */ (function () {
    function test_streamlight() {
        this.cubes = {};
        this.timer = 0;
    }
    test_streamlight.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        var baihu = new m4m.framework.transform();
        baihu.name = "baihu";
        baihu.localScale.x = baihu.localScale.y = baihu.localScale.z = 1;
        this.scene.addChild(baihu);
        {
            var lighttran = new m4m.framework.transform();
            this.scene.addChild(lighttran);
            var light = lighttran.gameObject.addComponent("light");
            lighttran.localTranslate.x = 2;
            lighttran.localTranslate.z = 1;
            lighttran.localTranslate.y = 3;
            lighttran.markDirty();
        }
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
            if (state.isfinish) {
                _this.app.getAssetMgr().load("res/prefabs/streamlight/anim/0001_shengyi_male.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("0001_shengyi_male.prefab.json");
                        baihu = _prefab.getCloneTrans();
                        _this.player = baihu;
                        _this.scene.addChild(baihu);
                        objCam.lookat(baihu);
                        objCam.markDirty();
                        var bb = _prefab.getCloneTrans();
                        _this.scene.addChild(bb);
                        bb.localTranslate = new m4m.math.vector3(2, 0, 0);
                        bb.markDirty();
                        var bodyRenderer = bb.children[0].gameObject.getComponent("skinnedMeshRenderer");
                        var mat = bodyRenderer.materials[0].clone();
                        bodyRenderer.materials[0] = mat;
                        mat.setVector4("_LightTex_ST", new m4m.math.vector4(2, 2, 0, 0));
                        console.log("aaa");
                    }
                });
            }
        });
        this.cube = baihu;
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(baihu);
        objCam.markDirty(); //标记为需要刷新
    };
    test_streamlight.prototype.update = function (delta) {
        this.timer += delta;
        var x = Math.sin(this.timer);
        var z = Math.cos(this.timer);
        var x2 = Math.sin(this.timer * 1.1);
        var z2 = Math.cos(this.timer * 1.1);
        var objCam = this.camera.gameObject.transform;
        objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
        objCam.updateWorldTran();
    };
    return test_streamlight;
}());
var t;
(function (t) {
    var test_trailrenderrecorde = /** @class */ (function () {
        function test_trailrenderrecorde() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.WaveFrequency = 4.0;
            this.WaveAmplitude = 0.05;
            this.play = true;
        }
        test_trailrenderrecorde.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        test_trailrenderrecorde.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/trailtest2_00000.imgdesc.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/rock256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
            this.app.getAssetMgr().load("res/swingFX.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_trailrenderrecorde.prototype.loadRole = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/0000_zs_male/0000_zs_male.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0000_zs_male.prefab.json");
                    _this.role = _prefab.getCloneTrans();
                    _this.role.name = "role";
                    _this.roleLength = _this.role.children.length;
                    _this.scene.addChild(_this.role);
                    _this.role.localScale = new m4m.math.vector3(1, 1, 1);
                    _this.role.localTranslate = new m4m.math.vector3(0, 0, 0);
                    _this.role.gameObject.visible = true;
                    _this.role.markDirty();
                    _this.role.updateWorldTran();
                    _this.aniplayer = _this.role.gameObject.getComponent("aniplayer");
                    state.finish = true;
                }
            });
        };
        test_trailrenderrecorde.prototype.loadWeapon = function (laststate, state) {
            var _this = this;
            this.app.getAssetMgr().load("res/prefabs/0002_sword_sword/0002_sword_sword.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    if (_this.weapon)
                        _this.weapon.parent.removeChild(_this.weapon);
                    var _prefab = _this.app.getAssetMgr().getAssetByName("0002_sword_sword.prefab.json");
                    _this.weapon = _prefab.getCloneTrans();
                    //  this.scene.addChild(this.role);
                    _this.weapon.localScale = new m4m.math.vector3(1, 1, 1);
                    _this.weapon.localTranslate = new m4m.math.vector3(0, 0, 0);
                    var obj = _this.role.find("Bip001 Prop1");
                    obj.addChild(_this.weapon);
                    state.finish = true;
                }
            });
        };
        test_trailrenderrecorde.prototype.initscene = function (laststate, state) {
            {
                //添加一个摄像机
                var objCam = new m4m.framework.transform();
                objCam.name = "sth.";
                this.scene.addChild(objCam);
                this.camera = objCam.gameObject.addComponent("camera");
                this.camera.near = 0.01;
                this.camera.far = 100;
                this.camera.fov = Math.PI * 0.3;
                this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
                objCam.localTranslate = new m4m.math.vector3(0, 5, -5);
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty(); //标记为需要刷新
                {
                    var org = new m4m.framework.transform();
                    org.name = "org";
                    this.org = org;
                    this.scene.addChild(org);
                }
                {
                    var ref_cube = new m4m.framework.transform();
                    ref_cube.name = "ref_cube";
                    ref_cube.localScale.x = ref_cube.localScale.y = ref_cube.localScale.z = 5;
                    ref_cube.localTranslate.y = -2;
                    this.scene.addChild(ref_cube);
                    var mesh = ref_cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("plane");
                    mesh.mesh = (smesh);
                    var renderer = ref_cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    var sh = this.app.getAssetMgr().getShader("diffuse_bothside.shader.json");
                    if (sh != null) {
                        cuber.materials = [];
                        cuber.materials.push(new m4m.framework.material());
                        cuber.materials[0].setShader(sh); //----------------使用shader
                        var texture = this.app.getAssetMgr().getAssetByName("rock256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                    }
                    this.cube2 = ref_cube;
                }
                {
                    var cube = new m4m.framework.transform();
                    cube.name = "cube";
                    this.cube = cube;
                    org.addChild(cube);
                    cube.localTranslate.x = -5;
                    // cube.localScale.y = 0.1;
                    // cube.localScale.z = 0.5;
                    // cube.localScale.x = 5;
                    cube.markDirty();
                    var mesh = cube.gameObject.addComponent("meshFilter");
                    var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                    mesh.mesh = (smesh);
                    var renderer = cube.gameObject.addComponent("meshRenderer");
                    var cuber = renderer;
                    // var test1=new m4m.framework.transform();
                    // test1.localScale.y=2;
                    // test1.localScale.x=0.3;
                    // test1.localScale.z=0.3;
                    // test1.localTranslate.z=1;
                    // this.weapon.addChild(test1);
                    //  var mesh = test1.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
                    // test1.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
                    // mesh.mesh=smesh;
                    // m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_right, 90, test1.localRotate);
                    // test1.markDirty();
                    var trailtrans = new m4m.framework.transform();
                    trailtrans.localTranslate.z = 0.5;
                    this.weapon.addChild(trailtrans);
                    m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_right, 270, trailtrans.localRotate);
                    trailtrans.markDirty();
                    var trailrender = trailtrans.gameObject.addComponent("trailRender_recorde");
                    //trailrender.color=new m4m.math.color(1.0,0,0,1.0);
                    //trailrender.speed = 1;
                    trailrender.setWidth(1);
                    var mat = new m4m.framework.material();
                    //particles_additive.shader.json
                    //transparent_bothside.shader.json
                    //particles_additive_premultiply.shader.json
                    var shader = this.app.getAssetMgr().getShader("transparent_bothside.shader.json");
                    var tex = this.app.getAssetMgr().getAssetByName("trailtest2_00000.imgdesc.json");
                    mat.setShader(shader);
                    mat.setTexture("_MainTex", tex);
                    trailrender.material = mat;
                    //trailrender.interpolate=true;
                    //this.trailrender=trailrender;
                    //trailrender.lifetime=0.4;
                    //trailrender.minvertexDistance=0.01;
                    trailrender.setWidth(1, 1);
                }
            }
            state.finish = true;
        };
        test_trailrenderrecorde.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            this.wind = new m4m.math.vector4();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.loadRole.bind(this));
            this.taskmgr.addTaskCall(this.loadWeapon.bind(this));
            this.taskmgr.addTaskCall(this.initscene.bind(this));
            var tbn1 = this.addbtn("80px", "0px", "attack_01");
            tbn1.onclick = function () {
                var name = "attack_01.FBAni.aniclip.bin";
                _this.aniplayer.playCross(name, 0.2);
            };
            var btn = this.addbtn("120px", "0px", "attack_02");
            btn.onclick = function () {
                var name = "attack_02.FBAni.aniclip.bin";
                _this.aniplayer.playCross(name, 0.2);
            };
            // var btn3 = this.addbtn("160px", "0px", "attack_03");
            // btn3.onclick = () => {
            //         let name = "attack_03.FBAni.aniclip.bin";
            //         this.aniplayer.playCross(name, 0.2);
            // }
            {
                var btn2 = this.addbtn("160px", "0px", "playAttackAni");
                btn2.onclick = function () {
                    var name = "attack_04.FBAni.aniclip.bin";
                    _this.aniplayer.playCross(name, 0.2);
                };
            }
        };
        test_trailrenderrecorde.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            // if (this.org != undefined && this.play) {
            //     this.timer++;
            //     // var x = Math.sin(this.timer * 0.01);
            //     // var z = Math.cos(this.timer * 0.01);
            //     this.org.localTranslate.x +=0.05;
            //     // this.cube.localTranslate.z = z * 5;
            //     // this.cube.markDirty();
            //     // m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer, this.org.localRotate); 
            //     this.org.markDirty();
            // }
        };
        test_trailrenderrecorde.prototype.addbtn = function (top, left, text) {
            var btn = document.createElement("button");
            btn.style.top = top;
            btn.style.left = left;
            btn.style.position = "absolute";
            btn.textContent = text;
            this.app.container.appendChild(btn);
            return btn;
        };
        return test_trailrenderrecorde;
    }());
    t.test_trailrenderrecorde = test_trailrenderrecorde;
})(t || (t = {}));
var test_texuv = /** @class */ (function () {
    function test_texuv() {
        this.timer = 0;
    }
    test_texuv.prototype.start = function (app) {
        var _this = this;
        console.log("i am here.");
        this.app = app;
        this.scene = this.app.getScene();
        this.scene.getRoot().localTranslate = new m4m.math.vector3(0, 0, 0);
        util.loadShader(this.app.getAssetMgr())
            .then(function () { return util.loadTex("".concat(resRootPath, "texture/trailtest_yellow.png"), _this.app.getAssetMgr()); })
            .then(function () {
            var base = _this.createBaseCube();
            base.localTranslate.x = -1;
            base.markDirty();
            var uv = _this.createUvCube();
            uv.localPosition.x = 1;
            uv.markDirty();
        });
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        //this.camera.backgroundColor=new m4m.math.color(0,0,0,1);
        objCam.localTranslate = new m4m.math.vector3(0, 2, 5);
        objCam.lookatPoint(new m4m.math.vector3());
        objCam.markDirty(); //标记为需要刷新
    };
    test_texuv.prototype.createBaseCube = function () {
        var mat = new m4m.framework.material();
        var shader = m4m.framework.sceneMgr.app.getAssetMgr().getShader("diffuse.shader.json");
        mat.setShader(shader);
        var tex = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName("trailtest_yellow.png");
        mat.setTexture("_MainTex", tex);
        var trans = new m4m.framework.transform();
        var meshf = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
        var meshr = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
        meshr.materials = [];
        meshr.materials.push(mat);
        var mesh = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultMesh("cube");
        meshf.mesh = mesh;
        this.scene.addChild(trans);
        return trans;
    };
    test_texuv.prototype.createUvCube = function () {
        var mat = new m4m.framework.material();
        var shader = m4m.framework.sceneMgr.app.getAssetMgr().getShader("testtexuv.shader.json");
        mat.setShader(shader);
        var tex = m4m.framework.sceneMgr.app.getAssetMgr().getAssetByName("trailtest_yellow.png");
        mat.setTexture("_MainTex", tex);
        var trans = new m4m.framework.transform();
        var meshf = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
        var meshr = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
        meshr.materials = [];
        meshr.materials.push(mat);
        var mesh = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultMesh("cube");
        meshf.mesh = mesh;
        this.scene.addChild(trans);
        return trans;
    };
    test_texuv.prototype.update = function (delta) {
    };
    return test_texuv;
}());
var t;
(function (t) {
    var test_trailrender = /** @class */ (function () {
        function test_trailrender() {
            this.texResName = "trailtest2_00000.imgdesc.json";
            this.timer = 0;
            this.play = true;
        }
        test_trailrender.prototype.initscene = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 100;
            this.camera.fov = Math.PI * 0.3;
            this.camera.backgroundColor = new m4m.math.color(0, 0, 0, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 20, -20);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            {
                var org = new m4m.framework.transform();
                org.name = "org";
                this.org = org;
                this.scene.addChild(org);
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                org.addChild(cube);
                cube.localTranslate.x = -5;
                cube.localScale.y = 0.1;
                cube.localScale.z = 0.5;
                cube.localScale.x = 5;
                cube.markDirty();
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var trailNode = new m4m.framework.transform();
                trailNode.localTranslate.x = -10;
                org.addChild(trailNode);
                //m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_forward, 90, trailtrans.localRotate);
                trailNode.markDirty();
                //--------------------------------------------trailrender
                var comp = trailNode.gameObject.addComponent("trailRender");
                var mat = new m4m.framework.material();
                var shader = this.app.getAssetMgr().getShader("particles_add.shader.json");
                var tex = this.app.getAssetMgr().getAssetByName("".concat(this.texResName));
                mat.setShader(shader);
                mat.setTexture("_Main_Tex", tex);
                comp.setspeed(0.3);
                comp.setWidth(5);
                comp.material = mat;
                comp.lookAtCamera = true;
                comp.extenedOneSide = false;
                comp.play();
            }
        };
        test_trailrender.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = app.getScene();
            util.loadShader(this.app.getAssetMgr())
                .then(function () { return util.loadTextures(["".concat(resRootPath, "texture/swingFX.png"), "".concat(resRootPath, "texture/").concat(_this.texResName)], _this.app.getAssetMgr()); })
                .then(function () { return _this.initscene(); })
                .then(function () { return _this.addUI(); });
        };
        test_trailrender.prototype.update = function (delta) {
            if (this.org != undefined && this.play) {
                this.timer++;
                m4m.math.quatFromAxisAngle(m4m.math.pool.vector3_up, this.timer * 5, this.org.localRotate);
                this.org.markDirty();
            }
        };
        test_trailrender.prototype.addUI = function () {
            var _this = this;
            var tbn = this.addbtn("80px", "0px", "start");
            tbn.onclick = function () {
                _this.play = true;
            };
            var btn = this.addbtn("120px", "0px", "stop");
            btn.onclick = function () {
                _this.play = false;
            };
        };
        test_trailrender.prototype.addbtn = function (top, left, text) {
            var btn = document.createElement("button");
            btn.style.top = top;
            btn.style.left = left;
            btn.style.position = "absolute";
            btn.textContent = text;
            this.app.container.appendChild(btn);
            return btn;
        };
        return test_trailrender;
    }());
    t.test_trailrender = test_trailrender;
})(t || (t = {}));
var t;
(function (t_2) {
    var enumcheck;
    (function (enumcheck) {
        enumcheck[enumcheck["AA"] = 0] = "AA";
        enumcheck[enumcheck["BB"] = 1] = "BB";
        enumcheck[enumcheck["CC"] = 2] = "CC";
    })(enumcheck = t_2.enumcheck || (t_2.enumcheck = {}));
    var enummap = {};
    var test_ui = /** @class */ (function () {
        function test_ui() {
            this.amount = 1;
            this.timer = 0;
            this.bere = false;
            this.bere1 = false;
        }
        test_ui.prototype.start = function (app) {
            var _this = this;
            //把枚举类型注册到某处
            enummap["enumcheck"] = enumcheck;
            // for (var key in enummap["enumcheck"])
            // {
            //     //每个枚举值可以刷出来
            //     //但是里面有数字，把数字过滤掉就好
            //     console.log("dd=" + key);
            // }
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            var cuber;
            console.warn("Finish it.");
            //目前材质是内置配置的，
            //这个加载机制弄完之后，就可以根据name 访问资源包里的shader
            //然后用shader 构造材质，和unity相同
            // 配置代码如下
            this.app.getAssetMgr().load("".concat(resRootPath, "texture/zg256.png"), m4m.framework.AssetTypeEnum.Auto);
            var sh = this.app.getAssetMgr().getShader("color");
            if (sh != null) {
                //用了从资源里加载出来的shader
                cuber.materials = [];
                cuber.materials.push(new m4m.framework.material());
                cuber.materials[0].setShader(sh);
                //shader 修改为 不和一般资源一样加载,而是统一用getShader方法
                //cuber.materials[0].shader = this.app.getAssetMgr().getResourceByName("color") as m4m.framework.shader;
                this.app.getAssetMgr().load("".concat(resRootPath, "texture/zg256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        console.warn("Finish load img.");
                        var texture = _this.app.getAssetMgr().getAssetByName("zg256.png");
                        cuber.materials[0].setTexture("_MainTex", texture);
                        //sh.passes["base"][0].uniformTexture("_MainTex", texture.glTexture);
                    }
                });
            }
            //添加一个盒子
            var cube = new m4m.framework.transform();
            cube.name = "cube";
            cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
            this.scene.addChild(cube);
            var mesh = cube.gameObject.addComponent("meshFilter");
            var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
            mesh.mesh = (smesh);
            var renderer = cube.gameObject.addComponent("meshRenderer");
            cuber = renderer;
            this.cube = cube;
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 10;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookat(cube);
            objCam.markDirty(); //标记为需要刷新
            //2dtest overlay
            var o2d = new m4m.framework.overlay2D();
            this.camera.addOverLay(o2d);
            { //一个片
                var t2d = new m4m.framework.transform2D();
                t2d.width = 150;
                t2d.height = 150;
                t2d.pivot.x = 0;
                t2d.pivot.y = 0;
                t2d.markDirty();
                t2d.addComponent("rawImage2D");
                o2d.addChild(t2d);
            }
            {
                //普通显示
                var t2d_1 = new m4m.framework.transform2D();
                t2d_1.width = 150;
                t2d_1.height = 150;
                t2d_1.pivot.x = 0;
                t2d_1.pivot.y = 0;
                t2d_1.localTranslate.x = 150;
                var img_1_1 = t2d_1.addComponent("image2D");
                img_1_1.imageType = m4m.framework.ImageType.Simple;
                o2d.addChild(t2d_1);
                //九宫显示
                var t2d_2 = new m4m.framework.transform2D();
                t2d_2.width = 150;
                t2d_2.height = 150;
                t2d_2.pivot.x = 0;
                t2d_2.pivot.y = 0;
                t2d_2.localTranslate.x = 300;
                var img_2_1 = t2d_2.addComponent("image2D");
                img_2_1.imageType = m4m.framework.ImageType.Sliced;
                o2d.addChild(t2d_2);
                //纵向填充
                var t2d_3 = new m4m.framework.transform2D();
                t2d_3.width = 150;
                t2d_3.height = 150;
                t2d_3.pivot.x = 0;
                t2d_3.pivot.y = 0;
                t2d_3.localTranslate.x = 450;
                this.img_3 = t2d_3.addComponent("image2D");
                this.img_3.imageType = m4m.framework.ImageType.Filled;
                this.img_3.fillMethod = m4m.framework.FillMethod.Vertical;
                this.img_3.fillAmmount = 1;
                o2d.addChild(t2d_3);
                //横向填充
                var t2d_4 = new m4m.framework.transform2D();
                t2d_4.width = 150;
                t2d_4.height = 150;
                t2d_4.pivot.x = 0;
                t2d_4.pivot.y = 0;
                t2d_4.localTranslate.x = 600;
                this.img_4 = t2d_4.addComponent("image2D");
                this.img_4.imageType = m4m.framework.ImageType.Filled;
                this.img_4.fillMethod = m4m.framework.FillMethod.Horizontal;
                this.img_4.fillAmmount = 1;
                o2d.addChild(t2d_4);
                //90扇形填充
                var t2d_5 = new m4m.framework.transform2D();
                t2d_5.width = 150;
                t2d_5.height = 150;
                t2d_5.pivot.x = 0;
                t2d_5.pivot.y = 0;
                t2d_5.localTranslate.x = 750;
                this.img_5 = t2d_5.addComponent("image2D");
                this.img_5.imageType = m4m.framework.ImageType.Filled;
                this.img_5.fillMethod = m4m.framework.FillMethod.Radial_90;
                this.img_5.fillAmmount = 1;
                o2d.addChild(t2d_5);
                //瓦片填充
                var t2d_6 = new m4m.framework.transform2D();
                t2d_6.width = 150;
                t2d_6.height = 150;
                t2d_6.pivot.x = 0;
                t2d_6.pivot.y = 0;
                t2d_6.localTranslate.x = 150;
                t2d_6.localTranslate.y = 150;
                var img_6_1 = t2d_6.addComponent("image2D");
                img_6_1.imageType = m4m.framework.ImageType.Tiled;
                o2d.addChild(t2d_6);
                //180度填充
                var t2d_7 = new m4m.framework.transform2D();
                t2d_7.width = 150;
                t2d_7.height = 150;
                t2d_7.pivot.x = 0;
                t2d_7.pivot.y = 0;
                t2d_7.localTranslate.x = 300;
                t2d_7.localTranslate.y = 150;
                this.img_7 = t2d_7.addComponent("image2D");
                this.img_7.imageType = m4m.framework.ImageType.Filled;
                this.img_7.fillMethod = m4m.framework.FillMethod.Radial_180;
                this.img_7.fillAmmount = 1;
                o2d.addChild(t2d_7);
                //360度填充
                var t2d_8 = new m4m.framework.transform2D();
                t2d_8.width = 150;
                t2d_8.height = 150;
                t2d_8.pivot.x = 0;
                t2d_8.pivot.y = 0;
                t2d_8.localTranslate.x = 450;
                t2d_8.localTranslate.y = 150;
                this.img_8 = t2d_8.addComponent("image2D");
                this.img_8.imageType = m4m.framework.ImageType.Filled;
                this.img_8.fillMethod = m4m.framework.FillMethod.Radial_360;
                this.img_8.fillAmmount = 1;
                o2d.addChild(t2d_8);
                //颜色变换按钮
                var t2d_9 = new m4m.framework.transform2D();
                t2d_9.width = 150;
                t2d_9.height = 50;
                t2d_9.pivot.x = 0;
                t2d_9.pivot.y = 0;
                t2d_9.localTranslate.x = 150;
                t2d_9.localTranslate.y = 300;
                var btn = t2d_9.addComponent("button");
                var img9_1 = t2d_9.addComponent("image2D");
                img9_1.imageType = m4m.framework.ImageType.Sliced;
                btn.targetImage = img9_1;
                btn.transition = m4m.framework.TransitionType.ColorTint; //颜色变换
                btn.addListener(m4m.event.UIEventEnum.PointerClick, function () {
                    console.log("按钮点下了");
                }, this);
                o2d.addChild(t2d_9);
                var lab = new m4m.framework.transform2D();
                lab.name = "lab111";
                lab.width = 150;
                lab.height = 50;
                lab.pivot.x = 0;
                lab.pivot.y = 0;
                lab.localTranslate.y = -10;
                lab.markDirty();
                var label = lab.addComponent("label");
                label.text = "这是按钮";
                label.fontsize = 25;
                label.color = new m4m.math.color(1, 0, 0, 1);
                t2d_9.addChild(lab);
                //atlas资源
                this.app.getAssetMgr().load("".concat(resRootPath, "atlas/1/1.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        _this.app.getAssetMgr().load("".concat(resRootPath, "atlas/1/1.atlas.json"), m4m.framework.AssetTypeEnum.Auto, function (state) {
                            if (state.isfinish) {
                                var atlas = _this.app.getAssetMgr().getAssetByName("1.atlas.json");
                                img_1_1.sprite = _this.app.getAssetMgr().getDefaultSprite("grid_sprite");
                                img_2_1.sprite = atlas.sprites["card_role_1_face"];
                                img_2_1.sprite.border = new m4m.math.border(10, 10, 10, 10);
                                _this.img_3.sprite = atlas.sprites["card_role_1_face"];
                                _this.img_4.sprite = atlas.sprites["card_role_1_face"];
                                _this.img_5.sprite = atlas.sprites["card_role_1_face"];
                                img_6_1.sprite = atlas.sprites["card_role_1_face"];
                                _this.img_7.sprite = atlas.sprites["card_role_1_face"];
                                _this.img_8.sprite = atlas.sprites["card_role_1_face"];
                            }
                            //img9.sprite = atlas.sprites["card_role_1_face"];
                        });
                    }
                });
                this.app.getAssetMgr().load("".concat(resRootPath, "texture/uisprite.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var texture = _this.app.getAssetMgr().getAssetByName("uisprite.png");
                        //img_1.setTexture(texture);
                        //img_2.setTexture(texture, new m4m.math.border(15, 15, 15, 15));
                        //this.img_3.setTexture(texture);
                        //this.img_4.setTexture(texture);
                        //this.img_5.setTexture(texture);
                        //img_6.setTexture(texture);
                        //this.img_7.setTexture(texture);
                        //this.img_8.setTexture(texture);
                        img9_1.sprite = _this.app.getAssetMgr().getDefaultSprite("grid_sprite");
                    }
                });
                this.app.getAssetMgr().load("".concat(resRootPath, "font/STXINGKA.TTF.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        _this.app.getAssetMgr().load("".concat(resRootPath, "font/STXINGKA.font.json"), m4m.framework.AssetTypeEnum.Auto, function (s1) {
                            if (s1.isfinish)
                                label.font = _this.app.getAssetMgr().getAssetByName("STXINGKA.font.json"); //;
                        });
                    }
                });
            }
            // for (var i = 0; i < 10; i++)
            // {//一个片
            //     var t2d = new m4m.framework.transform2D();
            //     t2d.width = 50;
            //     t2d.height = 50;
            //     t2d.pivot.x = 25;
            //     t2d.pivot.y = 25;
            //     t2d.localTranslate.x = 100 * i;
            //     t2d.localTranslate.y = 25;
            //     t2d.localRotate = i;
            //     t2d.markDirty();
            //     var img = t2d.addComponent("rawImage2D") as m4m.framework.rawImage2D;
            //     img.color.b = i * 0.1;
            //     img.image = this.app.getAssetMgr().getDefaultTexture("white");
            //     o2d.addChild(t2d);
            // }
            //2d test
            var t = new m4m.framework.transform();
            t.localScale.x = t.localScale.y = t.localScale.z = 1;
            var c2d = t.gameObject.addComponent("canvasRenderer");
            t.localTranslate.y = 1;
            //t.localTranslate.z = 2;
            this.scene.addChild(t);
            { //一个片
                var t2d = new m4m.framework.transform2D();
                t2d.width = 400;
                t2d.height = 400;
                t2d.pivot.x = 0;
                t2d.pivot.y = 0;
                t2d.markDirty();
                t2d.addComponent("rawImage2D");
                c2d.addChild(t2d);
            }
            for (var i = 0; i < 10; i++) { //一个片
                var t2d = new m4m.framework.transform2D();
                t2d.width = 50;
                t2d.height = 50;
                t2d.pivot.x = 0;
                t2d.pivot.y = 0;
                t2d.localTranslate.x = 100 * i;
                t2d.localRotate = i;
                t2d.markDirty();
                var img = t2d.addComponent("rawImage2D");
                img.color.b = i * 0.1;
                img.image = this.app.getAssetMgr().getDefaultTexture("white");
                c2d.addChild(t2d);
            }
        };
        test_ui.prototype.update = function (delta) {
            if (m4m["__he__"]) {
                debugger;
            }
            //this.cube.localTranslate = this.scene.pickCenter;
            //this.cube.markDirty();
            this.timer += delta;
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            var objCam = this.camera.gameObject.transform;
            objCam.localTranslate = new m4m.math.vector3(x2 * 5, 2.25, -z2 * 5);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            if (this.timer > 5 && !this.bere) {
                this.bere = true;
                this.app.closeFps();
            }
            if (this.timer > 10 && !this.bere1) {
                this.bere1 = true;
                this.app.showFps();
            }
            if ((this.amount + delta / 2) > 1)
                this.amount = 0;
            else
                this.amount += delta / 2;
            this.img_3.fillAmmount = this.amount;
            this.img_4.fillAmmount = this.amount;
            this.img_5.fillAmmount = this.amount;
            this.img_7.fillAmmount = this.amount;
            this.img_8.fillAmmount = this.amount;
            //objCam.markDirty();//标记为需要刷新
            //objCam.updateWorldTran();
        };
        return test_ui;
    }());
    t_2.test_ui = test_ui;
})(t || (t = {}));
var testUserCodeUpdate = /** @class */ (function () {
    function testUserCodeUpdate() {
        this.beExecuteInEditorMode = false;
        this.timer = 0;
    }
    testUserCodeUpdate.prototype.onStart = function (app) {
        this.app = app;
    };
    testUserCodeUpdate.prototype.onUpdate = function (delta) {
        if (this.trans == null || this.trans == undefined) {
            this.trans = this.app.getScene().getChildByName("Cube");
        }
        if (this.trans == null || this.trans == undefined)
            return;
        this.timer += delta * 15;
        m4m.math.quatFromAxisAngle(new m4m.math.vector3(0, 1, 0), this.timer, this.trans.localRotate);
        this.trans.markDirty();
    };
    testUserCodeUpdate.prototype.isClosed = function () {
        return false;
    };
    testUserCodeUpdate = __decorate([
        m4m.reflect.userCode
    ], testUserCodeUpdate);
    return testUserCodeUpdate;
}());
var t;
(function (t) {
    var test_uvroll = /** @class */ (function () {
        function test_uvroll() {
            this.timer = 0;
            this.taskmgr = new m4m.framework.taskMgr();
            this.count = 0;
            this.row = 3;
            this.col = 3;
            this.totalframe = 9;
            this.fps = 2;
        }
        test_uvroll.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish)
                    state.finish = true;
            });
        };
        test_uvroll.prototype.loadText = function (laststate, state) {
            this.app.getAssetMgr().load("res/uvSprite.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    state.finish = true;
                }
                else {
                    state.error = true;
                }
            });
        };
        test_uvroll.prototype.addcube = function (laststate, state) {
            //添加一个盒子
            {
                var cube = new m4m.framework.transform();
                cube.name = "cube";
                cube.localScale.x = cube.localScale.y = cube.localScale.z = 1;
                cube.localTranslate.x = -1;
                this.scene.addChild(cube);
                var mesh = cube.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh.mesh = (smesh);
                var renderer = cube.gameObject.addComponent("meshRenderer");
                var cuber = renderer;
                var sh = this.app.getAssetMgr().getShader("sample_uvsprite.shader.json");
                if (sh != null) {
                    cuber.materials = [];
                    cuber.materials.push(new m4m.framework.material());
                    cuber.materials[0].setShader(sh); //----------------使用shader
                    var texture = this.app.getAssetMgr().getAssetByName("uvSprite.png");
                    cuber.materials[0].setTexture("_MainTex", texture);
                }
                this.cube = cube;
            }
            {
                var cube1 = new m4m.framework.transform();
                cube1.name = "cube1";
                cube1.localScale.x = cube1.localScale.y = cube1.localScale.z = 1;
                cube1.localTranslate.x = 1;
                this.scene.addChild(cube1);
                var mesh1 = cube1.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh1.mesh = (smesh);
                var renderer1 = cube1.gameObject.addComponent("meshRenderer");
                var cuber1 = renderer1;
                var sh = this.app.getAssetMgr().getShader("uvroll.shader.json");
                if (sh != null) {
                    cuber1.materials = [];
                    cuber1.materials.push(new m4m.framework.material());
                    cuber1.materials[0].setShader(sh); //----------------使用shader
                    var texture1 = this.app.getAssetMgr().getAssetByName("uvSprite.png");
                    cuber1.materials[0].setTexture("_MainTex", texture1);
                    cuber1.materials[0].setFloat("_SpeedU", 3);
                    cuber1.materials[0].setFloat("_SpeedV", 1);
                    this.cube1 = cube1;
                }
            }
            {
                var cube2 = new m4m.framework.transform();
                cube2.name = "cube2222";
                cube2.localScale.x = cube1.localScale.y = cube1.localScale.z = 1;
                cube2.localTranslate.y = 1;
                this.scene.addChild(cube2);
                var mesh1 = cube2.gameObject.addComponent("meshFilter");
                var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
                mesh1.mesh = (smesh);
                var renderer2 = cube2.gameObject.addComponent("meshRenderer");
                var sh = this.app.getAssetMgr().getShader("selftimer_uvroll.shader.json");
                if (sh != null) {
                    renderer2.materials = [];
                    renderer2.materials.push(new m4m.framework.material());
                    renderer2.materials[0].setShader(sh); //----------------使用shader
                    var texture1 = this.app.getAssetMgr().getAssetByName("uvSprite.png");
                    renderer2.materials[0].setTexture("_MainTex", texture1);
                }
                this.cube2 = cube2;
            }
            state.finish = true;
        };
        test_uvroll.prototype.addcam = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 30;
            objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            state.finish = true;
        };
        test_uvroll.prototype.start = function (app) {
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            //任务排队执行系统
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadText.bind(this));
            this.taskmgr.addTaskCall(this.addcube.bind(this));
            this.taskmgr.addTaskCall(this.addcam.bind(this));
        };
        test_uvroll.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            this.timer += delta;
            if (this.cube != null) {
                //uv 动画
                var curframe = Math.floor(this.timer * this.fps);
                curframe = curframe % this.totalframe;
                // let ratex = 1/this.col;
                // let ratey = 1/this.row;
                // var vec4 = new m4m.math.vector4(ratex, ratey, curframe%this.col*ratey, Math.floor(curframe/this.col)*ratex);
                var vec41 = new m4m.math.vector4();
                m4m.math.spriteAnimation(3, 3, curframe, vec41);
                var renderer = this.cube.gameObject.getComponent("meshRenderer");
                renderer.materials[0].setVector4("_MainTex_ST", vec41); //shader 里加入st参数
            }
            //cube1用的全局的timer
            if (this.cube2 != null) { //uv滚动//用自己的timer
                var renderer2 = this.cube2.gameObject.getComponent("meshRenderer");
                renderer2.materials[0].setVector4("_MainTex_ST", new m4m.math.vector4(1.0, 1.0, 0, 0));
                renderer2.materials[0].setFloat("_SpeedU", 3.0);
                renderer2.materials[0].setFloat("_SpeedV", 1.0);
                renderer2.materials[0].setFloat("self_timer", this.timer); //shader 里加入st参数
            }
            var x = Math.sin(this.timer);
            var z = Math.cos(this.timer);
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                // objCam.localTranslate = new m4m.math.vector3(x2 * 10, 2.25, -z2 * 10);
                // objCam.markDirty();
                // objCam.updateWorldTran();
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
                objCam.markDirty();
            }
        };
        return test_uvroll;
    }());
    t.test_uvroll = test_uvroll;
})(t || (t = {}));
var util;
(function (util) {
    /**
     * 异步加载 any 资源
     * @param url 资源url
     */
    function loadRes(url) {
        var mgr = m4m.framework.sceneMgr.app.getAssetMgr();
        return new Promise(function (res) {
            mgr.load(url, m4m.framework.AssetTypeEnum.Auto, function () {
                res(mgr.getAssetByName(url.split('/').pop()));
            });
        });
    }
    util.loadRes = loadRes;
    function loadShader(assetMgr) {
        return new Promise(function (resolve, reject) {
            assetMgr.load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    resolve();
                }
            });
        });
    }
    util.loadShader = loadShader;
    function loadModel(assetMgr, modelName) {
        return new Promise(function (resolve, reject) {
            assetMgr.load("".concat(resRootPath, "prefab/").concat(modelName, "/").concat(modelName, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var prefab = assetMgr.getAssetByName(modelName + ".prefab.json", "".concat(modelName, ".assetbundle.json"));
                    resolve(prefab);
                }
            });
        });
    }
    util.loadModel = loadModel;
    function addCamera(scene) {
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        scene.addChild(objCam);
        var camera = objCam.gameObject.addComponent("camera");
        camera.near = 0.01;
        camera.far = 120;
        objCam.localTranslate = new m4m.math.vector3(0, 10, 10);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty();
        return objCam;
    }
    util.addCamera = addCamera;
    function loadTex(url, assetMgr) {
        return new Promise(function (resolve, reject) {
            assetMgr.load(url, m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var idx = url.lastIndexOf("/");
                    var texFileName = idx != -1 ? url.substring(idx + 1) : url;
                    var tex = assetMgr.getAssetByName(texFileName);
                    resolve(tex);
                }
                else {
                    reject();
                }
            });
        });
    }
    util.loadTex = loadTex;
    function loadTextures(urls, assetMgr) {
        return Promise.all(urls.map(function (item) { return loadTex(item, assetMgr); }));
    }
    util.loadTextures = loadTextures;
    /**
     * 运行时 加载 .js 库
     * @param url .js 文件 URL
     */
    function loadJSLib(url) {
        return new Promise(function (res, rej) {
            var htmlS = document.createElement("script");
            htmlS.src = url;
            //挂载到doc
            var attParent = document.childNodes[document.childNodes.length - 1];
            attParent.appendChild(htmlS);
            htmlS.onload = function () {
                //code加载完毕
                res(null);
            };
            htmlS.onerror = function (err) {
                rej("error : ".concat(err));
            };
        });
    }
    util.loadJSLib = loadJSLib;
    /**
     * 加载文件 以arrayBuffer 格式
     * @param url 文件URL
     */
    function loadArrayBuffer(url) {
        return new Promise(function (res, rej) {
            m4m.io.loadArrayBuffer(url, function (_bin, _err, isFail) {
                if (isFail) {
                    rej("load fail! URL".concat(url, " , err ").concat(_err));
                    return;
                }
                //成功
                res(_bin);
            });
        });
    }
    util.loadArrayBuffer = loadArrayBuffer;
})(util || (util = {}));
//加载动作病简单使用动作的Dome
var UseAniplayClipDemo = /** @class */ (function () {
    function UseAniplayClipDemo() {
        this.taskMgr = new m4m.framework.taskMgr();
    }
    //加载一个动作
    UseAniplayClipDemo.prototype.loadAniplayClip = function (laststate, state) {
        this.app.getAssetMgr().load("res/prefabs/roles/pc2/Resources/pc2_skill1.FBAni.aniclip.bin", m4m.framework.AssetTypeEnum.Aniclip, function (s) {
            // if (s.isfinish) {
            //     //取出一个动作的 IAsset对象
            //     let clip = this.app.getAssetMgr().getAssetByName("pc2_skill1.FBAni.aniclip.bin") as m4m.framework.animationClip;
            //     //通过动作资源的名字找到对应动作的ID
            //     let j = this.aniplayer.clipnames["pc2_skill1.FBAni.aniclip.bin"];
            //     //如果ID存在就说明该aniplayer存在，然后绑定动作资源
            //     if (j != null) {
            //         this.aniplayer.clips[j] = clip;
            //     }
            //     state.finish = true;
            //     this.aniplayer.play("pc2_skill1.FBAni.aniclip.bin", 1.0);
            // }
        });
    };
    //#region  通过bundle包加载一个完整的带动作的角色。
    UseAniplayClipDemo.prototype.loadRole = function (laststate, state) {
        var _this = this;
        this.app.getAssetMgr().load("res/prefabs/roles/pc2/pc2.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                var pc_1 = _this.app.getAssetMgr().getAssetByName("pc2.prefab.json").getCloneTrans();
                //拿到pc 的动作组件的索引为后面挂动作资源做准备。
                _this.aniplayer = pc_1.gameObject.getComponent("aniplayer");
                _this.scene.addChild(pc_1);
                //给角色加上武器，只是为了让动作播放起来更好看
                _this.app.getAssetMgr().load("res/prefabs/weapons/wp_ds_001/wp_ds_001.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var prefab = _this.app.getAssetMgr().getAssetByName("wp_ds_001.prefab.json");
                        //find方法传想要tranform的name，具体哪个name是左右手，在开发中自己去定义。
                        var rhand = pc_1.find("Bip01 Prop1");
                        var lhand = pc_1.find("Bip01 Prop1");
                        if (rhand) {
                            var weapon = prefab.getCloneTrans();
                            rhand.addChild(weapon);
                            //初始化武器tranform的属性
                            weapon.localRotate = new m4m.math.quaternion();
                            weapon.localTranslate = new m4m.math.vector3();
                            weapon.localScale = new m4m.math.vector3(1, 1, 1);
                            weapon.markDirty();
                        }
                        if (lhand) {
                            var weapon = prefab.getCloneTrans();
                            lhand.addChild(weapon);
                            weapon.localRotate = new m4m.math.quaternion();
                            weapon.localTranslate = new m4m.math.vector3();
                            weapon.localScale = new m4m.math.vector3(1, 1, 1);
                            weapon.markDirty();
                        }
                        state.finish = true;
                        console.log(pc_1);
                    }
                });
            }
        });
    };
    //#endregion
    //#region 加载shader
    UseAniplayClipDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    //#region  添加摄像机
    UseAniplayClipDemo.prototype.addCamera = function (laststate, state) {
        var objCam = new m4m.framework.transform();
        objCam.name = "camera.";
        objCam.localPosition.z = -10;
        objCam.localPosition.y = 10;
        objCam.localPosition.x = 10;
        var camera = objCam.gameObject.addComponent("camera");
        camera.far = 100;
        this.scene.addChild(objCam);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty();
        state.finish = true;
    };
    //#endregion
    UseAniplayClipDemo.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.addCamera.bind(this));
        this.taskMgr.addTaskCall(this.loadRole.bind(this));
        this.taskMgr.addTaskCall(this.loadAniplayClip.bind(this));
    };
    UseAniplayClipDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
    };
    return UseAniplayClipDemo;
}());
var UseAssetByLoadDemoList = /** @class */ (function () {
    function UseAssetByLoadDemoList() {
        this.x = 0;
        this.y = 100;
        this.btns = [];
    }
    UseAssetByLoadDemoList.prototype.start = function (app) {
        this.app = app;
        this.addBtn("使用加载的perfeb", function () { return new UsePrefebDemo(); });
        this.addBtn("使用加载的perfeb2", function () { return new UsePrefebDemo2(); });
        this.addBtn("使用加载的mesh和材质", function () { return new UseMeshAndMatDemo(); });
        this.addBtn("使用加载的纹理", function () { return new UseTextureDemo(); });
        this.addBtn("使用加载的动作", function () { return new UseAniplayClipDemo(); });
        this.addBtn("使用加载的特效", function () { return new UseF14EffectDemo(); });
        this.addBtn("使用加载的音频", function () { return new UseAudioDemo(); });
        this.addBtn("使用加载的场景", function () { return new UseSceneDemo(); });
    };
    UseAssetByLoadDemoList.prototype.addBtn = function (text, act) {
        var _this = this;
        var btn = document.createElement("button");
        this.btns.push(btn);
        btn.textContent = text;
        btn.onclick = function () {
            _this.clearBtn();
            _this.state = act();
            _this.state.start(_this.app);
        };
        btn.style.top = this.y + "px";
        btn.style.left = this.x + "px";
        if (this.y + 24 > 550) {
            this.y = 100;
            this.x += 200;
        }
        else {
            this.y += 24;
        }
        btn.style.position = "absolute";
        this.app.container.appendChild(btn);
    };
    UseAssetByLoadDemoList.prototype.clearBtn = function () {
        for (var i = 0; i < this.btns.length; i++) {
            this.app.container.removeChild(this.btns[i]);
        }
        this.btns.length = 0;
    };
    UseAssetByLoadDemoList.prototype.update = function (delta) {
        if (this.state != null)
            this.state.update(delta);
    };
    return UseAssetByLoadDemoList;
}());
//加载并使用音频资源
var UseAudioDemo = /** @class */ (function () {
    function UseAudioDemo() {
        this.taskMgr = new m4m.framework.taskMgr;
    }
    //加载音频资源
    UseAudioDemo.prototype.loadAudio = function (laststate, state) {
        var _this = this;
        //加载音频资源，加载音频资源不是走assetMgr.load接口，而是使用AudioEx.instance().loadAudioBuffer()  AudioEX是一个单例。
        m4m.framework.AudioEx.instance().loadAudioBuffer("res/audio/music1.mp3", function (buffer, err) {
            if (err)
                return;
            _this.audiobuf = buffer;
            state.finish = true;
        });
    };
    //给摄像机添加一个音频收听者
    UseAudioDemo.prototype.addCamera = function (laststate, state) {
        //#region 添加一个相机
        var objCam = new m4m.framework.transform();
        objCam.name = "camera.";
        objCam.localPosition.z = -10;
        objCam.localPosition.y = 0;
        objCam.localPosition.x = 0;
        var camera = objCam.gameObject.addComponent("camera");
        camera.far = 100;
        this.scene.addChild(objCam);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        //#endregion
        //给摄像机绑定一个AudioListener。当收Listener接近Player时才会接收到声音。该控件只能标记一个transform。
        var audioplayer = objCam.gameObject.addComponent("AudioListener");
        this.objCam = objCam;
        objCam.markDirty();
        state.finish = true;
    };
    //添加一个音频AudioPlayer，
    UseAudioDemo.prototype.addAudioPlay = function (laststate, state) {
        //#region 创建一个cube作为声音源
        var objAudioPlay = new m4m.framework.transform();
        objAudioPlay.name = "audio_play";
        var mesh = objAudioPlay.gameObject.addComponent("meshFilter");
        mesh.mesh = this.app.getAssetMgr().getDefaultMesh("cube");
        var render = objAudioPlay.gameObject.addComponent("meshRenderer");
        render.materials.push(this.app.getAssetMgr().getDefParticleMat());
        this.scene.addChild(objAudioPlay);
        //#endregion
        //给transform添加AudioPlayer组件，该组件是一个声音源。同一个场景可以存在多个声音源的transform。
        this.audioplay = objAudioPlay.gameObject.addComponent("AudioPlayer");
        //播放音频
        this.audioplay.play(this.audiobuf, true, 0.5);
        objAudioPlay.markDirty();
        state.finish = true;
    };
    //#region 加载shader
    UseAudioDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    UseAudioDemo.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = app.getScene();
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.loadAudio.bind(this));
        this.taskMgr.addTaskCall(this.addCamera.bind(this));
        this.taskMgr.addTaskCall(this.addAudioPlay.bind(this));
        //加入键盘控制，为了更好体现3D音频效果。
        document.addEventListener("keydown", function (e) {
            if (e.keyCode == 38) {
                _this.objCam.localPosition.z += 1;
            }
            if (e.keyCode == 40) {
                _this.objCam.localPosition.z -= 1;
            }
            _this.objCam.markDirty();
        }, false);
    };
    UseAudioDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
    };
    return UseAudioDemo;
}());
//加载并使用特效
var UseF14EffectDemo = /** @class */ (function () {
    function UseF14EffectDemo() {
        this.taskMgr = new m4m.framework.taskMgr();
    }
    //使用特效
    UseF14EffectDemo.prototype.useF14Effect = function () {
        //一个特效文件本质上是挂在了特效组件的一个空的transform。所以只要把这个带有特效的transform加在需要绑定特效的transform下即可。
        this.eff = this.app.getAssetMgr().getAssetByName("fx_B_5.prefab.json").getCloneTrans();
        this.scene.addChild(this.eff);
        //取出tranform的特效组件集，方便后面播放使用。
        this.effectSystems = this.eff.gameObject.getComponent("f14EffectSystem");
        this.eff.markDirty();
        console.log(this.eff);
        console.log(this.effectSystems);
    };
    //加载特效
    UseF14EffectDemo.prototype.loadF14Effect = function (laststate, state) {
        var _this = this;
        //加载特效一般都是加载打包号的特效包即可。
        this.app.getAssetMgr().load("res/effectShow/fx_B_5/fx_B_5.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.useF14Effect();
                state.finish = true;
            }
        });
    };
    //播放特效
    UseF14EffectDemo.prototype.playEffect = function () {
        //this.effectSystems.play(1.0);
    };
    //停止特效
    UseF14EffectDemo.prototype.stopEffect = function () {
        this.effectSystems.stop();
    };
    //#region 加入播放特效和停止的控制按钮
    UseF14EffectDemo.prototype.addCtrl = function () {
        var _this = this;
        var play = document.createElement("button");
        var stop = document.createElement("button");
        this.app.container.appendChild(play);
        this.app.container.appendChild(stop);
        play.innerText = "Play";
        stop.innerText = "stop";
        play.style.position = stop.style.position = "absolute";
        play.style.height = stop.style.height = "25px";
        play.style.width = stop.style.width = "75px";
        play.style.top = "40px";
        stop.style.top = "80px";
        stop.style.left = play.style.left = "100px";
        play.onclick = function (e) {
            _this.playEffect();
        };
        stop.onclick = function (e) {
            _this.stopEffect();
        };
    };
    //#endregion
    //#region 添加摄像机
    UseF14EffectDemo.prototype.addCamera = function (laststate, state) {
        var objCam = new m4m.framework.transform();
        objCam.name = "camera.";
        objCam.localPosition.z = -10;
        objCam.localPosition.y = 10;
        objCam.localPosition.x = 10;
        var camera = objCam.gameObject.addComponent("camera");
        camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3);
        camera.far = 100;
        this.scene.addChild(objCam);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty();
        state.finish = true;
    };
    //#endregion
    //#region 加载shader
    UseF14EffectDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    UseF14EffectDemo.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.addCamera.bind(this));
        this.taskMgr.addTaskCall(this.loadF14Effect.bind(this));
        this.addCtrl();
    };
    UseF14EffectDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
    };
    return UseF14EffectDemo;
}());
//加载并使用mesh和材质资源
var UseMeshAndMatDemo = /** @class */ (function () {
    function UseMeshAndMatDemo() {
        this.taskMgr = new m4m.framework.taskMgr;
    }
    //加载一个mesh
    UseMeshAndMatDemo.prototype.loadMesh = function (laststate, state) {
        this.app.getAssetMgr().load("res/prefabs/Cube/resources/Library_unity_default_resources_Cube.mesh.bin", m4m.framework.AssetTypeEnum.Mesh, function (s) {
            if (s.iserror) {
                state.error = true;
                console.log(s.errs);
            }
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    //加载一个mesh的材质资源
    UseMeshAndMatDemo.prototype.loadMaterial = function (laststate, state) {
        this.app.getAssetMgr().load("res/prefabs/Cube/resources/Default-Diffuse.mat.json", m4m.framework.AssetTypeEnum.Material, function (s) {
            if (s.iserror) {
                state.error = true;
                console.log(s.errs);
            }
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    //新建一个cube 绑定加载的mesh资源和材质资源
    UseMeshAndMatDemo.prototype.useMeshAndMat = function (laststate, state) {
        var cube = new m4m.framework.transform();
        cube.name = "cube";
        cube.localPosition = new m4m.math.vector3(0, 0, 0);
        //给cube添加一个mesh组件，mesh组件存放顶点数据的。
        var mesh = cube.gameObject.addComponent("meshFilter");
        //获取已经加载好的mesh资源，并把mesh资源绑定给cube的mesh组件
        mesh.mesh = this.app.getAssetMgr().getAssetByName("Library_unity_default_resources_Cube.mesh.bin");
        //给cube添加一个渲染组件。
        var render = cube.gameObject.addComponent("meshRenderer");
        //获取已经加载好的材质资源，并把材质资源绑定给cube的渲染组件
        render.materials.push(this.app.getAssetMgr().getAssetByName("Default-Diffuse.mat.json"));
        this.scene.addChild(cube);
        cube.markDirty();
        state.finish = true;
    };
    //#region 加载shader
    UseMeshAndMatDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    //#region 添加一个摄像机
    UseMeshAndMatDemo.prototype.addCamera = function (laststate, state) {
        var objCam = new m4m.framework.transform();
        objCam.name = "camera.";
        objCam.localPosition.z = -10;
        objCam.localPosition.y = 10;
        objCam.localPosition.x = 10;
        var camera = objCam.gameObject.addComponent("camera");
        camera.far = 100;
        this.scene.addChild(objCam);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        objCam.markDirty();
        state.finish = true;
    };
    //#endregion
    UseMeshAndMatDemo.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        //提供给项目用的执行队列，可以减少 asstemgr.load方法 的回调嵌套
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.addCamera.bind(this));
        this.taskMgr.addTaskCall(this.loadMesh.bind(this));
        this.taskMgr.addTaskCall(this.loadMaterial.bind(this));
        this.taskMgr.addTaskCall(this.useMeshAndMat.bind(this));
    };
    UseMeshAndMatDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
    };
    return UseMeshAndMatDemo;
}());
//现在我们使用封装好的loadDome类来加载一个 简单的面片prefeb 
var UsePrefebDemo = /** @class */ (function () {
    function UsePrefebDemo() {
    }
    UsePrefebDemo.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.assetMgr = app.getAssetMgr();
        this.scene = app.getScene();
        //#region 在场景中放入一个相机
        var cam, camera;
        {
            cam = new m4m.framework.transform();
            cam.name = "looker";
            this.scene.addChild(cam);
            cam.localPosition = new m4m.math.vector3(0, 0, -10);
            //cam.localRotate = new m4m.math.quaternion(0,0,0,1);
            camera = cam.gameObject.addComponent("camera");
            camera.far = 100;
            cam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            cam.markDirty();
        }
        //#endregion
        //Dome加载的资源使用的是"res/prefabs/Cube/resources/Cube.prefab.json"
        this.assetMgr.load("res/prefabs/Cube/resources/Cube.prefab.json", m4m.framework.AssetTypeEnum.Prefab, function (s) {
            if (s.isfinish) {
                var Cube = _this.assetMgr.getAssetByName("Cube.prefab.json").getCloneTrans();
                _this.scene.addChild(Cube);
                Cube.localPosition = new m4m.math.vector3(0, 0, 0);
                Cube.markDirty();
                console.log(Cube);
            }
        });
    };
    UsePrefebDemo.prototype.update = function (delta) {
    };
    return UsePrefebDemo;
}());
//这个Dome是多个有关联的资源一起加载的Dome。通常都是使用bundle包加载
var UsePrefebDemo2 = /** @class */ (function () {
    function UsePrefebDemo2() {
    }
    UsePrefebDemo2.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.assetMgr = app.getAssetMgr();
        this.scene = app.getScene();
        //#region 在场景中放入一个相机
        var cam, camera;
        {
            cam = new m4m.framework.transform();
            cam.name = "looker";
            this.scene.addChild(cam);
            cam.localPosition = new m4m.math.vector3(0, 0, -10);
            //cam.localRotate = new m4m.math.quaternion(0,0,0,1);
            camera = cam.gameObject.addComponent("camera");
            camera.far = 100;
            cam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            cam.markDirty();
        }
        //#endregion
        //所以实际开发中都会把资源打包成bundle包 或 压缩的bundle包进行统一加载。如下：
        this.assetMgr.load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.assetMgr.load("res/prefabs/Quad11/Quad.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var quadPrefab = _this.assetMgr.getAssetByName("Quad.prefab.json");
                        var quad = quadPrefab.getCloneTrans();
                        _this.scene.addChild(quad);
                        quad.markDirty();
                    }
                });
            }
        });
    };
    UsePrefebDemo2.prototype.update = function (delta) {
    };
    return UsePrefebDemo2;
}());
//加载并使用场景资源的样例
var UseSceneDemo = /** @class */ (function () {
    function UseSceneDemo() {
        this.taskMgr = new m4m.framework.taskMgr();
    }
    //使用通过asset加载出来的场景。
    UseSceneDemo.prototype.useRawScene = function () {
        var raw = this.app.getAssetMgr().getAssetByName("MainCity_.scene.json");
        var root = raw.getSceneRoot();
        root.localEulerAngles = new m4m.math.vector3(0, 0, 0);
        this.scene.addChild(root = raw.getSceneRoot());
        this.scene.lightmaps = [];
        raw.useLightMap(this.scene);
        raw.useFog(this.scene);
        this.scene.getRoot().markDirty();
        root.markDirty();
    };
    //加载场景
    UseSceneDemo.prototype.loadScene = function (laststate, state) {
        var _this = this;
        this.app.getAssetMgr().load("res/scenes/MainCity_/MainCity_.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.useRawScene();
                state.finish = true;
            }
        });
    };
    //#region 加载shader
    UseSceneDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    //#region 添加摄像机
    UseSceneDemo.prototype.addCamera = function (laststate, state) {
        var objCam = new m4m.framework.transform();
        objCam.name = "camera.";
        objCam.localPosition.z = -20;
        objCam.localPosition.y = 50;
        objCam.localPosition.x = -20;
        var camera = objCam.gameObject.addComponent("camera");
        camera.far = 1000;
        this.scene.addChild(objCam);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 100));
        objCam.markDirty();
        state.finish = true;
        //使用Dome已经封装好的相机控制器控制相机，以便更好地看到效果。
        CameraController.instance().init(this.app, camera);
    };
    //#endregion
    UseSceneDemo.prototype.start = function (app) {
        this.app = app;
        this.scene = app.getScene();
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.loadScene.bind(this));
        this.taskMgr.addTaskCall(this.addCamera.bind(this));
    };
    UseSceneDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
        CameraController.instance().update(delta);
    };
    return UseSceneDemo;
}());
var UseTextureDemo = /** @class */ (function () {
    function UseTextureDemo() {
        this.taskMgr = new m4m.framework.taskMgr();
    }
    UseTextureDemo.prototype.start = function (app) {
        this.app = app;
        this.assetMgr = app.getAssetMgr();
        this.scene = app.getScene();
        this.taskMgr.addTaskCall(this.loadShader.bind(this));
        this.taskMgr.addTaskCall(this.loadQuad.bind(this));
        this.taskMgr.addTaskCall(this.loadTexture.bind(this));
        //#region 在场景中放入一个相机
        var cam = new m4m.framework.transform();
        cam.name = "looker";
        this.scene.addChild(cam);
        cam.localPosition = new m4m.math.vector3(0, 0, -10);
        //cam.localRotate = new m4m.math.quaternion(0,0,0,1);
        var camera = cam.gameObject.addComponent("camera");
        camera.far = 100;
        cam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        cam.markDirty();
        //#endregion
        this.addCtrl();
    };
    //加载纹理，png .jpg纹理。用类似的操作可以加载 .pvr .pvr.bin pvr纹理资源  .dds .dds.bin dds纹理资源 和 .imgdesc.json 贴图资源，只需把AssetTypeEnum的类型 修改为 PVR,DDS和TextureDesc或者Auto即可。
    UseTextureDemo.prototype.loadTexture = function (laststate, state) {
        var _this = this;
        this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Texture, function (s) {
            if (s.isfinish) {
                //所有纹理相关的资源最后都会生成一个texture的对象保存着。
                _this.texture = _this.app.getAssetMgr().getAssetByName("zg256.png");
                state.finish = true;
            }
        });
    };
    //使用纹理
    UseTextureDemo.prototype.useTexture = function () {
        var render = this.quad.gameObject.getComponent("meshRenderer");
        console.log(this.texture);
        //白纹理图片设置进材质中
        render.materials[0].setTexture("_MainTex", this.texture);
    };
    //#region 加载shader
    UseTextureDemo.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.iserror) {
                state.error = true;
            }
            if (s.isfinish)
                state.finish = true;
        });
    };
    //#endregion
    //#region 加载一个面片，用于绑定纹理。
    UseTextureDemo.prototype.loadQuad = function (laststate, state) {
        var _this = this;
        this.assetMgr.load("res/prefabs/Quad11/Quad.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                var quadPrefab = _this.assetMgr.getAssetByName("Quad.prefab.json");
                var quad = quadPrefab.getCloneTrans();
                _this.scene.addChild(quad);
                quad.markDirty();
                state.finish = true;
                _this.quad = quad;
            }
        });
    };
    //#endregion
    //#region 添加按钮使用加载的纹理
    UseTextureDemo.prototype.addCtrl = function () {
        var _this = this;
        var changeTexture = document.createElement("button");
        changeTexture.innerText = "更换纹理";
        this.app.container.appendChild(changeTexture);
        changeTexture.style.position = "absolute";
        changeTexture.style.height = "25px";
        changeTexture.style.width = "75px";
        changeTexture.style.top = "100px";
        changeTexture.style.left = "75px";
        changeTexture.onclick = function (e) {
            //更换quad的纹理图片
            _this.useTexture();
        };
    };
    //#endregion
    UseTextureDemo.prototype.update = function (delta) {
        this.taskMgr.move(delta);
    };
    return UseTextureDemo;
}());
var Test_CameraController = /** @class */ (function () {
    function Test_CameraController() {
        this.moveSpeed = 10;
        this.movemul = 5;
        this.wheelSpeed = 1;
        this.rotateSpeed = 0.1;
        this.keyMap = {};
        this.beRightClick = false;
        this.cameras = [];
        this.isInit = false;
        this.moveVector = new m4m.math.vector3(0, 0, 1);
    }
    Test_CameraController.instance = function () {
        if (Test_CameraController.g_this == null) {
            Test_CameraController.g_this = new Test_CameraController();
        }
        return Test_CameraController.g_this;
    };
    Test_CameraController.prototype.update = function (delta) {
        if (this.beRightClick) {
            this.doMove(delta);
        }
    };
    Test_CameraController.prototype.add = function (camera) {
        this.cameras.push(new m4m.framework.camera());
        this.cameras[this.cameras.length - 1] = camera;
    };
    Test_CameraController.prototype.decideCam = function (target) {
        this.target = target;
        this.rotAngle = new m4m.math.vector3();
        m4m.math.quatToEulerAngles(this.target.gameObject.transform.localRotate, this.rotAngle);
    };
    Test_CameraController.prototype.init = function (app) {
        var _this = this;
        this.isInit = true;
        this.app = app;
        // this.target = target;
        // this.rotAngle = new m4m.math.vector3();
        // m4m.math.quatToEulerAngles(this.target.gameObject.transform.localRotate, this.rotAngle);
        this.app.webgl.canvas.addEventListener("mousedown", function (ev) {
            _this.checkOnRightClick(ev);
        }, false);
        this.app.webgl.canvas.addEventListener("mouseup", function (ev) {
            _this.beRightClick = false;
        }, false);
        this.app.webgl.canvas.addEventListener("mousemove", function (ev) {
            if (_this.beRightClick) {
                _this.doRotate(ev.movementX, ev.movementY);
            }
        }, false);
        this.app.webgl.canvas.addEventListener("keydown", function (ev) {
            _this.keyMap[ev.keyCode] = true;
        }, false);
        this.app.webgl.canvas.addEventListener("keyup", function (ev) {
            _this.moveSpeed = 10;
            _this.keyMap[ev.keyCode] = false;
        }, false);
        if (navigator.userAgent.indexOf('Firefox') >= 0) {
            this.app.webgl.canvas.addEventListener("DOMMouseScroll", function (ev) {
                _this.doMouseWheel(ev, true);
            }, false);
        }
        else {
            this.app.webgl.canvas.addEventListener("mousewheel", function (ev) {
                _this.doMouseWheel(ev, false);
            }, false);
        }
        this.app.webgl.canvas.addEventListener("mouseout", function (ev) {
            _this.beRightClick = false;
        }, false);
        document.oncontextmenu = function (ev) {
            ev.preventDefault();
        };
    };
    Test_CameraController.prototype.doMove = function (delta) {
        if (this.target == null)
            return;
        if (!this.beRightClick)
            return;
        //w
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_W] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_W])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_w] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_w])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //s
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_S] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_S])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_s] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_s])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //a
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_A] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_A])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_a] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_a])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getRightInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //d
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_D] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_D])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_d] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_d])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getRightInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //q
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_Q] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_Q])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_q] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_q])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getUpInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //e
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_E] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_E])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_e] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_e])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getUpInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        this.target.gameObject.transform.markDirty();
    };
    Test_CameraController.prototype.doRotate = function (rotateX, rotateY) {
        this.rotAngle.x += rotateY * this.rotateSpeed;
        this.rotAngle.y += rotateX * this.rotateSpeed;
        this.rotAngle.x %= 360;
        this.rotAngle.y %= 360;
        m4m.math.quatFromEulerAngles(this.rotAngle.x, this.rotAngle.y, this.rotAngle.z, this.target.gameObject.transform.localRotate);
    };
    Test_CameraController.prototype.lookat = function (trans) {
        this.target.gameObject.transform.lookat(trans);
        this.target.gameObject.transform.markDirty();
        m4m.math.quatToEulerAngles(this.target.gameObject.transform.localRotate, this.rotAngle);
    };
    Test_CameraController.prototype.checkOnRightClick = function (mouseEvent) {
        var value = mouseEvent.button;
        if (value == 2) {
            //alert('点击的是鼠标右键');
            this.beRightClick = true;
            return true;
        }
        else if (value == 0) {
            this.beRightClick = false;
            //alert('点击的是鼠标左键');
            return false;
        }
    };
    Test_CameraController.prototype.doMouseWheel = function (ev, isFirefox) {
        if (!this.target)
            return;
        if (this.target.opvalue == 0) {
            //正交相机
        }
        else //if (this.target.opvalue == 1)
         {
            //透视相机
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            if (isFirefox) {
                m4m.math.vec3ScaleByNum(this.moveVector, this.wheelSpeed * (ev.detail * (-0.5)), this.moveVector);
            }
            else {
                m4m.math.vec3ScaleByNum(this.moveVector, this.wheelSpeed * ev.deltaY * (-0.01), this.moveVector);
            }
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
            this.target.gameObject.transform.markDirty();
        }
    };
    Test_CameraController.prototype.remove = function () {
    };
    return Test_CameraController;
}());
var CameraController = /** @class */ (function () {
    function CameraController() {
        this.moveSpeed = 10;
        this.movemul = 5;
        this.wheelSpeed = 1;
        this.rotateSpeed = 0.1;
        this.keyMap = {};
        this.beRightClick = false;
        this.isInit = false;
        this.moveVector = new m4m.math.vector3(0, 0, 1);
    }
    CameraController.instance = function () {
        if (CameraController.g_this == null) {
            CameraController.g_this = new CameraController();
        }
        return CameraController.g_this;
    };
    CameraController.prototype.update = function (delta) {
        if (this.beRightClick) {
            this.doMove(delta);
        }
    };
    CameraController.prototype.init = function (app, target) {
        var _this = this;
        this.isInit = true;
        this.app = app;
        this.target = target;
        this.rotAngle = new m4m.math.vector3();
        m4m.math.quatToEulerAngles(this.target.gameObject.transform.localRotate, this.rotAngle);
        this.app.webgl.canvas.addEventListener("mousedown", function (ev) {
            _this.checkOnRightClick(ev);
        }, false);
        this.app.webgl.canvas.addEventListener("mouseup", function (ev) {
            _this.beRightClick = false;
        }, false);
        this.app.webgl.canvas.addEventListener("mousemove", function (ev) {
            if (_this.beRightClick) {
                _this.doRotate(ev.movementX, ev.movementY);
            }
        }, false);
        this.app.webgl.canvas.addEventListener("keydown", function (ev) {
            _this.keyMap[ev.keyCode] = true;
        }, false);
        this.app.webgl.canvas.addEventListener("keyup", function (ev) {
            _this.moveSpeed = 10;
            _this.keyMap[ev.keyCode] = false;
        }, false);
        if (navigator.userAgent.indexOf('Firefox') >= 0) {
            this.app.webgl.canvas.addEventListener("DOMMouseScroll", function (ev) {
                _this.doMouseWheel(ev, true);
            }, false);
        }
        else {
            this.app.webgl.canvas.addEventListener("mousewheel", function (ev) {
                _this.doMouseWheel(ev, false);
            }, false);
        }
        this.app.webgl.canvas.addEventListener("mouseout", function (ev) {
            _this.beRightClick = false;
        }, false);
        document.oncontextmenu = function (ev) {
            ev.preventDefault();
        };
    };
    CameraController.prototype.doMove = function (delta) {
        if (this.target == null)
            return;
        //w
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_W] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_W])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_w] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_w])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //s
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_S] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_S])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_s] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_s])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //a
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_A] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_A])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_a] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_a])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getRightInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //d
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_D] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_D])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_d] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_d])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getRightInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //q
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_Q] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_Q])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_q] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_q])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getUpInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, -this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        //e
        if ((this.keyMap[m4m.framework.NumberUtil.KEY_E] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_E])
            || (this.keyMap[m4m.framework.NumberUtil.KEY_e] != undefined && this.keyMap[m4m.framework.NumberUtil.KEY_e])) {
            this.moveSpeed += this.movemul * delta;
            this.target.gameObject.transform.getUpInWorld(this.moveVector);
            m4m.math.vec3ScaleByNum(this.moveVector, this.moveSpeed * delta, this.moveVector);
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
        }
        this.target.gameObject.transform.markDirty();
    };
    CameraController.prototype.doRotate = function (rotateX, rotateY) {
        this.rotAngle.x += rotateY * this.rotateSpeed;
        this.rotAngle.y += rotateX * this.rotateSpeed;
        this.rotAngle.x %= 360;
        this.rotAngle.y %= 360;
        m4m.math.quatFromEulerAngles(this.rotAngle.x, this.rotAngle.y, this.rotAngle.z, this.target.gameObject.transform.localRotate);
    };
    CameraController.prototype.lookat = function (trans) {
        this.target.gameObject.transform.lookat(trans);
        this.target.gameObject.transform.markDirty();
        m4m.math.quatToEulerAngles(this.target.gameObject.transform.localRotate, this.rotAngle);
    };
    CameraController.prototype.checkOnRightClick = function (mouseEvent) {
        var value = mouseEvent.button;
        if (value == 2) {
            //alert('点击的是鼠标右键');
            this.beRightClick = true;
            return true;
        }
        else if (value == 0) {
            this.beRightClick = false;
            //alert('点击的是鼠标左键');
            return false;
        }
    };
    CameraController.prototype.doMouseWheel = function (ev, isFirefox) {
        if (!this.target)
            return;
        if (this.target.opvalue == 0) {
            //正交相机
        }
        else //if (this.target.opvalue == 1)
         {
            //透视相机
            this.target.gameObject.transform.getForwardInWorld(this.moveVector);
            if (isFirefox) {
                m4m.math.vec3ScaleByNum(this.moveVector, this.wheelSpeed * (ev.detail * (-0.5)), this.moveVector);
            }
            else {
                m4m.math.vec3ScaleByNum(this.moveVector, this.wheelSpeed * ev.deltaY * (-0.01), this.moveVector);
            }
            m4m.math.vec3Add(this.target.gameObject.transform.localTranslate, this.moveVector, this.target.gameObject.transform.localTranslate);
            this.target.gameObject.transform.markDirty();
        }
    };
    CameraController.prototype.remove = function () {
    };
    return CameraController;
}());
var dome;
(function (dome) {
    var GMesh = /** @class */ (function () {
        function GMesh(mat, vCount, vf, webgl) {
            this.currentVerteCount = 0;
            this.realVboLen = 0;
            this.realEboLen = 0;
            this.temptPos = new m4m.math.vector3();
            this.mat = mat;
            var total = m4m.render.meshData.calcByteSize(vf) / 4;
            var gmesh = new m4m.framework.mesh();
            this.vbodata = new Float32Array(total * 2048);
            this.ebodata = new Uint16Array(2048);
            this.vf = vf;
            this.maxVerteCount = vCount;
            this.maxVboLen = this.vbodata.length;
            this.maxEboLen = this.ebodata.length;
            gmesh.glMesh = new m4m.render.glMesh();
            // gmesh.glMesh.eboType=webgl.UNSIGNED_INT;
            gmesh.glMesh.initBuffer(webgl, vf, vCount, m4m.render.MeshTypeEnum.Dynamic);
            // gmesh.glMesh.uploadVertexData(webgl, vboArr);
            gmesh.glMesh.addIndex(webgl, this.ebodata.length);
            gmesh.glMesh.initVAO();
            // gmesh.glMesh.uploadIndexData(webgl, 0, eboArr);
            gmesh.submesh = [];
            {
                var sm = new m4m.framework.subMeshInfo();
                sm.matIndex = 0;
                sm.start = 0;
                sm.size = this.ebodata.length;
                sm.line = false;
                gmesh.submesh.push(sm);
            }
            this.mesh = gmesh;
            this.vertexByteSize = gmesh.glMesh.vertexByteSize;
        }
        GMesh.prototype.reset = function () {
            this.currentVerteCount = 0;
            this.realVboLen = 0;
            this.realEboLen = 0;
        };
        GMesh.prototype.uploadMeshData = function (mat, mesh, webgl) {
            var data = mesh.data;
            this.checkMeshCapacity(data.pos.length, data.trisindex.length, webgl);
            var vertexcount = data.pos.length;
            var size = this.vertexByteSize / 4;
            var vbodata = this.vbodata;
            for (var i = 0; i < vertexcount; i++) {
                var seek = 0;
                m4m.math.matrixTransformVector3(data.pos[i], mat, this.temptPos);
                vbodata[this.realVboLen + i * size] = this.temptPos.x;
                vbodata[this.realVboLen + i * size + 1] = this.temptPos.y;
                vbodata[this.realVboLen + i * size + 2] = this.temptPos.z;
                seek += 3;
                if (this.vf & m4m.render.VertexFormatMask.Normal) {
                    vbodata[this.realVboLen + i * size + seek] = data.normal[i].x;
                    vbodata[this.realVboLen + i * size + seek + 1] = data.normal[i].y;
                    vbodata[this.realVboLen + i * size + seek + 2] = data.normal[i].z;
                    seek += 3;
                }
                if (this.vf & m4m.render.VertexFormatMask.Tangent) {
                    vbodata[this.realVboLen + i * size + seek] = data.tangent[i].x;
                    vbodata[this.realVboLen + i * size + seek + 1] = data.tangent[i].y;
                    vbodata[this.realVboLen + i * size + seek + 2] = data.tangent[i].z;
                    seek += 3;
                }
                if (this.vf & m4m.render.VertexFormatMask.Color) {
                    if (data.color != null) {
                        vbodata[this.realVboLen + i * size + seek] = data.color[i].r;
                        vbodata[this.realVboLen + i * size + seek + 1] = data.color[i].g;
                        vbodata[this.realVboLen + i * size + seek + 2] = data.color[i].b;
                        vbodata[this.realVboLen + i * size + seek + 3] = data.color[i].a;
                    }
                    else {
                        vbodata[this.realVboLen + i * size + seek] = 1;
                        vbodata[this.realVboLen + i * size + seek + 1] = 1;
                        vbodata[this.realVboLen + i * size + seek + 2] = 1;
                        vbodata[this.realVboLen + i * size + seek + 3] = 1;
                    }
                    seek += 4;
                }
                if (this.vf & m4m.render.VertexFormatMask.UV0) {
                    vbodata[this.realVboLen + i * size + seek] = data.uv[i].x;
                    vbodata[this.realVboLen + i * size + seek + 1] = data.uv[i].y;
                    seek += 2;
                }
            }
            var ebodata = this.ebodata;
            var len = data.trisindex.length;
            for (var i = 0; i < len; i++) {
                ebodata[this.realEboLen + i] = data.trisindex[i] + this.currentVerteCount;
            }
            this.realVboLen += size * vertexcount;
            this.realEboLen += len;
            this.currentVerteCount += vertexcount;
            this.mesh.submesh[0].size = this.realEboLen;
        };
        GMesh.prototype.mixToGLmesh = function (webgl) {
            this.mesh.glMesh.uploadVertexData(webgl, this.vbodata);
            this.mesh.glMesh.uploadIndexData(webgl, 0, this.ebodata);
        };
        GMesh.prototype.checkMeshCapacity = function (vertexcount, eboLen, webgl) {
            if (this.currentVerteCount + vertexcount > this.maxVerteCount) {
                var needCount = this.currentVerteCount + vertexcount;
                var needMaxVertexcount = this.maxVerteCount;
                while (needCount > needMaxVertexcount) {
                    needMaxVertexcount *= 2;
                }
                if (needMaxVertexcount != this.maxVerteCount) {
                    this.maxVerteCount = needMaxVertexcount;
                    var newVbo = new Float32Array(this.maxVerteCount * this.vertexByteSize);
                    this.maxVboLen = newVbo.length;
                    newVbo.set(this.vbodata);
                    this.mesh.glMesh.resetVboSize(webgl, this.maxVerteCount);
                    this.vbodata = newVbo;
                }
            }
            if (this.realEboLen + eboLen > this.maxEboLen) {
                var needEbolen = this.realEboLen + eboLen;
                var curMaxlen = this.maxEboLen;
                while (needEbolen > curMaxlen) {
                    curMaxlen *= 2;
                }
                if (curMaxlen != this.maxEboLen) {
                    this.maxEboLen = curMaxlen;
                    var newebo = new Uint16Array(this.maxEboLen);
                    newebo.set(this.ebodata);
                    this.mesh.glMesh.resetEboSize(webgl, 0, this.maxEboLen);
                    this.ebodata = newebo;
                }
            }
        };
        return GMesh;
    }());
    dome.GMesh = GMesh;
    var mixMesh = /** @class */ (function () {
        function mixMesh() {
            this.picker = [];
            this.flag = false;
            this.matDic = {};
            this.matinstance = {};
            this.mixmeshDic = {};
        }
        mixMesh.prototype.start = function (app) {
            var _this = this;
            this.app = app;
            this.app.showDrawCall();
            this.scene = this.app.getScene();
            var prefabName = 'GameObject';
            this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (state) {
                _this.loadPrefab(prefabName, function () {
                    if (state.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName(prefabName + ".prefab.json");
                        _this.prefab = _prefab.getCloneTrans();
                        var json = JSON.parse('{"obs":[[0,3,"-6.00","0.00","0.00"],[0,3,"0.00","-6.00","90.00"],[0,3,"0.00","6.00","90.00"],[0,3,"-18.00","0.00","0.00"],[0,3,"-12.00","0.00","0.00"],[0,2,"0.00","0.00","0.00"],[0,3,"0.00","-11.44","90.00"],[0,3,"-24.00","0.00","0.00"],[0,3,"0.00","12.00","90.00"],[0,3,"0.00","18.00","90.00"],[0,3,"0.00","-17.44","90.00"],[0,3,"-36.00","0.00","0.00"],[0,3,"-42.00","0.00","0.00"],[0,1,"-30.00","0.00","0.00"],[0,3,"-30.00","-17.44","90.00"],[0,3,"-30.00","18.00","90.00"],[0,3,"-30.00","12.00","90.00"],[0,3,"-30.00","-11.44","90.00"],[0,3,"-30.00","6.00","90.00"],[0,3,"-30.00","-6.00","90.00"],[0,0,"0.00","24.00","0.00"],[0,0,"0.00","-23.08","180.00"],[0,0,"-30.00","24.00","0.00"],[0,4,"-47.96","0.00","180.00"],[0,4,"-30.00","-23.27","0.00"],[0,3,"-47.96","-6.00","90.00"],[0,3,"-47.96","-12.00","90.00"],[0,3,"-47.96","-18.00","90.00"],[0,4,"-47.96","-23.26","90.00"],[0,3,"-42.00","-23.26","0.00"],[0,3,"-36.00","-23.26","0.00"],[1,1,"2.38","-2.64","0.00"],[1,1,"2.19","2.54","0.00"],[1,1,"-2.48","-2.58","0.00"],[1,1,"-2.47","2.62","0.00"],[1,2,"-2.41","-7.00","90.00"],[1,2,"-2.41","-12.00","90.00"],[1,2,"-2.41","-17.00","90.00"],[1,2,"-2.41","-22.00","90.00"],[1,2,"2.43","-22.00","90.00"],[1,2,"2.43","-17.00","90.00"],[1,2,"2.43","-12.00","90.00"],[1,2,"2.43","-7.00","90.00"],[1,2,"2.43","22.70","90.00"],[1,2,"2.43","17.70","90.00"],[1,2,"2.43","12.70","90.00"],[1,2,"2.43","7.70","90.00"],[1,2,"-2.41","7.70","90.00"],[1,2,"-2.41","12.70","90.00"],[1,2,"-2.41","17.70","90.00"],[1,2,"-2.41","22.70","90.00"],[1,2,"-6.97","-2.46","0.00"],[1,2,"-11.97","-2.46","0.00"],[1,2,"-16.97","-2.46","0.00"],[1,2,"-21.97","-2.46","0.00"],[1,2,"-21.97","2.54","0.00"],[1,2,"-16.97","2.54","0.00"],[1,2,"-41.37","2.54","0.00"],[1,2,"-41.37","-2.46","0.00"],[1,2,"-36.90","-2.46","0.00"],[1,2,"-36.90","-2.46","0.00"],[1,2,"-36.90","2.54","0.00"],[1,1,"-32.20","2.62","0.00"],[1,1,"-32.20","-2.58","0.00"],[1,1,"-27.50","2.54","0.00"],[1,1,"-27.30","-2.64","0.00"],[1,0,"2.57","20.55","90.00"],[1,0,"-2.48","10.33","90.00"],[1,0,"-2.48","-19.61","90.00"],[1,0,"2.46","-9.73","90.00"],[1,0,"-9.43","-2.68","0.00"],[1,0,"-19.82","2.61","0.00"],[1,2,"-45.28","-25.78","0.00"],[1,2,"-45.28","-20.78","0.00"],[1,2,"-6.86","2.54","0.00"],[1,2,"-32.16","-20.78","0.00"],[1,2,"-32.16","-25.78","0.00"],[1,2,"-50.45","-20.68","90.00"],[1,2,"-50.45","-15.00","90.00"],[1,2,"-50.45","-6.91","90.00"],[1,2,"-50.45","2.39","90.00"],[1,2,"-45.51","-6.91","90.00"],[1,2,"-45.51","-15.00","90.00"],[1,2,"-27.12","-15.00","90.00"],[1,2,"-27.12","-6.91","90.00"],[1,2,"-32.42","-6.91","90.00"],[1,2,"-32.42","-15.00","90.00"],[1,2,"-32.42","8.70","90.00"],[1,2,"-32.42","16.79","90.00"],[1,2,"-27.60","16.79","90.00"],[1,2,"-27.60","8.70","90.00"],[1,2,"-27.60","25.63","90.00"],[1,2,"-32.42","25.63","90.00"],[1,0,"-27.74","20.74","90.00"],[1,0,"-27.74","-10.56","90.00"],[1,0,"-32.40","-17.74","90.00"],[1,0,"-44.99","-8.72","90.00"],[1,0,"-50.33","-17.85","90.00"],[2,1,"-9.02","9.01","0.00"],[2,1,"-9.00","20.20","0.00"],[2,1,"-21.00","20.20","0.00"],[2,1,"-21.02","9.01","0.00"],[2,1,"-21.02","-20.20","0.00"],[2,1,"-21.00","-9.00","0.00"],[2,1,"-9.00","-9.00","0.00"],[2,1,"-9.02","-20.20","0.00"],[2,0,"-35.96","5.98","90.00"],[2,3,"-39.00","-5.99","0.00"],[2,4,"-36.00","11.83","90.00"],[2,4,"-36.00","23.20","90.00"],[2,4,"-36.00","17.38","90.00"],[2,2,"-45.00","9.00","180.00"],[2,1,"-44.99","20.20","0.00"],[2,1,"-39.12","-14.32","0.00"]],"0-0":0.218296930193901,"0-1":0.138532817363739,"0-2":0.218296304345131,"0-3":0.218295753002167,"0-4":0.218296930193901,"1-0":1.10804808139801,"1-1":1.57943224906921,"1-2":2.28681707382202,"2-0":4.10447216033936,"2-1":13.9198970794678,"2-2":23.7891082763672,"2-3":10.7089042663574,"2-4":3.134281873703}');
                        _this.obs = json.obs;
                        _this.root = new m4m.framework.transform();
                        for (var _i = 0, _a = _this.obs; _i < _a.length; _i++) {
                            var t_3 = _a[_i];
                            _this.generateSignelObs(t_3);
                        }
                        var mr = _this.root.gameObject.getComponentsInChildren("meshRenderer");
                        for (var _b = 0, mr_1 = mr; _b < mr_1.length; _b++) {
                            var m = mr_1[_b];
                            _this.picker.push(m.gameObject.transform);
                        }
                        console.log(_this.picker);
                        _this.scene.update(0);
                        _this.flag = true;
                        _this.refresh();
                    }
                });
            });
            // Load scene
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 10000;
            this.camera.backgroundColor = new m4m.math.color(0.11, 0.11, 0.11, 1.0);
            this.camera.gameObject.transform.localTranslate.z = -100;
            // objCam.localTranslate = new m4m.math.vector3(0, 0, -30);
            CameraController.instance().init(this.app, this.camera);
            objCam.markDirty(); //标记为需要刷新
        };
        mixMesh.prototype.refresh = function () {
            if (!this.flag)
                return;
            for (var k in this.mixmeshDic) {
                this.mixmeshDic[k].reset();
            }
            var _a = this.mixMesh(this.picker), nobatch = _a.nobatch, batch = _a.batch, mixMeshId = _a.mixMeshId;
            // Generate result
            // console.table(nobatch);
            // console.table(batch);
            // console.log(mixMeshId);
            for (var _i = 0, mixMeshId_1 = mixMeshId; _i < mixMeshId_1.length; _i++) {
                var id = mixMeshId_1[_i];
                var m = this.mixmeshDic[id];
                var trans = new m4m.framework.transform();
                trans.localPosition.y = 15;
                var mf = trans.gameObject.addComponent("meshFilter");
                mf.mesh = m.mesh;
                var meshRender = trans.gameObject.addComponent("meshRenderer");
                meshRender.materials = [m.mat];
                this.scene.addChild(trans);
                // this.root.gameObject.visible = false;
            }
        };
        mixMesh.prototype.generateSignelObs = function (target) {
            var level = target[0], obType = target[1], posx = target[2], posz = target[3], rotationy = target[4], trans = target[5]; // Access data chunk
            // if(level!=2||obType!=1) return;
            if (!trans) { // If current item doesn't exitst
                // level--;
                // obType--;
                var prefab = this.prefab;
                var instance = prefab.children[level].children[obType].clone();
                instance.localTranslate.x = posx;
                instance.localTranslate.z = posz;
                m4m.math.quatFromEulerAngles(0, rotationy, 0, instance.children[0].localRotate);
                this.root.addChild(instance);
            }
            else {
                trans.gameObject.visiable = true;
            }
        };
        mixMesh.prototype.load = function (path, cb) {
            this.app.getAssetMgr().load(path, m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish && cb) {
                    cb();
                }
            });
        };
        mixMesh.prototype.loadPrefab = function (name, cb) {
            this.load("res/prefabs/" + name + "/" + name + ".assetbundle.json", cb);
        };
        mixMesh.prototype.update = function (delta) {
            CameraController.instance().update(delta);
            // this.refresh();
        };
        mixMesh.prototype.mixMesh = function (targets, vf) {
            if (vf === void 0) { vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.Normal | m4m.render.VertexFormatMask.Tangent | m4m.render.VertexFormatMask.UV0; }
            var nobatchArr = [];
            var batchArr = [];
            var mixmeshid = [];
            this.matDic = {};
            for (var i = 0; i < targets.length; i++) {
                var meshr = targets[i].gameObject.getComponent("meshRenderer");
                if (meshr.materials.length > 1) {
                    nobatchArr.push(targets[i]);
                }
                else {
                    var id = meshr.materials[0].getGUID();
                    if (!this.matDic[id])
                        this.matDic[id] = [];
                    this.matDic[id].push(targets[i]);
                    this.matinstance[id] = meshr.materials[0];
                }
            }
            for (var key in this.matDic) {
                var transArr = this.matDic[key];
                if (transArr.length >= 2) {
                    for (var i = 0; i < transArr.length; i++) {
                        var meshf = transArr[i].gameObject.getComponent("meshFilter");
                        if (this.mixmeshDic[key] == null) {
                            this.mixmeshDic[key] = new GMesh(this.matinstance[key], 2048, vf, this.app.webgl);
                            mixmeshid.push(Number(key));
                        }
                        this.mixmeshDic[key].uploadMeshData(transArr[i].getWorldMatrix(), meshf.mesh, this.app.webgl);
                        batchArr.push(transArr[i]);
                    }
                }
                else {
                    if (transArr[0] != null) {
                        nobatchArr.push(transArr[0]);
                    }
                }
            }
            for (var key in this.mixmeshDic) {
                this.mixmeshDic[key].mixToGLmesh(this.app.webgl);
            }
            return { batch: batchArr, nobatch: nobatchArr, mixMeshId: mixmeshid };
        };
        return mixMesh;
    }());
    dome.mixMesh = mixMesh;
})(dome || (dome = {}));
var dome;
(function (dome) {
    var paowuxian = /** @class */ (function () {
        function paowuxian() {
            this.taskmgr = new m4m.framework.taskMgr();
            this.paoLen = 0;
            this.orgPos = new m4m.math.vector3(0, 10, -10);
            this.rotEuler = new m4m.math.vector3(-30, 180, 0);
            this.gravity = 10;
            this.speed = 30;
            this.dir = new m4m.math.vector3();
            this.paoKouPos = new m4m.math.vector3();
            this.timer = 0;
            this.forward = new m4m.math.vector3();
            this.beNeedRecompute = true;
            this.worldPoints = [];
            this.targets = [];
            this.worldStart = new m4m.math.vector3();
            this.worldEnd = new m4m.math.vector3();
            this.worldMiddle = new m4m.math.vector3();
            this.cubes = [];
            this.lerpCount = 30;
            this.endpos = new m4m.math.vector3();
            this.hPos = new m4m.math.vector3();
            this.startPos = new m4m.math.vector3();
            this.actived = false;
            this.enableWASD = true;
        }
        paowuxian.prototype.start = function (app) {
            this.app = app;
            this.scene = app.getScene();
            this.assetmgr = app.getAssetMgr();
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadmesh.bind(this));
            this.taskmgr.addTaskCall(this.gamerun.bind(this));
        };
        paowuxian.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        paowuxian.prototype.gamerun = function (laststate, state) {
            this.addcam();
            this.addcube();
            this.addUI();
            state.finish = true;
            this.camctr.setTarget(this.paodan);
            this.camctr.setDistanceToTarget(2);
            this.camctr.setRotAngle(180, 30);
        };
        paowuxian.prototype.update = function (delta) {
            this.taskmgr.move(delta);
            CameraController.instance().update(delta);
            if (this.paojia) {
                this.rotEuler.x = m4m.math.floatClamp(this.rotEuler.x, -90, 0);
                this.paojia.localEulerAngles = this.rotEuler;
                this.paojia.markDirty();
                this.guiji.localEulerAngles = new m4m.math.vector3(0, this.rotEuler.y, 0);
                this.guiji.markDirty();
                var meshf = this.guiji.gameObject.getComponent("meshFilter");
                // this.getDirByRotAngle(this.rotEuler,this.dir);
                // m4m.math.vec3Normalize(this.dir,this.dir);
                //------------炮口位置
                //m4m.math.vec3ScaleByNum(this.dir,this.paoLen,this.paoKouPos);
                meshf.mesh = this.getMeshData(-this.rotEuler.x, this.gravity, this.speed, this.paoLen, this.orgPos.y);
                //------------------------
                var mat = this.guiji.getWorldMatrix();
                m4m.math.matrixTransformVector3(this.startPos, mat, this.worldStart);
                m4m.math.matrixTransformVector3(this.hPos, mat, this.worldMiddle);
                m4m.math.matrixTransformVector3(this.endpos, mat, this.worldEnd);
                m4m.math.vec3Clone(this.worldStart, this.startTrans.localTranslate);
                m4m.math.vec3Clone(this.worldMiddle, this.middleTrans.localTranslate);
                this.startTrans.markDirty();
                this.middleTrans.markDirty();
                if (!this.enableWASD) {
                    m4m.math.vec3Clone(this.worldEnd, this.endTrans.localTranslate);
                    this.endTrans.markDirty();
                }
                //------------
                var info = new m4m.framework.pickinfo();
                //------------------障碍物集合
                //炮车集合
                var targets1 = [];
                //障碍物集合
                var targets2 = [];
                // targets1=targets2;
                this.beNeedRecompute = true;
                if (this.detectTarget_2(this.targets, targets2, info)) {
                    m4m.math.vec3Clone(info.hitposition, this.guanghuan.localPosition);
                    var axis = new m4m.math.vector3();
                    // let mat=info.pickedtran.getWorldMatrix();
                    // m4m.math.matrixTransformNormal(info.normal,mat,info.normal);
                    m4m.math.vec3Cross(m4m.math.pool.vector3_up, info.normal, axis);
                    m4m.math.vec3Normalize(axis, axis);
                    var dot = m4m.math.vec3Dot(info.normal, m4m.math.pool.vector3_up);
                    var angle = Math.acos(dot) * 180 / Math.PI;
                    m4m.math.quatFromAxisAngle(axis, angle, this.guanghuan.localRotate);
                    this.guanghuan.markDirty();
                }
                else {
                    // this.guanghuan.localEulerAngles=new m4m.math.vector3();
                    m4m.math.quatIdentity(this.guanghuan.localRotate);
                    m4m.math.vec3Clone(this.worldEnd, this.guanghuan.localPosition);
                    this.guanghuan.markDirty();
                }
            }
            if (this.actived) {
                this.timer += delta * 0.1;
                var move = new m4m.math.vector3();
                this.getDirByRotAngle(this.rotEuler, this.dir);
                m4m.math.vec3ScaleByNum(this.dir, this.paoLen, this.paoKouPos);
                m4m.math.vec3ScaleByNum(this.dir, this.speed, move);
                m4m.math.vec3ScaleByNum(move, this.timer, move);
                move.y -= 0.5 * this.gravity * this.timer * this.timer;
                m4m.math.vec3Add(this.paoKouPos, this.paojia.getWorldPosition(), this.paoKouPos);
                m4m.math.vec3Add(this.paoKouPos, move, this.paodan.localPosition);
                this.paodan.markDirty();
                if (this.paodan.localPosition.y < 0) {
                    this.actived = false;
                }
            }
        };
        /**
         *
         * @param targets1 仅仅碰撞 碰撞盒子
         * @param targets2 先碰撞盒子再碰mesh
         * @param info
         */
        paowuxian.prototype.detectTarget_2 = function (targets1, targets2, info) {
            var newtargets = [];
            if (this.linedetectcollider(this.worldStart, this.worldMiddle, targets1, newtargets)) {
                if (this.detectSecond_Colliders(newtargets, info)) {
                    // console.error("collider:"+info.pickedtran.name);
                    return true;
                }
            }
            newtargets = [];
            if (this.linedetectcollider(this.worldMiddle, this.worldEnd, targets1, newtargets)) {
                if (this.detectSecond_Colliders(newtargets, info)) {
                    // console.error("collider:"+info.pickedtran.name);
                    return true;
                }
            }
            newtargets = [];
            if (this.linedetectcollider(this.worldStart, this.worldMiddle, targets2, newtargets)) {
                if (this.detectSecond_Meshs(newtargets, info)) {
                    return true;
                }
            }
            newtargets = [];
            if (this.linedetectcollider(this.worldMiddle, this.worldEnd, targets2, newtargets)) {
                if (this.detectSecond_Meshs(newtargets, info)) {
                    return true;
                }
            }
            return false;
        };
        // private detectSecond(target:m4m.framework.transform,info:m4m.framework.pickinfo):boolean
        // {
        //     if(this.beNeedRecompute)
        //     {
        //         this.beNeedRecompute=false;
        //         let mat=this.guiji.getWorldMatrix();
        //         for(let i=0;i<this.pointArr.length;i++)
        //         {
        //             m4m.math.matrixTransformVector3(this.pointArr[i],mat,this.pointArr[i]);
        //         }
        //     }
        //     for(let i=0;i<this.pointArr.length-1;i++)
        //     {
        //        if(this.lineDetectMesh(this.pointArr[i],this.pointArr[i+1],target,info))
        //        {
        //            info.pickedtran=target;
        //            return true;
        //        } 
        //     }
        //     return false;
        // }
        paowuxian.prototype.detectSecond_Colliders = function (target, info) {
            var distancc = Number.MAX_VALUE;
            var picked = false;
            for (var i = 0; i < target.length; i++) {
                var _info = new m4m.framework.pickinfo();
                if (this.detectSecond_Collider(target[i], _info)) {
                    if (_info.distance < distancc) {
                        picked = true;
                        distancc = _info.distance;
                        info.cloneFrom(_info);
                    }
                }
            }
            return picked;
        };
        paowuxian.prototype.detectSecond_Collider = function (target, info) {
            if (this.beNeedRecompute) {
                this.beNeedRecompute = false;
                var mat = this.guiji.getWorldMatrix();
                for (var i = 0; i < this.pointArr.length; i++) {
                    m4m.math.matrixTransformVector3(this.pointArr[i], mat, this.pointArr[i]);
                }
            }
            if (this.intersectCollider(this.pointArr, target, info)) {
                info.pickedtran = target;
                return true;
            }
            return false;
        };
        paowuxian.prototype.detectSecond_Meshs = function (target, info) {
            var distancc = Number.MAX_VALUE;
            var picked = false;
            for (var i = 0; i < target.length; i++) {
                var _info = new m4m.framework.pickinfo();
                if (this.detectSecond_Mesh(target[i], _info)) {
                    if (_info.distance < distancc) {
                        picked = true;
                        distancc = _info.distance;
                        info.cloneFrom(_info);
                    }
                }
            }
            return picked;
        };
        paowuxian.prototype.detectSecond_Mesh = function (target, info) {
            if (this.beNeedRecompute) {
                this.beNeedRecompute = false;
                var mat = this.guiji.getWorldMatrix();
                for (var i = 0; i < this.pointArr.length; i++) {
                    m4m.math.matrixTransformVector3(this.pointArr[i], mat, this.pointArr[i]);
                }
            }
            var meshf = target.gameObject.getComponent("meshFilter");
            var mesh = meshf.getMeshOutput();
            if (meshf != null && meshf.mesh != null) {
                if (this.intersects(this.pointArr, meshf.mesh, target.getWorldMatrix(), info)) {
                    info.pickedtran = target;
                    return true;
                }
            }
            return false;
        };
        paowuxian.prototype.linedetectcollider = function (start, end, targets, newtargets) {
            var dir = new m4m.math.vector3();
            m4m.math.vec3Subtract(end, start, dir);
            var len = m4m.math.vec3Length(dir);
            m4m.math.vec3Normalize(dir, dir);
            var ray = new m4m.framework.ray(start, dir);
            var distance = Number.MAX_VALUE;
            var picked = false;
            //--------------
            for (var key in targets) {
                var _info = new m4m.framework.pickinfo();
                if (ray.intersectCollider(targets[key], _info)) {
                    if (_info.distance < len) {
                        picked = true;
                        newtargets.push(_info.pickedtran);
                    }
                }
            }
            return picked;
        };
        paowuxian.prototype.lineDetectMesh = function (start, end, target, info) {
            var dir = new m4m.math.vector3();
            m4m.math.vec3Subtract(end, start, dir);
            var len = m4m.math.vec3Length(dir);
            m4m.math.vec3Normalize(dir, dir);
            var ray = new m4m.framework.ray(start, dir);
            var meshf = target.gameObject.getComponent("meshFilter");
            var mesh = meshf.getMeshOutput();
            if (mesh != null) {
                if (mesh.intersects(ray, target.getWorldMatrix(), info)) {
                    if (info.distance < len) {
                        return true;
                    }
                }
            }
        };
        paowuxian.prototype.addcam = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 2000;
            this.camera.fov = Math.PI * 0.3;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -15);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var controller = new CameraController();
            CameraController.instance().init(this.app, this.camera);
            var objCam = new m4m.framework.transform();
            this.cam2 = objCam.gameObject;
            this.cam2.visible = false;
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            var camera = objCam.gameObject.addComponent("camera");
            camera.near = 0.01;
            camera.far = 2000;
            camera.fov = Math.PI * 0.3;
            camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -15);
            objCam.markDirty(); //标记为需要刷新
            this.camctr = objCam.gameObject.addComponent("camCtr");
        };
        paowuxian.prototype.addcube = function () {
            // let cube0=new m4m.framework.transform();
            // cube0.localScale=new m4m.math.vector3(1000,0.01,1000);
            // this.scene.addChild(cube0);
            // let meshf0=cube0.gameObject.addComponent("meshFilter") as m4m.framework.meshFilter;
            // let meshr0=cube0.gameObject.addComponent("meshRenderer") as m4m.framework.meshRenderer;
            // meshf0.mesh=this.assetmgr.getDefaultMesh("cube");
            var cube1 = new m4m.framework.transform();
            this.paojia = cube1;
            cube1.localPosition = this.orgPos;
            cube1.localScale = new m4m.math.vector3(0.5, 0.5, this.paoLen * 2);
            this.scene.addChild(cube1);
            var meshf1 = cube1.gameObject.addComponent("meshFilter");
            var meshr1 = cube1.gameObject.addComponent("meshRenderer");
            meshf1.mesh = this.assetmgr.getDefaultMesh("cube");
            var cube2 = new m4m.framework.transform();
            cube2.localScale = new m4m.math.vector3(0.2, 0.2, 0.2);
            this.paodan = cube2;
            this.scene.addChild(cube2);
            var meshf2 = cube2.gameObject.addComponent("meshFilter");
            var meshr2 = cube2.gameObject.addComponent("meshRenderer");
            meshf2.mesh = this.assetmgr.getDefaultMesh("cube");
            var cube3 = new m4m.framework.transform();
            this.guiji = cube3;
            cube3.localPosition = this.orgPos;
            this.scene.addChild(cube3);
            var meshf3 = cube3.gameObject.addComponent("meshFilter");
            var meshr3 = cube3.gameObject.addComponent("meshRenderer");
            var mat = new m4m.framework.material();
            var shader = this.assetmgr.getShader("diffuse_bothside.shader.json");
            mat.setShader(shader);
            meshr3.materials = [mat];
            var cube4 = new m4m.framework.transform();
            this.guanghuan = cube4;
            cube4.localScale = new m4m.math.vector3(3, 0.1, 3);
            this.scene.addChild(cube4);
            var meshf4 = cube4.gameObject.addComponent("meshFilter");
            cube4.gameObject.addComponent("meshRenderer");
            meshf4.mesh = this.assetmgr.getDefaultMesh("cube");
            this.startTrans = this.addscaledCube(0.3);
            this.middleTrans = this.addscaledCube(0.3);
            this.endTrans = this.addscaledCube(0.3);
        };
        paowuxian.prototype.addscaledCube = function (scale) {
            var cube4 = new m4m.framework.transform();
            this.cubes.push(cube4);
            cube4.localScale = new m4m.math.vector3(scale, scale, scale);
            this.scene.addChild(cube4);
            var meshf4 = cube4.gameObject.addComponent("meshFilter");
            cube4.gameObject.addComponent("meshRenderer");
            meshf4.mesh = this.assetmgr.getDefaultMesh("cube");
            return cube4;
        };
        paowuxian.prototype.getDirByRotAngle = function (euler, dir) {
            var rot = new m4m.math.quaternion();
            m4m.math.quatFromEulerAngles(euler.x, euler.y, euler.z, rot);
            m4m.math.quatTransformVector(rot, m4m.math.pool.vector3_forward, dir);
        };
        paowuxian.prototype.getMeshData = function (anglex, gravity, speed, paoLen, paojiaPosY) {
            if (paojiaPosY === void 0) { paojiaPosY = 0; }
            if (this.mesh == null) {
                this.mesh = this.initmesh(anglex, gravity, speed, paoLen, paojiaPosY);
            }
            else {
                anglex = anglex * Math.PI / 180;
                var halfwidth = 1;
                var posarr = [];
                var Middleposarr = [];
                var paokouy = paoLen * Math.sin(anglex);
                var paokouz = paoLen * Math.cos(anglex);
                var speedy = Math.sin(anglex) * speed;
                var speedz = Math.cos(anglex) * speed;
                var totalTime = speedy / gravity + Math.sqrt(2 * (paojiaPosY + paokouy) / gravity + Math.pow(speedy / gravity, 2));
                //
                var count = this.lerpCount;
                var deltaTime = totalTime / count;
                for (var i = 0; i <= count; i++) {
                    var counttime = deltaTime * i;
                    var newpos1 = new m4m.math.vector3(halfwidth, speedy * counttime - 0.5 * gravity * Math.pow(counttime, 2) + paokouy, speedz * counttime + paokouz);
                    var newpos2 = new m4m.math.vector3(-halfwidth, speedy * counttime - 0.5 * gravity * Math.pow(counttime, 2) + paokouy, speedz * counttime + paokouz);
                    posarr.push(newpos1);
                    posarr.push(newpos2);
                    var middlepos = new m4m.math.vector3(0, speedy * counttime - 0.5 * gravity * Math.pow(counttime, 2) + paokouy, speedz * counttime + paokouz);
                    Middleposarr.push(middlepos);
                    if (i == count) {
                        this.guanghuantoPaoJia = speedz * counttime + paokouz;
                    }
                }
                this.mesh.data.pos = posarr;
                this.pointArr = Middleposarr;
                var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.UV0;
                var v32 = this.mesh.data.genVertexDataArray(vf);
                this.mesh.glMesh.uploadVertexData(this.app.webgl, v32);
                //-------------------------计算三点---------------------
                this.startPos.y = paokouy;
                this.startPos.z = paokouz;
                var time = speedy / gravity;
                this.hPos.y = speedy * time - 0.5 * gravity * Math.pow(time, 2) + paokouy;
                this.hPos.z = speedz * time + paokouz;
                this.endpos.y = -paojiaPosY;
                this.endpos.z = speedz * totalTime + paokouz;
            }
            return this.mesh;
        };
        paowuxian.prototype.initmesh = function (anglex, gravity, speed, paoLen, paojiaPosY) {
            if (paojiaPosY === void 0) { paojiaPosY = 0; }
            anglex = anglex * Math.PI / 180;
            var halfwidth = 1;
            var posarr = [];
            var uvArr = [];
            var trisindex = [];
            var data = new m4m.render.meshData();
            data.pos = posarr;
            data.uv = uvArr;
            data.trisindex = trisindex;
            var paokouy = paoLen * Math.sin(anglex);
            var paokouz = paoLen * Math.cos(anglex);
            var speedy = Math.sin(anglex) * speed;
            var speedz = Math.cos(anglex) * speed;
            var totalTime = speedy / gravity + Math.sqrt(2 * (paojiaPosY + paokouy) / gravity + Math.pow(speedy / gravity, 2));
            //
            var count = this.lerpCount;
            var deltaTime = totalTime / count;
            for (var i = 0; i <= count; i++) {
                var counttime = deltaTime * i;
                var newpos1 = new m4m.math.vector3(halfwidth, speedy * counttime - 0.5 * gravity * Math.pow(counttime, 2) + paokouy, speedz * counttime + paokouz);
                var newpos2 = new m4m.math.vector3(-halfwidth, speedy * counttime - 0.5 * gravity * Math.pow(counttime, 2) + paokouy, speedz * counttime + paokouz);
                posarr.push(newpos1);
                posarr.push(newpos2);
                var newUv1 = new m4m.math.vector2(i / count, 0);
                var newUv2 = new m4m.math.vector2(i / count, 1);
                uvArr.push(newUv1);
                uvArr.push(newUv2);
                trisindex.push();
            }
            for (var i = 0; i < count; i++) {
                trisindex.push(2 * i + 0, 2 * i + 2, 2 * i + 1, 2 * i + 1, 2 * i + 2, 2 * i + 3);
            }
            var _mesh = new m4m.framework.mesh(".mesh.bin");
            _mesh.data = data;
            var vf = m4m.render.VertexFormatMask.Position | m4m.render.VertexFormatMask.UV0;
            _mesh.data.originVF = vf;
            var v32 = _mesh.data.genVertexDataArray(vf);
            var i16 = _mesh.data.genIndexDataArray();
            _mesh.glMesh = new m4m.render.glMesh();
            _mesh.glMesh.initBuffer(this.app.webgl, vf, _mesh.data.pos.length, m4m.render.MeshTypeEnum.Dynamic);
            _mesh.glMesh.uploadVertexData(this.app.webgl, v32);
            _mesh.glMesh.addIndex(this.app.webgl, i16.length);
            _mesh.glMesh.uploadIndexData(this.app.webgl, 0, i16);
            _mesh.glMesh.initVAO();
            _mesh.submesh = [];
            {
                var sm = new m4m.framework.subMeshInfo();
                sm.matIndex = 0;
                sm.start = 0;
                sm.size = i16.length;
                sm.line = false;
                _mesh.submesh.push(sm);
            }
            return _mesh;
        };
        paowuxian.prototype.addUI = function () {
            var _this = this;
            var deltaangle = 3;
            this.addBtn("左转", 30, 300, function () {
                _this.rotEuler.y -= deltaangle;
            });
            this.addBtn("右转", 100, 300, function () {
                _this.rotEuler.y += deltaangle;
            });
            this.addBtn("上转", 30, 400, function () {
                _this.rotEuler.x -= deltaangle;
            });
            this.addBtn("下转", 100, 400, function () {
                _this.rotEuler.x += deltaangle;
            });
            this.addBtn("发射", 60, 450, function () {
                _this.actived = true;
            });
            this.addBtn("切换相机", 60, 500, function () {
                _this.cam2.visible = !_this.cam2.visible;
                _this.camera.gameObject.visible = !_this.camera.gameObject.visible;
            });
            this.addBtn("w", 30, 600, function () {
                if (_this.enableWASD) {
                    _this.endTrans.localPosition.z += 1;
                    _this.endTrans.markDirty();
                    _this.apply();
                }
            });
            this.addBtn("s", 100, 600, function () {
                if (_this.enableWASD) {
                    _this.endTrans.localPosition.z -= 1;
                    _this.endTrans.markDirty();
                    _this.apply();
                }
            });
            this.addBtn("a", 30, 700, function () {
                if (_this.enableWASD) {
                    _this.endTrans.localPosition.x -= 1;
                    _this.endTrans.markDirty();
                    _this.apply();
                }
            });
            this.addBtn("d", 100, 700, function () {
                if (_this.enableWASD) {
                    _this.endTrans.localPosition.x += 1;
                    _this.endTrans.markDirty();
                    _this.apply();
                }
            });
        };
        paowuxian.prototype.apply = function () {
            var target = new m4m.math.vector3();
            m4m.math.vec3Subtract(this.endTrans.localPosition, this.guiji.localPosition, target);
            target.y = 0;
            var rotinfo = this.getRotAnlge(this.speed, this.orgPos.y, this.gravity, target, m4m.math.pool.vector3_forward);
            this.rotEuler.x = -1 * rotinfo.rotx;
            this.rotEuler.y = rotinfo.roty;
        };
        paowuxian.prototype.addBtn = function (text, x, y, func) {
            var btn = document.createElement("button");
            btn.textContent = text;
            btn.onclick = function () {
                func();
            };
            btn.style.top = y + "px";
            btn.style.left = x + "px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        paowuxian.prototype.loadmesh = function (laststate, state) {
            var _this = this;
            var name = "box";
            // name="CJ";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(name, "/").concat(name, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName(name + ".prefab.json", "".concat(name, ".assetbundle.json"));
                    var item = _prefab.getCloneTrans();
                    _this.scene.addChild(item);
                    //---------------showbox
                    var showColider_1 = function (trans) {
                        var collider = trans.gameObject.getComponent("boxcollider");
                        if (collider != null) {
                            collider.colliderVisible = true;
                            _this.targets.push(trans);
                        }
                        if (trans.children != null) {
                            for (var key in trans.children) {
                                showColider_1(trans.children[key]);
                                // this.targets.push(trans.children[key]);
                            }
                        }
                    };
                    showColider_1(item);
                    state.finish = true;
                }
            });
        };
        paowuxian.prototype.intersects = function (LinePoints, mesh, matrix, outInfo) {
            var ishided = false;
            if (!mesh.submesh)
                return ishided;
            var lastDistance = Number.MAX_VALUE;
            var worldPosArr = [];
            for (var i = 0, len = mesh.data.pos.length; i < len; i++) {
                var p0 = mesh.data.pos[i];
                var t0 = m4m.math.pool.new_vector3();
                m4m.math.matrixTransformVector3(p0, matrix, t0);
                worldPosArr.push(t0);
            }
            for (var i = 0; i < LinePoints.length - 1; i++) {
                var dir = new m4m.math.vector3();
                m4m.math.vec3Subtract(LinePoints[i + 1], LinePoints[i], dir);
                var len = m4m.math.vec3Length(dir);
                m4m.math.vec3Normalize(dir, dir);
                var ray = new m4m.framework.ray(LinePoints[i], dir);
                for (var j = 0; j < mesh.submesh.length; j++) {
                    var submesh = mesh.submesh[j];
                    for (var index = submesh.start; index < submesh.size; index += 3) {
                        var t0 = worldPosArr[mesh.data.trisindex[index]];
                        var t1 = worldPosArr[mesh.data.trisindex[index + 1]];
                        var t2 = worldPosArr[mesh.data.trisindex[index + 2]];
                        var tempinfo = m4m.math.pool.new_pickInfo();
                        var bool = ray.intersectsTriangle(t0, t1, t2, tempinfo);
                        if (bool && tempinfo.distance > 0 && tempinfo.distance <= len) {
                            var hitpos = m4m.math.pool.new_vector3();
                            m4m.math.vec3ScaleByNum(ray.direction, tempinfo.distance, hitpos);
                            m4m.math.vec3Add(ray.origin, hitpos, hitpos);
                            var dist = m4m.math.vec3Distance(hitpos, LinePoints[0]);
                            if (dist < lastDistance) {
                                ishided = true;
                                outInfo.cloneFrom(tempinfo);
                                outInfo.faceId = index / 3;
                                outInfo.subMeshId = j;
                                m4m.math.vec3Clone(hitpos, outInfo.hitposition);
                                lastDistance = dist;
                            }
                            m4m.math.pool.delete_vector3(hitpos);
                        }
                        m4m.math.pool.delete_pickInfo(tempinfo);
                    }
                }
            }
            m4m.math.pool.delete_vector3Array(worldPosArr);
            return ishided;
        };
        paowuxian.prototype.intersectCollider = function (LinePoints, target, outInfo) {
            var ishided = false;
            var lastDistance = Number.MAX_VALUE;
            for (var i = 0; i < LinePoints.length - 1; i++) {
                var dir = new m4m.math.vector3();
                m4m.math.vec3Subtract(LinePoints[i + 1], LinePoints[i], dir);
                var len = m4m.math.vec3Length(dir);
                m4m.math.vec3Normalize(dir, dir);
                var ray = new m4m.framework.ray(LinePoints[i], dir);
                var tempinfo = m4m.math.pool.new_pickInfo();
                var bool = ray.intersectCollider(target, tempinfo);
                if (bool) {
                    if (tempinfo.distance <= len) {
                        var dist = m4m.math.vec3Distance(tempinfo.hitposition, LinePoints[0]);
                        if (dist < lastDistance) {
                            ishided = true;
                            outInfo.cloneFrom(tempinfo);
                            outInfo.distance = dist;
                            lastDistance = dist;
                        }
                    }
                }
                m4m.math.pool.delete_pickInfo(tempinfo);
            }
            return ishided;
        };
        paowuxian.prototype.getRotAnlge = function (speed, h, g, target, forward) {
            var L = Math.sqrt(target.x * target.x + target.z * target.z);
            var a = 0.5 * g * L * L / (speed * speed);
            var sqrt = (h - a) / a + Math.pow(L / (2 * a), 2);
            if (sqrt > 0) {
                var tana = Math.sqrt(sqrt) + L / (2 * a);
                // let cosa=Math.sqrt(0.5*g*L*L/h+0.25*L*L/(h*h))-L*0.5/h;
                var _rotx = Math.atan(tana) * 180 / Math.PI;
                var _roty = this.fromToRotation(forward, target, m4m.math.pool.vector3_right);
                return { rotx: _rotx, roty: _roty, canReach: true };
            }
            else {
                var tana = L / (2 * a);
                var _rotx = Math.atan(tana) * 180 / Math.PI;
                var _roty = this.fromToRotation(forward, target, m4m.math.pool.vector3_right);
                return { rotx: _rotx, roty: _roty, canReach: true };
            }
        };
        paowuxian.prototype.fromToRotation = function (from, to, right) {
            var dir1 = m4m.math.pool.new_vector3();
            var dir2 = m4m.math.pool.new_vector3();
            m4m.math.vec3Normalize(from, dir1);
            m4m.math.vec3Normalize(to, dir2);
            var dot = m4m.math.vec3Dot(dir1, dir2);
            var dot2 = m4m.math.vec3Dot(dir2, right);
            dot2 = Math.acos(dot2) * 180 / Math.PI;
            if (dot2 > 90) {
                dot = -1 * Math.acos(dot) * 180 / Math.PI;
            }
            else {
                dot = Math.acos(dot) * 180 / Math.PI;
            }
            return dot;
        };
        return paowuxian;
    }());
    dome.paowuxian = paowuxian;
    var camCtr = /** @class */ (function () {
        function camCtr() {
            this.type = "camCtr";
            this._distance = 0;
            this._offset = new m4m.math.vector3();
            this.camrotAgnle = new m4m.math.vector3();
            this.targetpos = new m4m.math.vector3();
        }
        camCtr.prototype.setTarget = function (target, worldOffset) {
            if (worldOffset === void 0) { worldOffset = null; }
            this._target = target;
            this._worldOffset = worldOffset;
        };
        camCtr.prototype.setRotAngle = function (yanle, xangle) {
            this.camrotAgnle.x = xangle;
            this.camrotAgnle.y = yanle;
        };
        camCtr.prototype.setDistanceToTarget = function (distance) {
            this._distance = distance;
        };
        camCtr.prototype.onPlay = function () {
        };
        camCtr.prototype.start = function () {
        };
        camCtr.prototype.update = function (delta) {
            if (this._target == null) {
                m4m.math.quatFromEulerAngles(this.camrotAgnle.x, this.camrotAgnle.y, 0, this.gameObject.transform.localRotate);
                this.gameObject.transform.markDirty();
            }
            else {
                m4m.math.quatFromEulerAngles(this.camrotAgnle.x, this.camrotAgnle.y, 0, this.gameObject.transform.localRotate);
                m4m.math.quatTransformVector(this.gameObject.transform.localRotate, m4m.math.pool.vector3_forward, this._offset);
                m4m.math.vec3ScaleByNum(this._offset, this._distance, this._offset);
                if (this._worldOffset != null) {
                    m4m.math.vec3Add(this._target.getWorldPosition(), this._worldOffset, this.targetpos);
                }
                else {
                    m4m.math.vec3Clone(this._target.getWorldPosition(), this.targetpos);
                }
                m4m.math.vec3Subtract(this.targetpos, this._offset, this.gameObject.transform.localPosition);
                this.gameObject.transform.markDirty();
            }
        };
        camCtr.prototype.remove = function () {
        };
        camCtr.prototype.clone = function () {
        };
        camCtr = __decorate([
            m4m.reflect.nodeComponent
        ], camCtr);
        return camCtr;
    }());
    dome.camCtr = camCtr;
})(dome || (dome = {}));
var dome;
(function (dome) {
    /** 炮王项目炮弹 */
    var paowuxian2 = /** @class */ (function () {
        function paowuxian2() {
            this.taskmgr = new m4m.framework.taskMgr();
            this.pointDown = false;
            this.targets = [];
            this.beUIFollow = false;
            this.hitPosition = new m4m.math.vector3();
            this.behit = false;
            this.middlePos = new m4m.math.vector3();
            //-------------------------------game logic--------------------------------------------------------------------
            this.targetPos = new m4m.math.vector3();
            this.beLaunched = false;
            this.time = 0;
            /**
             * 设置泡弹跑的总时间
             */
            this.totaltime = 5;
            this.temp_pickInfo = m4m.math.pool.new_pickInfo();
            this.temptPos = new m4m.math.vector3();
            this.temptdir = new m4m.math.vector3();
            this.lookpos = new m4m.math.vector3();
            this.lastPos = new m4m.math.vector3();
            this.realDIr = new m4m.math.vector3();
            this.winddisturb = 0;
            this.gravitydisturb = 0;
            this.screenpos = new m4m.math.vector2();
            this.targetRotation = new m4m.math.quaternion();
            this.lastRotaion = new m4m.math.quaternion();
            this.paoheight = 2;
            this.paoLen = 1;
            this.paokouPos = new m4m.math.vector3();
            this.beActiveRot = false;
            this.rotTotalTime = 1;
            this.rottime = 0;
        }
        paowuxian2.prototype.start = function (app) {
            this.app = app;
            this.scene = app.getScene();
            this.assetmgr = app.getAssetMgr();
            this.inputMgr = this.app.getInputMgr();
            this.taskmgr.addTaskCall(this.addcam.bind(this));
            this.taskmgr.addTaskCall(this.loadShader.bind(this));
            this.taskmgr.addTaskCall(this.loadmesh.bind(this));
            this.taskmgr.addTaskCall(this.gameInit.bind(this));
        };
        paowuxian2.prototype.update = function (delta) {
            if (this.pointDown == false && this.inputMgr.point.touch == true) //pointdown
             {
                this.fire();
            }
            this.pointDown = this.inputMgr.point.touch;
            this.taskmgr.move(delta);
            CameraController.instance().update(delta);
            this.gameupdate(delta);
        };
        paowuxian2.prototype.loadShader = function (laststate, state) {
            this.app.getAssetMgr().load("".concat(resRootPath, "shader/shader.assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (_state) {
                if (_state.isfinish) {
                    state.finish = true;
                }
            });
        };
        paowuxian2.prototype.loadmesh = function (laststate, state) {
            var _this = this;
            var name = "box";
            name = "Map_Castle";
            this.app.getAssetMgr().load("".concat(resRootPath, "prefab/").concat(name, "/").concat(name, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                if (s.isfinish) {
                    var _prefab = _this.app.getAssetMgr().getAssetByName(name + ".prefab.json", "".concat(name, ".assetbundle.json"));
                    var item = _prefab.getCloneTrans();
                    _this.scene.addChild(item);
                    //---------------showbox
                    var showColider_2 = function (trans) {
                        var collider = trans.gameObject.getComponent("boxcollider");
                        if (collider != null) {
                            collider.colliderVisible = true;
                            _this.targets.push(trans);
                        }
                        if (trans.children != null) {
                            for (var key in trans.children) {
                                showColider_2(trans.children[key]);
                                // this.targets.push(trans.children[key]);
                            }
                        }
                    };
                    showColider_2(item);
                    state.finish = true;
                }
            });
        };
        paowuxian2.prototype.addcam = function (laststate, state) {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 2000;
            this.camera.fov = Math.PI * 0.3;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -15);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            var controller = new CameraController();
            CameraController.instance().init(this.app, this.camera);
            state.finish = true;
        };
        paowuxian2.prototype.gameInit = function (laststate, state) {
            var _this = this;
            this.paojia = this.addcube(new m4m.math.vector3(), new m4m.math.vector3(1, 1.0, 2.0));
            this.paojia.localPosition.y += this.paoheight;
            // m4m.math.quatMultiply(this.lastRotaion.roty,this.lastRotaion.rotx,this.paojia.localRotate);
            this.paojia.markDirty();
            this.paodan = this.addcube(new m4m.math.vector3(), new m4m.math.vector3(0.2, 0.2, 0.2));
            this.addPaoDancam();
            this.addBtn("切换相机", 60, 500, function () {
                _this.cam2.visible = !_this.cam2.visible;
                _this.camera.gameObject.visible = !_this.camera.gameObject.visible;
            });
            this.addBtn("UI跟随Paodan", 60, 700, function () {
                _this.beUIFollow = !_this.beUIFollow;
                if (_this.beUIFollow == false) {
                    _this.testUI.localTranslate.x = 0;
                    _this.testUI.localTranslate.y = 0;
                    _this.testUI.markDirty();
                }
            });
            this.floor = this.scene.getRoot().find("Map_Castle_floor");
            // this.onRotEnd=
            state.finish = true;
        };
        //----------------------------------game scene asset------------------------------------------------
        paowuxian2.prototype.addPaoDancam = function () {
            var objCam = new m4m.framework.transform();
            this.cam2 = objCam.gameObject;
            this.cam2.visible = false;
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            var camera = objCam.gameObject.addComponent("camera");
            camera.near = 0.01;
            camera.far = 2000;
            camera.fov = Math.PI * 0.3;
            camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -15);
            objCam.markDirty(); //标记为需要刷新
            this.camctr = objCam.gameObject.addComponent("camCtr");
            this.camctr.setTarget(this.paodan, new m4m.math.vector3(0, 0.5, 0));
            this.camctr.setDistanceToTarget(5);
            this.camctr.setRotAngle(0, 30);
            //2dUI root
            this.rooto2d = new m4m.framework.overlay2D();
            this.camera.addOverLay(this.rooto2d);
            //raw png
            var raw_t2 = new m4m.framework.transform2D;
            this.testUI = raw_t2;
            raw_t2.name = "滑动卷轴框png";
            raw_t2.width = 100;
            raw_t2.height = 100;
            var raw_i2 = raw_t2.addComponent("rawImage2D");
            raw_i2.image = this.assetmgr.getDefaultTexture("grid");
            this.rooto2d.addChild(raw_t2);
        };
        paowuxian2.prototype.fire = function () {
            var _this = this;
            this.pickScene(function (info) {
                console.warn("pick point:" + info.hitposition.toString(), info);
                m4m.math.vec3Clone(info.hitposition, _this.targetPos);
                var target = _this.addcube(_this.targetPos);
                _this.beforeRotatePaojia();
            });
        };
        paowuxian2.prototype.fireBullet = function () {
            this.beLaunched = true;
            this.time = 0;
        };
        paowuxian2.prototype.pickScene = function (fuc) {
            var _this = this;
            var inputMgr = this.app.getInputMgr();
            var ray = this.camera.creatRayByScreen(new m4m.math.vector2(inputMgr.point.x, inputMgr.point.y), this.app);
            this.rayInstersetScene(ray, function (info) {
                m4m.math.vec3Clone(info.hitposition, _this.hitPosition);
                fuc(info);
            });
        };
        paowuxian2.prototype.gameupdate = function (delta) {
            this.updateBullet(delta);
            this.updateUI();
            this.updateRotPaojia(delta);
        };
        paowuxian2.prototype.updateBullet = function (delta) {
            var _this = this;
            if (this.beLaunched) {
                this.time += delta * 4;
                // console.warn("Time:"+this.time.toString());
                var lerp = this.time / this.totaltime;
                m4m.math.vec3Clone(this.paodan.localPosition, this.lastPos);
                var paojiaWorldpos = this.paojia.getWorldPosition();
                this.bessel(paojiaWorldpos, this.middlePos, this.hitPosition, lerp, this.temptPos);
                this.temptPos.x += this.winddisturb * this.time;
                this.temptPos.y -= this.gravitydisturb * this.time;
                this.paodan.lookatPoint(this.temptPos);
                m4m.math.vec3Clone(this.temptPos, this.paodan.localPosition);
                this.paodan.markDirty();
                m4m.math.vec3Subtract(this.temptPos, this.lastPos, this.realDIr);
                if (this.realDIr.y < 0) //调数值无效，把这个判断去掉
                 {
                    m4m.math.vec3Normalize(this.realDIr, this.realDIr);
                    var ray = new m4m.framework.ray(this.lastPos, this.realDIr);
                    this.rayInstersetScene(ray, function (info) {
                        var dis = m4m.math.vec3Distance(_this.lastPos, _this.temptPos);
                        if (info.distance < dis + 0.2) //碰撞出问题，增加0.2数值
                         {
                            _this.addcube(info.hitposition);
                            { //炮弹碰撞
                                console.warn("---------------碰到了");
                                _this.beLaunched = false;
                                _this.time = 0;
                                if (_this.onEndCollision) {
                                    _this.onEndCollision(info.hitposition);
                                }
                            }
                        }
                    });
                }
            }
        };
        paowuxian2.prototype.updateUI = function () {
            if (this.beUIFollow && this.paodan) {
                var pos = this.paodan.getWorldPosition();
                this.camera.calcScreenPosFromWorldPos(this.app, pos, this.screenpos);
                m4m.math.vec2Clone(this.screenpos, this.testUI.localTranslate);
                this.testUI.markDirty();
            }
        };
        paowuxian2.prototype.beforeRotatePaojia = function () {
            this.adjustMiddlePoint(this.paojia.getWorldPosition(), this.targetPos, this.middlePos);
            var dir = m4m.math.pool.new_vector3();
            m4m.math.vec3Subtract(this.middlePos, this.paojia.getWorldPosition(), dir);
            m4m.math.vec3Normalize(dir, dir);
            m4m.math.quatClone(this.paojia.localRotate, this.lastRotaion);
            this.getRotationByDir(dir, m4m.math.pool.vector3_forward, this.targetRotation);
            m4m.math.vec3Clone(this.paojia.getWorldPosition(), this.paokouPos);
            this.paokouPos.y += this.paoheight;
            this.scaleAndAdd(dir, this.paoLen, this.paokouPos, this.paokouPos);
            this.adjustMiddlePoint(this.paokouPos, this.targetPos, this.middlePos);
            { //---------激活旋转
                this.beActiveRot = true;
                this.rottime = 0;
            }
            m4m.math.pool.delete_vector3(dir);
        };
        paowuxian2.prototype.updateRotPaojia = function (delta) {
            if (this.beActiveRot && this.rottime < this.rotTotalTime) {
                this.rottime += delta;
                var lerp = this.rottime / this.rotTotalTime;
                lerp = Math.min(lerp, 1.0);
                if (lerp == 1.0) {
                    this.beActiveRot = false;
                    if (this.onRotEnd != null) {
                        this.onRotEnd();
                    }
                    { //-----------发射前重置炮弹位置
                        m4m.math.vec3Clone(this.paojia.localPosition, this.paodan.localPosition);
                        this.paodan.markDirty();
                        if (this.onberforeFire) {
                            this.onberforeFire();
                        }
                        this.fireBullet();
                    }
                }
                m4m.math.quatLerp(this.lastRotaion, this.targetRotation, this.paojia.localRotate, lerp);
                this.paojia.markDirty();
            }
        };
        //-----------------------------game util---------------------------------------------------------------------------------
        paowuxian2.prototype.scaleAndAdd = function (from, scale, add, out) {
            out.x = from.x * scale + add.x;
            out.y = from.y * scale + add.y;
            out.z = from.z * scale + add.z;
        };
        paowuxian2.prototype.rayInstersetScene = function (ray, fuc) {
            var bePickMesh = false;
            var infos = this.intersetColliders(ray, this.targets);
            var info = m4m.math.pool.new_pickInfo();
            var distance = Number.MAX_VALUE;
            var temptinfo = m4m.math.pool.new_pickInfo();
            for (var i = 0; i < infos.length; i++) {
                var picked = this.intersetMesh(ray, temptinfo, infos[i].pickedtran);
                if (picked && temptinfo.distance < distance) {
                    bePickMesh = true;
                    distance = temptinfo.distance;
                    info.cloneFrom(temptinfo);
                }
            }
            if (bePickMesh) {
                fuc(info);
            }
            else {
                if (this.floor) {
                    bePickMesh = this.intersetMesh(ray, info, this.floor);
                    if (bePickMesh) {
                        fuc(info);
                    }
                }
            }
            // this.behit=bePickMesh;
            for (var key in infos) {
                m4m.math.pool.delete_pickInfo(infos[key]);
            }
        };
        paowuxian2.prototype.intersetMesh = function (ray, info, tran) {
            var meshFilter = tran.gameObject.getComponent("meshFilter");
            if (meshFilter != null) {
                //3d normal mesh
                var mesh = meshFilter.getMeshOutput();
                if (mesh) {
                    var bool = mesh.intersects(ray, tran.getWorldMatrix(), info);
                    return bool;
                }
            }
            return false;
        };
        paowuxian2.prototype.intersetColliders = function (ray, trans) {
            var infos = [];
            var info = m4m.math.pool.new_pickInfo();
            for (var i = 0; i < trans.length; i++) {
                var bepicked = ray.intersectCollider(trans[i], info);
                if (bepicked) {
                    var newinfo = m4m.math.pool.new_pickInfo();
                    newinfo.cloneFrom(info);
                    infos.push(newinfo);
                }
            }
            infos.sort(function (a, b) {
                return a.distance - b.distance;
            });
            return infos;
        };
        paowuxian2.prototype.addcube = function (pos, scale) {
            if (scale === void 0) { scale = null; }
            var cube4 = new m4m.framework.transform();
            if (scale != null) {
                m4m.math.vec3Clone(scale, cube4.localScale);
            }
            m4m.math.vec3Clone(pos, cube4.localPosition);
            this.scene.addChild(cube4);
            var meshf4 = cube4.gameObject.addComponent("meshFilter");
            cube4.gameObject.addComponent("meshRenderer");
            meshf4.mesh = this.assetmgr.getDefaultMesh("cube");
            return cube4;
        };
        paowuxian2.prototype.addBtn = function (text, x, y, func) {
            var btn = document.createElement("button");
            btn.textContent = text;
            btn.onclick = function () {
                func();
            };
            btn.style.top = y + "px";
            btn.style.left = x + "px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        paowuxian2.prototype.adjustMiddlePoint = function (from, to, pos) {
            var dis = m4m.math.vec3Distance(from, to);
            //----lerp
            var lerp = 0.7;
            m4m.math.vec3SLerp(from, to, lerp, pos);
            //---------------up延伸
            // let upy=10;
            pos.y += dis * 0.5;
        };
        paowuxian2.prototype.bessel = function (from, middle, to, t, out) {
            //out=from*(1-t)^2+middle*2t(1-t)+to*t^2
            var p1 = Math.pow(1 - t, 2);
            var p2 = 2 * t * (1 - t);
            var p3 = Math.pow(t, 2);
            out.x = from.x * p1 + middle.x * p2 + to.x * p3;
            out.y = from.y * p1 + middle.y * p2 + to.y * p3;
            out.z = from.z * p1 + middle.z * p2 + to.z * p3;
        };
        paowuxian2.prototype.getBeselDir = function (from, middle, to, t, out) {
            //out=from*2*(1-t)*(-1)+middle*2(1-2t)+to*2t
            var p1 = -1 * 2 * (1 - t);
            var p2 = 2 * (1 - 2 * t);
            var p3 = 2 * t;
            out.x = from.x * p1 + middle.x * p2 + to.x * p3;
            out.y = from.y * p1 + middle.y * p2 + to.y * p3;
            out.z = from.z * p1 + middle.z * p2 + to.z * p3;
        };
        paowuxian2.prototype.getRotationByDir = function (dir, forward, out) {
            var tana = dir.y / Math.sqrt(dir.x * dir.x + dir.z * dir.z);
            var _rotx = Math.atan(tana) * 180 / Math.PI;
            dir.y = 0;
            m4m.math.vec3Normalize(dir, dir);
            var _roty = this.fromToRotation(forward, dir, m4m.math.pool.vector3_right);
            m4m.math.quatFromEulerAngles(-1 * _rotx, _roty, 0, out);
        };
        paowuxian2.prototype.getRotAnlge = function (dir, forward) {
            var tana = dir.y / Math.sqrt(dir.x * dir.x + dir.z * dir.z);
            var _rotx = Math.atan(tana) * 180 / Math.PI;
            dir.y = 0;
            m4m.math.vec3Normalize(dir, dir);
            var _roty = this.fromToRotation(forward, dir, m4m.math.pool.vector3_right);
            return { rotx: _rotx, roty: _roty };
        };
        paowuxian2.prototype.fromToRotation = function (from, to, right) {
            var dir1 = m4m.math.pool.new_vector3();
            var dir2 = m4m.math.pool.new_vector3();
            m4m.math.vec3Normalize(from, dir1);
            m4m.math.vec3Normalize(to, dir2);
            var dot = m4m.math.vec3Dot(dir1, dir2);
            var dot2 = m4m.math.vec3Dot(dir2, right);
            dot2 = Math.acos(dot2) * 180 / Math.PI;
            if (dot2 > 90) {
                dot = -1 * Math.acos(dot) * 180 / Math.PI;
            }
            else {
                dot = Math.acos(dot) * 180 / Math.PI;
            }
            m4m.math.pool.delete_vector3(dir1);
            m4m.math.pool.delete_vector3(dir2);
            return dot;
        };
        return paowuxian2;
    }());
    dome.paowuxian2 = paowuxian2;
})(dome || (dome = {}));
//UI 组件样例
var physic2d_dome = /** @class */ (function () {
    function physic2d_dome() {
        this.taskmgr = new m4m.framework.taskMgr();
    }
    physic2d_dome.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        this.assetMgr = this.app.getAssetMgr();
        //相机
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 10;
        //2dUI root
        this.rooto2d = new m4m.framework.overlay2D();
        this.camera.addOverLay(this.rooto2d);
        this.scene.enable2DPhysics(new m4m.math.vector2(0, 0));
        //任务排队执行系统
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.createUI.bind(this));
    };
    physic2d_dome.prototype.createUI = function (astState, state) {
        var atlasComp = this.assetMgr.getAssetByName("comp.atlas.json");
        var tex_0 = this.assetMgr.getAssetByName("zg03_256.png");
        //raw png
        this.creatbox(100, 100, 120, 120, tex_0, this.rooto2d);
        this.creatbox(130, 300, 120, 120, tex_0, this.rooto2d);
        var wallWidth = 1200;
        var wallheigth = 600;
        this.crea2dWall(0, wallheigth / 2, 50, wallheigth, tex_0, this.rooto2d);
        this.crea2dWall(wallWidth, wallheigth / 2, 50, wallheigth, tex_0, this.rooto2d);
        this.crea2dWall(wallWidth / 2, 0, wallWidth, 50, tex_0, this.rooto2d);
        this.crea2dWall(wallWidth / 2, wallheigth, wallWidth, 50, tex_0, this.rooto2d);
        state.finish = true;
    };
    physic2d_dome.prototype.crea2dWall = function (posx, posy, width, height, texture, root) {
        var bound3 = new m4m.framework.transform2D;
        bound3.localTranslate.x = posx;
        bound3.localTranslate.y = posy;
        bound3.width = width;
        bound3.height = height;
        bound3.pivot.x = 0.5;
        bound3.pivot.y = 0.5;
        var boundimag3 = bound3.addComponent("rawImage2D");
        boundimag3.image = texture;
        var body3 = bound3.addComponent("rectBody2d");
        body3.setInitData({ isStatic: true });
        root.addChild(bound3);
        return bound3;
    };
    physic2d_dome.prototype.creatbox = function (posx, posy, width, height, texture, root) {
        var bound3 = new m4m.framework.transform2D;
        bound3.localTranslate.x = posx;
        bound3.localTranslate.y = posy;
        bound3.width = width;
        bound3.height = height;
        bound3.pivot.x = 0.5;
        bound3.pivot.y = 0.5;
        var boundimag3 = bound3.addComponent("rawImage2D");
        boundimag3.image = texture;
        var body3 = bound3.addComponent("rectBody2d");
        setTimeout(function () {
            body3.addForce(new m4m.math.vector2(1, 0));
        }, 3000);
        root.addChild(bound3);
        return bound3;
    };
    physic2d_dome.prototype.loadTexture = function (lastState, state) {
        var _this = this;
        //加载图片资源
        this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.json.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                _this.assetMgr.load("".concat(resRootPath, "atlas/comp/comp.atlas.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        //加载字体资源
                        _this.assetMgr.load("".concat(resRootPath, "font/STXINGKA.TTF.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                            if (s.isfinish) {
                                _this.assetMgr.load("".concat(resRootPath, "font/STXINGKA.font.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                                    _this.assetMgr.load("".concat(resRootPath, "texture/zg03_256.png"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                                        if (s.isfinish) {
                                            state.finish = true;
                                        }
                                    });
                                });
                            }
                        });
                    }
                });
            }
        });
    };
    physic2d_dome.prototype.update = function (delta) {
        this.taskmgr.move(delta); //推进task
    };
    return physic2d_dome;
}());
var PhysicDemo;
(function (PhysicDemo) {
    var physic_01 = /** @class */ (function () {
        function physic_01() {
        }
        physic_01.prototype.start = function (app) {
            this.scene = app.getScene();
            var trans = new m4m.framework.transform();
            trans.localScale.x = 10;
            trans.localScale.z = 10;
            this.scene.addChild(trans);
            var mf = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
            var mr = trans.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
            mf.mesh = app.getAssetMgr().getDefaultMesh("cube");
            var trans2 = new m4m.framework.transform();
            trans2.localPosition.y = 5;
            this.scene.addChild(trans2);
            var mf2 = trans2.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHFILTER);
            var mr2 = trans2.gameObject.addComponent(m4m.framework.StringUtil.COMPONENT_MESHRENDER);
            mf2.mesh = app.getAssetMgr().getDefaultMesh("cube");
            this.scene.enablePhysics(new m4m.math.vector3(0, -9.8, 0));
            var groundImpostor = new m4m.framework.PhysicsImpostor(trans, m4m.framework.ImpostorType.BoxImpostor, { mass: 0, restitution: 0.9 });
            var boxImpostor = new m4m.framework.PhysicsImpostor(trans2, m4m.framework.ImpostorType.BoxImpostor, { mass: 1, restitution: 0.9 });
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 2000;
            this.camera.fov = Math.PI * 0.3;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            // let controller=new CameraController();
            CameraController.instance().init(app, this.camera);
        };
        physic_01.prototype.update = function (delta) {
            CameraController.instance().update(delta);
        };
        return physic_01;
    }());
    PhysicDemo.physic_01 = physic_01;
})(PhysicDemo || (PhysicDemo = {}));
var dome;
(function (dome) {
    var db_test_f14eff = /** @class */ (function () {
        function db_test_f14eff() {
            this.timer = 0;
            this.rot = new m4m.math.quaternion();
        }
        db_test_f14eff.prototype.start = function (app) {
            var _this = this;
            console.log("i am here.");
            this.app = app;
            this.scene = this.app.getScene();
            //m4m.framework.assetMgr.useBinJs=true;
            util.loadShader(app.getAssetMgr())
                .then(function () { return _this.loadEffectPrefab(); })
                .then(function () { return _this.addCamera(); })
                .then(function () { return _this.addUI(); });
        };
        db_test_f14eff.prototype.loadEffectPrefab = function (name) {
            var _this = this;
            if (name === void 0) { name = "fx_yh"; }
            return new Promise(function (resolve, reject) {
                _this.app.getAssetMgr().load("".concat(resRootPath, "effect/").concat(name, "/").concat(name, ".assetbundle.json"), m4m.framework.AssetTypeEnum.Auto, function (s) {
                    if (s.isfinish) {
                        var _prefab = _this.app.getAssetMgr().getAssetByName("".concat(name, ".prefab.json"), "".concat(name, ".assetbundle.json"));
                        _this.effbaseprefab = _prefab;
                        var prefab = _prefab.getCloneTrans();
                        _this.effPrefab = prefab;
                        var f14Effect = _this.effPrefab.gameObject.getComponent("f14EffectSystem");
                        _this.f14eff = f14Effect;
                        _this.scene.addChild(_this.effPrefab);
                        resolve();
                    }
                });
            });
        };
        db_test_f14eff.prototype.addUI = function () {
            this.addButton();
            this.addButton2();
        };
        db_test_f14eff.prototype.addButton = function () {
            var _this = this;
            var btn = document.createElement("button");
            btn.textContent = "Play";
            btn.onclick = function () {
                _this.f14eff.play();
            };
            btn.style.top = "160px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        db_test_f14eff.prototype.addButton2 = function () {
            var _this = this;
            var btn = document.createElement("button");
            btn.textContent = "stop";
            btn.onclick = function () {
                _this.f14eff.stop();
            };
            btn.style.top = "200px";
            btn.style.position = "absolute";
            this.app.container.appendChild(btn);
        };
        db_test_f14eff.prototype.addCamera = function () {
            //添加一个摄像机
            var objCam = new m4m.framework.transform();
            objCam.name = "sth.";
            this.scene.addChild(objCam);
            this.camera = objCam.gameObject.addComponent("camera");
            this.camera.near = 0.01;
            this.camera.far = 2000;
            this.camera.fov = Math.PI * 0.3;
            this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
            objCam.localTranslate = new m4m.math.vector3(0, 0, -15);
            objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            objCam.markDirty(); //标记为需要刷新
            // let controller=new CameraController();
            CameraController.instance().init(this.app, this.camera);
            this.app.getScene().mainCamera = this.camera;
        };
        db_test_f14eff.prototype.update = function (delta) {
            CameraController.instance().update(delta);
        };
        return db_test_f14eff;
    }());
    dome.db_test_f14eff = db_test_f14eff;
})(dome || (dome = {}));
var test_ChangeMaterial = /** @class */ (function () {
    function test_ChangeMaterial() {
        this.isCube = false;
        this.timer = 0;
        this.material1 = new m4m.framework.material();
        this.material2 = new m4m.framework.material();
        this.taskmgr = new m4m.framework.taskMgr();
        this.isMaterial1 = false;
        this.zeroPoint = new m4m.math.vector3(0, 0, 0);
    }
    test_ChangeMaterial.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                state.finish = true;
            }
        });
    };
    test_ChangeMaterial.prototype.loadTexture = function (laststate, state) {
        var c = 0;
        c++;
        this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                c--;
                if (c == 0) {
                    state.finish = true;
                }
            }
            else {
                state.error = true;
            }
        });
        c++;
        this.app.getAssetMgr().load("res/map_normal.png", m4m.framework.AssetTypeEnum.Auto, function (s) {
            if (s.isfinish) {
                c--;
                if (c == 0) {
                    state.finish = true;
                }
            }
        });
    };
    test_ChangeMaterial.prototype.addCam = function (laststate, state) {
        //添加一个相机
        var objCam = new m4m.framework.transform;
        objCam.name = "Camera";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        objCam.markDirty();
        console.log("add camera");
        state.finish = true;
    };
    test_ChangeMaterial.prototype.addCube = function (laststate, state) {
        //添加一个Cube
        var cube = new m4m.framework.transform();
        cube.name = "Cube1";
        cube.localScale.x = cube.localScale.y = cube.localScale.z = 2;
        this.scene.addChild(cube);
        var mesh = cube.gameObject.addComponent("meshFilter");
        mesh.mesh = (this.app.getAssetMgr()).getDefaultMesh("cube");
        cube.gameObject.addComponent("meshRenderer");
        this.cube = cube;
        cube.markDirty();
        console.log("add cube");
        state.finish = true;
    };
    test_ChangeMaterial.prototype.addBtn = function () {
        var _this = this;
        //创建一个button，控制material的切换
        var btn1 = document.createElement("button");
        btn1.textContent = "button1 更换material";
        btn1.onclick = function () {
            var renderer = _this.cube.gameObject.getComponent("meshRenderer");
            if (renderer != null) {
                renderer.materials = [];
                renderer.materials.push(new m4m.framework.material());
                if (_this.isMaterial1) {
                    renderer.materials[0] = _this.material2;
                    _this.isMaterial1 = false;
                }
                else {
                    renderer.materials[0] = _this.material1;
                    _this.isMaterial1 = true;
                }
            }
        };
        btn1.style.top = "128px";
        btn1.style.position = "absolute";
        this.app.container.appendChild(btn1);
    };
    test_ChangeMaterial.prototype.setMaterial = function (laststate, state) {
        var shader1 = this.app.getAssetMgr().getShader("diffuse.shader.json");
        if (shader1 != null) {
            this.material1.setShader(shader1);
            var texture1 = this.app.getAssetMgr().getAssetByName("zg256.png");
            this.material1.setTexture("_MainTex", texture1);
            this.material2.setShader(shader1);
            var texture2 = this.app.getAssetMgr().getAssetByName("map_normal.png");
            this.material2.setTexture("_MainTex", texture2);
        }
        state.finish = true;
    };
    test_ChangeMaterial.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        //任务排队执行系统        
        this.taskmgr.addTaskCall(this.loadShader.bind(this));
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.setMaterial.bind(this));
        this.taskmgr.addTaskCall(this.addCube.bind(this));
        this.taskmgr.addTaskCall(this.addCam.bind(this));
        this.addBtn();
    };
    test_ChangeMaterial.prototype.update = function (delta) {
        this.taskmgr.move(delta);
        this.timer += delta;
        if (this.cube != null) {
            //旋转方式一：相机旋转         
            var x2 = Math.sin(this.timer * 0.1);
            var z2 = Math.cos(this.timer * 0.1);
            if (this.camera != null) {
                var objCam = this.camera.gameObject.transform;
                objCam.localTranslate = new m4m.math.vector3(x2 * 10, 4, -z2 * 10);
                objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
            }
            // //旋转方式二：cube自转
            // let yValue=(this.timer*30)%360;
            // let yRotate=new m4m.math.quaternion();
            // m4m.math.quatFromEulerAngles(0,yValue,0,yRotate);
            // this.cube.localRotate=yRotate;
            // this.cube.markDirty();
        }
    };
    return test_ChangeMaterial;
}());
var test_ChangeMesh = /** @class */ (function () {
    function test_ChangeMesh() {
        this.isCube = false;
    }
    test_ChangeMesh.prototype.start = function (app) {
        var _this = this;
        this.app = app;
        this.scene = this.app.getScene();
        {
            //添加一个Cube
            var cube = new m4m.framework.transform();
            cube.name = "Cube1";
            cube.localScale.x = cube.localScale.y = cube.localScale.z = 2;
            this.scene.addChild(cube);
            var mesh = cube.gameObject.addComponent("meshFilter");
            mesh.mesh = (this.app.getAssetMgr()).getDefaultMesh("cube");
            cube.gameObject.addComponent("meshRenderer");
            cube.gameObject.addComponent("boxcollider");
            this.cube = cube;
            cube.markDirty();
        }
        //创建一个button，控制mesh的切换
        var btn1 = document.createElement("button");
        btn1.textContent = "button1 更换mesh";
        btn1.onclick = function () {
            if (_this.isCube == false) {
                var mesh_1 = cube.gameObject.getComponent("meshFilter");
                mesh_1.mesh = (_this.app.getAssetMgr()).getDefaultMesh("sphere");
                _this.isCube = true;
            }
            else {
                var mesh_2 = cube.gameObject.getComponent("meshFilter");
                mesh_2.mesh = _this.app.getAssetMgr().getDefaultMesh("cube");
                _this.isCube = false;
            }
        };
        btn1.style.top = "128px";
        btn1.style.position = "absolute";
        this.app.container.appendChild(btn1);
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "camera";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
    };
    test_ChangeMesh.prototype.update = function (delta) {
    };
    return test_ChangeMesh;
}());
var test_NewGameObject = /** @class */ (function () {
    function test_NewGameObject() {
    }
    test_NewGameObject.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        {
            //添加一个Cube
            var cube = new m4m.framework.transform();
            cube.name = "Cube1";
            cube.localScale.x = cube.localScale.y = cube.localScale.z = 2;
            this.scene.addChild(cube);
            var mesh = cube.gameObject.addComponent("meshFilter");
            mesh.mesh = (this.app.getAssetMgr()).getDefaultMesh("cube");
            cube.gameObject.addComponent("meshRenderer");
            cube.gameObject.addComponent("boxcollider");
            this.cube = cube;
            cube.markDirty();
        }
        {
            //为cube添加一个子物体 sphere
            var sphere = new m4m.framework.transform();
            sphere.name = "Cube's child";
            cube.addChild(sphere);
            sphere.localScale.x = sphere.localScale.y = sphere.localScale.z = 1;
            sphere.localTranslate.x = 2;
            var mesh = sphere.gameObject.addComponent("meshFilter");
            mesh.mesh = this.app.getAssetMgr().getDefaultMesh("sphere");
            sphere.gameObject.addComponent("meshRenderer");
            sphere.markDirty();
        }
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "camera";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.lookat(this.cube);
        objCam.markDirty(); //标记为需要刷新
    };
    test_NewGameObject.prototype.update = function (delta) {
    };
    return test_NewGameObject;
}());
var test_NewScene = /** @class */ (function () {
    function test_NewScene() {
    }
    test_NewScene.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        //添加一个摄像机
        var objCam = new m4m.framework.transform();
        objCam.name = "camera";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 10, -10);
        objCam.markDirty(); //标记为需要刷新
    };
    test_NewScene.prototype.update = function (delta) {
    };
    return test_NewScene;
}());
var test_Sound = /** @class */ (function () {
    function test_Sound() {
        this.taskmgr = new m4m.framework.taskMgr();
        this.time = 0;
    }
    test_Sound.prototype.loadShader = function (laststate, state) {
        this.app.getAssetMgr().load("res/shader/shader.assetbundle.json", m4m.framework.AssetTypeEnum.Auto, function (_state) {
            if (_state.isfinish) {
                state.finish = true;
            }
            else {
                state.error = true;
            }
        });
    };
    test_Sound.prototype.loadTexture = function (laststate, state) {
        this.app.getAssetMgr().load("res/zg256.png", m4m.framework.AssetTypeEnum.Auto, function (_state) {
            if (_state.isfinish) {
                state.finish = true;
            }
            else {
                state.error = true;
            }
        });
    };
    test_Sound.prototype.addCam = function (laststate, state) {
        var objCam = new m4m.framework.transform();
        objCam.name = "Main Camera";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 100;
        objCam.localTranslate = new m4m.math.vector3(0, 0, -10);
        objCam.lookat(this.cube);
        objCam.markDirty();
        state.finish = true;
    };
    test_Sound.prototype.addCube = function (laststate, state) {
        var objCube = new m4m.framework.transform();
        objCube.name = "Cube";
        this.scene.addChild(objCube);
        objCube.localScale.x = objCube.localScale.y = objCube.localScale.z = 1;
        objCube.localTranslate = new m4m.math.vector3(0, 0, 0);
        var mesh = objCube.gameObject.addComponent("meshFilter");
        var smesh = this.app.getAssetMgr().getDefaultMesh("cube");
        mesh.mesh = (smesh);
        var render = objCube.gameObject.addComponent("meshRenderer");
        var sh = this.app.getAssetMgr().getShader("diffuse.shader.json");
        if (sh != null) {
            render.materials = [];
            render.materials.push(new m4m.framework.material());
            render.materials[0].setShader(sh);
            var texture0 = this.app.getAssetMgr().getAssetByName("zg256.png");
            render.materials[0].setTexture("_MainTex", texture0);
        }
        this.cube = objCube;
        this.cube.markDirty();
        state.finish = true;
    };
    test_Sound.prototype.addBtnLoadSound = function (laststate, state) {
    };
    test_Sound.prototype.start = function (app) {
        this.app = app;
        this.scene = this.app.getScene();
        this.taskmgr.addTaskCall(this.loadShader.bind(this));
        this.taskmgr.addTaskCall(this.loadTexture.bind(this));
        this.taskmgr.addTaskCall(this.addCube.bind(this));
        this.taskmgr.addTaskCall(this.addCam.bind(this));
    };
    test_Sound.prototype.update = function (delta) {
        this.taskmgr.move(delta);
        this.time += delta;
        if (this.cube != null) {
            var cubeTrans = this.cube.gameObject.transform;
            var yRoate = (this.time * 30) % 360;
            var yQuaternion = m4m.math.pool.new_quaternion();
            m4m.math.quatFromEulerAngles(0, yRoate, 0, yQuaternion);
            cubeTrans.localRotate = yQuaternion;
            cubeTrans.markDirty();
            console.log(this.time);
        }
    };
    return test_Sound;
}());
var m4m;
(function (m4m) {
    var framework;
    (function (framework) {
        /**
         * 相机围绕盘旋 脚本
         */
        var HoverCameraScript = /** @class */ (function (_super) {
            __extends(HoverCameraScript, _super);
            function HoverCameraScript() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.lookAtPoint = new m4m.math.vector3(0, 0, 0);
                _this.distance = 30;
                _this.minPanAngle = -Infinity;
                _this.maxPanAngle = Infinity;
                _this.minTileAngle = -90;
                _this.maxTileAngle = 90;
                _this.scaleSpeed = 0.2;
                _this._mouseDown = false;
                _this._fingerTwo = false;
                _this._panAngle = 0;
                _this._panRad = 0;
                _this._cur_panRad = 0;
                _this.damping = 0.08;
                _this.panSpeed = 0.01;
                _this.F9DragRotate = false;
                _this._tiltAngle = 0;
                _this._tiltRad = 0;
                _this._cur_tiltRad = 0;
                _this.panDir = new m4m.math.vector3();
                _this.targetOffset = new m4m.math.vector3();
                _this.cupTargetV3 = new m4m.math.vector3();
                _this.lastTouch = new m4m.math.vector2();
                _this.diffv2 = new m4m.math.vector2();
                _this.lastTouches = null;
                _this.panFingers = [new m4m.math.vector2(), new m4m.math.vector2()];
                return _this;
            }
            Object.defineProperty(HoverCameraScript.prototype, "panAngle", {
                get: function () {
                    return this._panAngle;
                },
                set: function (value) {
                    this._panAngle = Math.max(this.minPanAngle, Math.min(this.maxPanAngle, value));
                    this._panRad = this._panAngle * Math.PI / 180;
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(HoverCameraScript.prototype, "tiltAngle", {
                get: function () {
                    return this._tiltAngle;
                },
                set: function (value) {
                    this._tiltAngle = Math.max(this.minTileAngle, Math.min(this.maxTileAngle, value));
                    this._tiltRad = this._tiltAngle * Math.PI / 180;
                },
                enumerable: false,
                configurable: true
            });
            HoverCameraScript.prototype.onPlay = function () {
            };
            HoverCameraScript.prototype.start = function () {
                this.inputMgr = this.gameObject.transform.scene.app.getInputMgr();
                //点击事件
                this.inputMgr.addPointListener(m4m.event.PointEventEnum.PointDown, this.onPointDown, this);
                this.inputMgr.addPointListener(m4m.event.PointEventEnum.PointUp, this.onPointUp, this);
                this.inputMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onPointMove, this);
                this.inputMgr.addPointListener(m4m.event.PointEventEnum.MouseWheel, this.onWheel, this);
                this.inputMgr.addHTMLElementListener('touchstart', this.onTouch, this);
                this.inputMgr.addHTMLElementListener('touchmove', this.onTouchMove, this);
                this.inputMgr.addKeyListener(m4m.event.KeyEventEnum.KeyDown, this.onKeyDown, this);
                this.inputMgr.addKeyListener(m4m.event.KeyEventEnum.KeyUp, this.onKeyUp, this);
            };
            HoverCameraScript.prototype.update = function (delta) {
                var tiltRad = this._cur_tiltRad = m4m.math.numberLerp(this._cur_tiltRad, this._tiltRad, this.damping);
                var panRad = this._cur_panRad = m4m.math.numberLerp(this._cur_panRad, this._panRad, this.damping);
                var distanceX = this.distance * Math.sin(panRad) * Math.cos(tiltRad);
                var distanceY = this.distance * (tiltRad == 0 ? 0 : Math.sin(tiltRad));
                var distanceZ = this.distance * Math.cos(panRad) * Math.cos(tiltRad);
                if (this.lookAtTarget) {
                    m4m.math.vec3Clone(this.lookAtTarget.getWorldTranslate(), this.cupTargetV3);
                }
                else {
                    m4m.math.vec3Clone(this.lookAtPoint, this.cupTargetV3);
                }
                m4m.math.vec3Add(this.cupTargetV3, this.targetOffset, this.cupTargetV3);
                var tempv3 = m4m.math.pool.new_vector3(this.cupTargetV3.x + distanceX, this.cupTargetV3.y + distanceY, this.cupTargetV3.z + distanceZ);
                this.gameObject.transform.setWorldPosition(tempv3);
                this.gameObject.transform.lookatPoint(this.cupTargetV3);
                this.gameObject.transform.markDirty();
                m4m.math.pool.delete_vector3(tempv3);
            };
            HoverCameraScript.prototype.onKeyDown = function (_a) {
                var keyCode = _a[0];
                if (keyCode == m4m.event.KeyCode.KeyA) {
                    this.lookAtPoint.x -= 0.17;
                    this.cupTargetV3.x -= 0.17;
                }
                else if (keyCode == m4m.event.KeyCode.KeyD) {
                    this.lookAtPoint.x += 0.17;
                    this.cupTargetV3.x += 0.17;
                }
                if (keyCode == m4m.event.KeyCode.KeyS) {
                    this.lookAtPoint.z -= 0.17;
                    this.cupTargetV3.z -= 0.17;
                }
                else if (keyCode == m4m.event.KeyCode.KeyW) {
                    this.lookAtPoint.z += 0.17;
                    this.cupTargetV3.z += 0.17;
                }
                if (keyCode == m4m.event.KeyCode.F9) {
                    this.F9DragRotate = true;
                }
            };
            HoverCameraScript.prototype.onKeyUp = function (_a) {
                var keyCode = _a[0];
                if (keyCode == m4m.event.KeyCode.F11) {
                    this.F9DragRotate = false;
                }
            };
            HoverCameraScript.prototype.onPointDown = function () {
                this._mouseDown = true;
                this._lastMouseX = this.inputMgr.point.x;
                this._lastMouseY = this.inputMgr.point.y;
            };
            HoverCameraScript.prototype.onPointUp = function () {
                this._mouseDown = false;
            };
            HoverCameraScript.prototype.onPointMove = function () {
                if (!this._mouseDown)
                    return;
                var moveX = this.inputMgr.point.x - this._lastMouseX;
                var moveY = this.inputMgr.point.y - this._lastMouseY;
                if (moveX <= 2 && moveX >= -2)
                    moveX = 0;
                if (moveY <= 2 && moveY >= -1)
                    moveY = 0;
                if (this.inputMgr.isPressed(0)) {
                    if (this.F9DragRotate) {
                        this.panAngle += moveX * 0.5;
                        this.tiltAngle += moveY * 0.5;
                    }
                }
                else if (this.inputMgr.isPressed(1) || this.inputMgr.isPressed(2)) {
                    m4m.math.vec3Set(this.panDir, -moveX, moveY, 0);
                    m4m.math.vec3ScaleByNum(this.panDir, this.panSpeed, this.panDir);
                    m4m.math.quatTransformVector(this.gameObject.transform.localRotate, this.panDir, this.panDir);
                    m4m.math.vec3Add(this.targetOffset, this.panDir, this.targetOffset);
                    m4m.math.vec3Add(this.gameObject.transform.localPosition, this.panDir, this.gameObject.transform.localPosition);
                    this.gameObject.transform.markDirty();
                }
                this._lastMouseX = this.inputMgr.point.x;
                this._lastMouseY = this.inputMgr.point.y;
            };
            HoverCameraScript.prototype.onWheel = function () {
                this.distance = Math.max(this.distance - this.inputMgr.wheel * 2, 1);
            };
            HoverCameraScript.prototype.onTouch = function (ev) {
                var _this = this;
                if (ev.targetTouches.length == 1) {
                    var touch = this.inputMgr.touches[ev.targetTouches[0].identifier];
                    this.touchRotateID = ev.targetTouches[0].identifier;
                    m4m.math.vec2Set(this.lastTouch, touch.x, touch.y);
                }
                else if (ev.targetTouches.length == 2) {
                    var touches = [0, 1].map(function (i) {
                        return {
                            id: ev.targetTouches[i].identifier,
                            pos: __assign({}, _this.inputMgr.touches[ev.targetTouches[i].identifier]),
                        };
                    });
                    this.lastTouches = touches;
                }
            };
            HoverCameraScript.prototype.onTouchMove = function (ev) {
                var _this = this;
                var _b, _c;
                if (ev.targetTouches.length == 1) {
                    var touch = this.inputMgr.touches[ev.targetTouches[0].identifier];
                    if (this.touchRotateID == ev.targetTouches[0].identifier) {
                        m4m.math.vec2Set(this.diffv2, touch.x, touch.y);
                        m4m.math.vec2Subtract(this.diffv2, this.lastTouch, this.diffv2);
                        this.panAngle += (_b = this.diffv2.x / (window === null || window === void 0 ? void 0 : window.devicePixelRatio)) !== null && _b !== void 0 ? _b : 1;
                        this.tiltAngle += (_c = this.diffv2.y / (window === null || window === void 0 ? void 0 : window.devicePixelRatio)) !== null && _c !== void 0 ? _c : 1;
                    }
                    m4m.math.vec2Set(this.lastTouch, touch.x, touch.y);
                    this.touchRotateID = ev.targetTouches[0].identifier;
                }
                else if (ev.targetTouches.length == 2) {
                    var touch = this.inputMgr.touches[ev.changedTouches[0].identifier];
                    m4m.math.vec2Set(this.lastTouch, touch.x, touch.y);
                    var touches = [0, 1].map(function (i) {
                        return {
                            id: ev.targetTouches[i].identifier,
                            pos: __assign({}, _this.inputMgr.touches[ev.targetTouches[i].identifier]),
                        };
                    });
                    var deltas = touches.map(function (_b, i) {
                        var _c;
                        var id = _b.id, pos = _b.pos;
                        var lastpos = (_c = _this.lastTouches.filter(function (t) { return t.id == id; })[0]) === null || _c === void 0 ? void 0 : _c.pos;
                        if (lastpos) {
                            m4m.math.vec2Set(_this.panFingers[i], pos.x, pos.y);
                            m4m.math.vec2Set(_this.diffv2, lastpos.x, lastpos.y);
                            m4m.math.vec2Subtract(_this.panFingers[i], _this.diffv2, _this.panFingers[i]);
                            // m4m.math.vec2Normalize(this.panFingers[i], this.panFingers[i]);
                            return _this.panFingers[i];
                        }
                    });
                    if (deltas.length == 2) {
                        var dot = m4m.math.vec2Dot(deltas[0], deltas[1]);
                        if (dot < 0.2) {
                            var lastpos = this.lastTouches.map(function (_b) {
                                var pos = _b.pos;
                                return pos;
                            });
                            m4m.math.vec2Set(this.diffv2, lastpos[0].x - lastpos[1].x, lastpos[0].y - lastpos[1].y);
                            var dis = m4m.math.vec2Dot(this.diffv2, this.diffv2);
                            var dpos = touches.map(function (_b) {
                                var pos = _b.pos;
                                return pos;
                            });
                            m4m.math.vec2Set(this.diffv2, dpos[0].x - dpos[1].x, dpos[0].y - dpos[1].y);
                            dis -= m4m.math.vec2Dot(this.diffv2, this.diffv2);
                            this.distance = Math.max(this.distance + dis * 1e-5, 1);
                        }
                        else {
                            m4m.math.vec3Set(this.panDir, -this.panFingers[0].x, this.panFingers[0].y, 0);
                            m4m.math.vec3ScaleByNum(this.panDir, this.panSpeed, this.panDir);
                            m4m.math.quatTransformVector(this.gameObject.transform.localRotate, this.panDir, this.panDir);
                            m4m.math.vec3Add(this.targetOffset, this.panDir, this.targetOffset);
                            m4m.math.vec3Add(this.gameObject.transform.localPosition, this.panDir, this.gameObject.transform.localPosition);
                            this.gameObject.transform.markDirty();
                        }
                    }
                    this.lastTouches = touches;
                }
            };
            HoverCameraScript.prototype.remove = function () {
                this.inputMgr.removePointListener(m4m.event.PointEventEnum.PointDown, this.onPointDown, this);
                this.inputMgr.removePointListener(m4m.event.PointEventEnum.PointUp, this.onPointUp, this);
                this.inputMgr.removePointListener(m4m.event.PointEventEnum.PointMove, this.onPointMove, this);
                this.inputMgr.removePointListener(m4m.event.PointEventEnum.MouseWheel, this.onWheel, this);
            };
            __decorate([
                m4m.reflect.Field("reference", null, "transform")
            ], HoverCameraScript.prototype, "lookAtTarget", void 0);
            HoverCameraScript = __decorate([
                m4m.reflect.nodeComponent
            ], HoverCameraScript);
            return HoverCameraScript;
        }(m4m.framework.behaviour));
        framework.HoverCameraScript = HoverCameraScript;
    })(framework = m4m.framework || (m4m.framework = {}));
})(m4m || (m4m = {}));
//let helpv3 = new m4m.math.vector2();
/** 表面贴花生成器 */
var decalCreater = /** @class */ (function (_super) {
    __extends(decalCreater, _super);
    function decalCreater() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sizeN = 3;
        _this._offset = 0.05; //贴花 和 模型的间隔
        _this.tag_decalRoot = "__tag_decalRoot__"; //root 标记
        /** 贴花最大数量限制（每个模型） */
        _this.limitDecalMaxCount = 5;
        _this.size = new m4m.math.vector3();
        _this.wdir = new m4m.math.vector3();
        _this.rotate = new m4m.math.quaternion();
        _this.woffsetPos = new m4m.math.vector3();
        return _this;
    }
    decalCreater_1 = decalCreater;
    decalCreater.prototype.onPlay = function () {
        var _this = this;
        if (!this.camera)
            return;
        var meshF = this.targetMF;
        var mTran = meshF.gameObject.transform;
        var mMtx = mTran.getWorldMatrix();
        //test
        this.scene = this.gameObject.transform.scene;
        var app = this.scene.app;
        this.app = app;
        this._assetMgr = app.getAssetMgr();
        var iptMgr = app.getInputMgr();
        var pinfo = new m4m.framework.pickinfo();
        var tv2 = decalCreater_1.helpv2;
        //点击屏幕
        iptMgr.addPointListener(m4m.event.PointEventEnum.PointDown, function (_a) {
            var x = _a[0], y = _a[1];
            console.warn(" pos : ".concat(x, "_").concat(y));
            m4m.math.vec2Set(tv2, x, y);
            decalCreater_1.multipleViewFix(_this.camera, app, tv2, tv2);
            var ray = _this.camera.creatRayByScreen(tv2, app);
            var b = meshF.mesh.intersects(ray, mMtx, pinfo);
            if (!b)
                return;
            _this.sprayDecal(pinfo);
            // //计算旋转
            // this.calecWorldNormal(pinfo,meshF,wdir);
            // this.calecRoation(wdir,pinfo,rotate);
            // let cc = this.print(meshF,pinfo.hitposition,rotate,size);
            // //偏移
            // m4m.math.vec3ScaleByNum(wdir,this._offset,woffsetPos);
            // m4m.math.vec3Add(cc.localPosition,woffsetPos,cc.localPosition);
            // scene.addChild(cc);
        }, this);
    };
    decalCreater.prototype.update = function (delta) {
    };
    decalCreater.prototype.remove = function () {
    };
    /** 喷贴花 */
    decalCreater.prototype.sprayDecal = function (pinfo) {
        if (!pinfo || !this.targetMF)
            return;
        var meshF = this.targetMF;
        var mfTrans = meshF.gameObject.transform;
        var droot;
        var len = mfTrans.children.length;
        for (var i = 0; i < len; i++) {
            var c = mfTrans.children[i];
            if (c && c[this.tag_decalRoot]) {
                droot = c;
                break;
            }
            if (i == len - 1) {
                droot = new m4m.framework.transform();
                droot.name = "decalRoot";
                droot[this.tag_decalRoot] = true;
                mfTrans.addChildAt(droot, 0);
            }
        }
        var wdir = this.wdir;
        //计算旋转
        this.calecWorldNormal(pinfo, meshF, wdir);
        this.calecRoation(wdir, pinfo, this.rotate);
        m4m.math.vec3SetAll(this.size, this.sizeN);
        var cc = this.print(meshF, pinfo.hitposition, this.rotate, this.size);
        //偏移
        m4m.math.vec3ScaleByNum(wdir, this._offset, this.woffsetPos);
        m4m.math.vec3Add(cc.localPosition, this.woffsetPos, cc.localPosition);
        droot.addChild(cc);
        //设置到世界RTS
        cc.setWorldRotate(cc.localRotate);
        cc.setWorldScale(cc.localScale);
        cc.setWorldPosition(cc.localPosition);
        var clen = droot.children ? droot.children.length : 0;
        var limiMC = this.limitDecalMaxCount < 0 ? 0 : this.limitDecalMaxCount;
        if (clen > limiMC) {
            //清理器之前的
            var fristT = droot.children[0];
            droot.removeChild(fristT);
            fristT.dispose();
        }
    };
    /**
     * 印制贴花到世界中
     */
    decalCreater.prototype.print = function (meshF, position, orientation, size) {
        if (!this.app)
            return;
        var webgl = this.app.webgl;
        var d = new decalGeometry(meshF, position, orientation, size, webgl);
        d.meshF;
        var mr = d.meshF.gameObject.addComponent("meshRenderer");
        mr.materials = [];
        var mat;
        if (this.tempTex) {
            mat = this.tempTex.materials[0];
        }
        else {
            mr.materials[0] = new m4m.framework.material();
            mr.materials[0].setShader(this.app.getAssetMgr().getShader("diffuse.shader.json"));
            mr.materials[0].setTexture("_MainTex", this._assetMgr.getDefaultTexture("grid"));
        }
        mr.materials[0] = mat;
        return d.meshF.gameObject.transform;
    };
    decalCreater.prototype.calecWorldNormal = function (pinfo, mf, result) {
        var fid = pinfo.faceId;
        var md = mf.mesh.data;
        var trisIds = md.trisindex;
        var maseTran = mf.gameObject.transform;
        //目标三角形
        var p1 = md.pos[trisIds[fid * 3]];
        var p2 = md.pos[trisIds[fid * 3 + 1]];
        var p3 = md.pos[trisIds[fid * 3 + 2]];
        //计算 法向量
        var line_a = decalCreater_1.helpv3;
        m4m.math.vec3Subtract(p3, p1, line_a);
        var line_b = decalCreater_1.helpv3_1;
        m4m.math.vec3Subtract(p2, p1, line_b);
        var nor = decalCreater_1.helpv3_2;
        m4m.math.vec3Cross(line_a, line_b, nor);
        // m4m.math.vec3Normalize(nor,nor);
        var wmtx = maseTran.getWorldMatrix();
        //从mesh的方向 转到世界的方向
        m4m.math.matrixTransformNormal(nor, wmtx, nor);
        m4m.math.vec3Normalize(nor, result);
        // console.log(`nor  : ${nor.toString()}`);
    };
    decalCreater.prototype.calecRoation = function (dir, pinfo, result) {
        var lookpoint = decalCreater_1.helpv3;
        m4m.math.vec3Clone(dir, lookpoint);
        m4m.math.vec3ScaleByNum(lookpoint, 10, lookpoint);
        m4m.math.vec3Add(lookpoint, pinfo.hitposition, lookpoint);
        //lookat
        m4m.math.quatLookat(pinfo.hitposition, lookpoint, result);
        //随机一个 旋转
        var rAg = Math.random() * 360;
        m4m.math.quatFromAxisAngle(dir, rAg, decalCreater_1.helpqaut);
        m4m.math.quatMultiply(decalCreater_1.helpqaut, result, result);
    };
    decalCreater.multipleViewFix = function (_camera, app, screenPos, result) {
        var vp = _camera.viewport;
        var offset_x = app.width * vp.x;
        var offset_y = app.height * vp.y;
        m4m.math.vec2Clone(screenPos, result);
        result.x -= offset_x;
        result.y -= offset_y;
    };
    var decalCreater_1;
    decalCreater.helpv2 = new m4m.math.vector2();
    decalCreater.helpv3 = new m4m.math.vector3();
    decalCreater.helpv3_1 = new m4m.math.vector3();
    decalCreater.helpv3_2 = new m4m.math.vector3();
    decalCreater.helpv3_3 = new m4m.math.vector3();
    decalCreater.helpqaut = new m4m.math.quaternion();
    __decorate([
        m4m.reflect.Field("number")
    ], decalCreater.prototype, "sizeN", void 0);
    __decorate([
        m4m.reflect.Field("reference", null, "meshRenderer")
    ], decalCreater.prototype, "tempTex", void 0);
    __decorate([
        m4m.reflect.Field("reference", null, "camera")
    ], decalCreater.prototype, "camera", void 0);
    __decorate([
        m4m.reflect.Field("reference", null, "meshFilter")
    ], decalCreater.prototype, "targetMF", void 0);
    decalCreater = decalCreater_1 = __decorate([
        m4m.reflect.nodeComponent
    ], decalCreater);
    return decalCreater;
}(m4m.framework.behaviour));
/**
 * 贴花几何体
 */
var decalGeometry = /** @class */ (function () {
    function decalGeometry(tragetMeshf, position, orientation, size, webgl) {
        var _this = this;
        this.tragetMeshf = tragetMeshf;
        this.position = position;
        this.orientation = orientation;
        this.size = size;
        this.vertices = [];
        this.normals = [];
        this.uvs = [];
        // THREE.BufferGeometry.call( this );
        decalGeometry.id++;
        this.mesh = new m4m.framework.mesh("decalGeometry_".concat(decalGeometry.id));
        // buffers
        // this matrix represents the transformation of the decal projector
        var projectorMatrix = new m4m.math.matrix();
        this.projectorMatrix = projectorMatrix;
        m4m.math.quatToMatrix(orientation, projectorMatrix);
        // projectorMatrix.makeRotationFromEuler( orientation );
        projectorMatrix.rawData[12] = position.x;
        projectorMatrix.rawData[13] = position.y;
        projectorMatrix.rawData[14] = position.z;
        // projectorMatrix.setPosition( position );
        var projectorMatrixInverse = new m4m.math.matrix();
        this.projectorMatrixInverse = projectorMatrixInverse;
        m4m.math.matrixInverse(projectorMatrix, projectorMatrixInverse);
        // let projectorMatrixInverse = new m4m.math.matrix().getInverse( projectorMatrix );
        // // generate buffers
        this.generate();
        // build geometry
        this.mesh.data = new m4m.render.meshData();
        var vfm = m4m.render.VertexFormatMask;
        var vf = vfm.Position | vfm.UV0 | vfm.Color;
        if (!decalGeometry.onlyPostion) {
            var vf_1 = vfm.Position | vfm.Normal | vfm.UV0 | vfm.Color;
            this.mesh.data.normal = this.normals;
        }
        this.mesh.data.originVF = vf;
        this.mesh.data.pos = this.vertices;
        this.mesh.data.uv = this.uvs;
        this.mesh.data.trisindex = [];
        this.mesh.data.pos.forEach(function (p, i) {
            _this.mesh.data.trisindex.push(i);
        });
        // this.mesh.data.trisindex = [0,1,2,2,1,3];
        var vertexs = this.mesh.data.genVertexDataArray(vf);
        var indices = this.mesh.data.genIndexDataArray();
        this.mesh.glMesh = new m4m.render.glMesh();
        this.mesh.glMesh.initBuffer(webgl, vf, this.mesh.data.pos.length);
        this.mesh.glMesh.uploadVertexData(webgl, vertexs);
        this.mesh.glMesh.addIndex(webgl, indices.length);
        this.mesh.glMesh.uploadIndexData(webgl, 0, indices);
        this.mesh.glMesh.initVAO();
        //sub mesh
        this.mesh.submesh = [];
        var minfo = new m4m.framework.subMeshInfo();
        minfo = new m4m.framework.subMeshInfo();
        minfo.line = false;
        minfo.matIndex = 0;
        minfo.size = indices.length;
        minfo.start = 0;
        minfo.useVertexIndex = 0;
        this.mesh.submesh.push(minfo);
        var outTran = new m4m.framework.transform;
        this.meshF = outTran.gameObject.addComponent("meshFilter");
        this.meshF.mesh = this.mesh;
    }
    decalGeometry.prototype.generate = function () {
        var decalVertices = [];
        var vertex = new m4m.math.vector3();
        var normal = new m4m.math.vector3();
        // first, create an array of 'DecalVertex' objects
        // three consecutive 'DecalVertex' objects represent a single face
        //
        // this data structure will be later used to perform the clipping
        var meshData = this.tragetMeshf.mesh.data;
        var vLen = meshData.trisindex.length;
        for (var i = 0; i < vLen; i++) {
            var idx = meshData.trisindex[i];
            var p = m4m.math.pool.clone_vector3(meshData.pos[idx]);
            var n = void 0;
            if (!decalGeometry.onlyPostion)
                n = m4m.math.pool.clone_vector3(meshData.normal[idx]);
            this.pushDecalVertex(decalVertices, p, n);
        }
        // second, clip the geometry so that it doesn't extend out from the projector
        var len = decalGeometry.planes.length;
        for (var i = 0; i < len; i++) {
            var p = decalGeometry.planes[i];
            decalVertices = this.clipGeometry(decalVertices, p);
        }
        // third, generate final vertices, normals and uvs
        var dlen = decalVertices.length;
        for (var i = 0; i < dlen; i++) {
            var decalVertex = decalVertices[i];
            var dPos = decalVertex.position;
            var dNor = void 0;
            if (!decalGeometry.onlyPostion)
                dNor = decalVertex.normal;
            // create texture coordinates (we are still in projector space)
            var uv = new m4m.math.vector2(0.5 + (dPos.x / this.size.x), 0.5 + (dPos.y / this.size.y));
            this.uvs.push(uv);
            // transform the vertex back to world space
            m4m.math.matrixTransformVector3(decalVertex.position, this.projectorMatrix, decalVertex.position);
            // now create vertex and normal buffer data
            this.vertices.push(m4m.math.pool.clone_vector3(dPos));
            if (!decalGeometry.onlyPostion)
                this.normals.push(m4m.math.pool.clone_vector3(dNor));
        }
    };
    decalGeometry.prototype.pushDecalVertex = function (decalVertices, vertex, normal) {
        var pos = m4m.math.pool.clone_vector3(vertex);
        var nor;
        if (!decalGeometry.onlyPostion)
            nor = m4m.math.pool.clone_vector3(normal);
        // transform the vertex to world space, then to projector space
        var wmat = this.tragetMeshf.gameObject.transform.getWorldMatrix();
        m4m.math.matrixTransformVector3(pos, wmat, pos);
        m4m.math.matrixTransformVector3(pos, this.projectorMatrixInverse, pos);
        decalVertices.push(new DecalVertex(pos, nor));
    };
    decalGeometry.prototype.clipGeometry = function (inVertices, plane) {
        var outVertices = [];
        var s = 0.5 * Math.abs(m4m.math.vec3Dot(this.size, plane));
        // a single iteration clips one face,
        // which consists of three consecutive 'DecalVertex' objects
        for (var i = 0; i < inVertices.length; i += 3) {
            var v1Out = void 0, v2Out = void 0, v3Out = void 0, total = 0;
            var nV1 = void 0, nV2 = void 0, nV3 = void 0, nV4 = void 0;
            var d1 = m4m.math.vec3Dot(inVertices[i + 0].position, plane) - s;
            var d2 = m4m.math.vec3Dot(inVertices[i + 1].position, plane) - s;
            var d3 = m4m.math.vec3Dot(inVertices[i + 2].position, plane) - s;
            v1Out = d1 > 0;
            v2Out = d2 > 0;
            v3Out = d3 > 0;
            // calculate, how many vertices of the face lie outside of the clipping plane
            total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);
            switch (total) {
                case 0: {
                    // the entire face lies inside of the plane, no clipping needed
                    outVertices.push(inVertices[i]);
                    outVertices.push(inVertices[i + 1]);
                    outVertices.push(inVertices[i + 2]);
                    break;
                }
                case 1: {
                    // one vertex lies outside of the plane, perform clipping
                    if (v1Out) {
                        nV1 = inVertices[i + 1];
                        nV2 = inVertices[i + 2];
                        nV3 = this.clip(inVertices[i], nV1, plane, s);
                        nV4 = this.clip(inVertices[i], nV2, plane, s);
                    }
                    if (v2Out) {
                        nV1 = inVertices[i];
                        nV2 = inVertices[i + 2];
                        nV3 = this.clip(inVertices[i + 1], nV1, plane, s);
                        nV4 = this.clip(inVertices[i + 1], nV2, plane, s);
                        outVertices.push(nV3);
                        outVertices.push(nV2.clone());
                        outVertices.push(nV1.clone());
                        outVertices.push(nV2.clone());
                        outVertices.push(nV3.clone());
                        outVertices.push(nV4);
                        break;
                    }
                    if (v3Out) {
                        nV1 = inVertices[i];
                        nV2 = inVertices[i + 1];
                        nV3 = this.clip(inVertices[i + 2], nV1, plane, s);
                        nV4 = this.clip(inVertices[i + 2], nV2, plane, s);
                    }
                    outVertices.push(nV1.clone());
                    outVertices.push(nV2.clone());
                    outVertices.push(nV3);
                    outVertices.push(nV4);
                    outVertices.push(nV3.clone());
                    outVertices.push(nV2.clone());
                    break;
                }
                case 2: {
                    // two vertices lies outside of the plane, perform clipping
                    if (!v1Out) {
                        nV1 = inVertices[i].clone();
                        nV2 = this.clip(nV1, inVertices[i + 1], plane, s);
                        nV3 = this.clip(nV1, inVertices[i + 2], plane, s);
                        outVertices.push(nV1);
                        outVertices.push(nV2);
                        outVertices.push(nV3);
                    }
                    if (!v2Out) {
                        nV1 = inVertices[i + 1].clone();
                        nV2 = this.clip(nV1, inVertices[i + 2], plane, s);
                        nV3 = this.clip(nV1, inVertices[i], plane, s);
                        outVertices.push(nV1);
                        outVertices.push(nV2);
                        outVertices.push(nV3);
                    }
                    if (!v3Out) {
                        nV1 = inVertices[i + 2].clone();
                        nV2 = this.clip(nV1, inVertices[i], plane, s);
                        nV3 = this.clip(nV1, inVertices[i + 1], plane, s);
                        outVertices.push(nV1);
                        outVertices.push(nV2);
                        outVertices.push(nV3);
                    }
                    break;
                }
                case 3: {
                    // the entire face lies outside of the plane, so let's discard the corresponding vertices
                    break;
                }
            }
        }
        return outVertices;
    };
    decalGeometry.prototype.clip = function (v0, v1, p, s) {
        var d0 = m4m.math.vec3Dot(p, v0.position) - s;
        var d1 = m4m.math.vec3Dot(p, v1.position) - s;
        var s0 = d0 / (d0 - d1);
        var pos = new m4m.math.vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z));
        var nor;
        if (!decalGeometry.onlyPostion) {
            nor = new m4m.math.vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z));
        }
        var v = new DecalVertex(pos, nor);
        // need to clip more values (texture coordinates)? do it this way:
        return v;
    };
    decalGeometry.onlyPostion = false; //ignore more vertices data , example of normal ...
    decalGeometry.id = 0;
    decalGeometry.planes = [new m4m.math.vector3(1, 0, 0), new m4m.math.vector3(-1, 0, 0), new m4m.math.vector3(0, 1, 0),
        new m4m.math.vector3(0, -1, 0), new m4m.math.vector3(0, 0, 1), new m4m.math.vector3(0, 0, -1),];
    return decalGeometry;
}());
var DecalVertex = /** @class */ (function () {
    function DecalVertex(position, normal) {
        this.position = position;
        this.normal = normal;
    }
    DecalVertex.prototype.clone = function () {
        var pos = m4m.math.pool.clone_vector3(this.position);
        var nor;
        if (this.normal)
            nor = m4m.math.pool.clone_vector3(this.normal);
        return new DecalVertex(pos, nor);
    };
    return DecalVertex;
}());
/** 新手引导 遮罩 */
var guideMask = /** @class */ (function (_super) {
    __extends(guideMask, _super);
    function guideMask() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._holeRect = new m4m.math.rect(50, 50, 100, 100);
        _this.inited = false;
        _this.cells = [];
        return _this;
    }
    Object.defineProperty(guideMask.prototype, "holeRect", {
        //镂空矩形 (x,y,width,height)
        get: function () {
            return this._holeRect;
        },
        set: function (val) {
            m4m.math.rectClone(val, this._holeRect);
            this.refreshMask();
            console.error("set holeRect");
        },
        enumerable: false,
        configurable: true
    });
    guideMask.prototype.onPlay = function () {
        var _this = this;
        if (!this.template)
            return;
        var opt = m4m.framework.layoutOption;
        //clone ui
        this.top = this.template.clone();
        this.top.name = "top";
        this.bottom = this.template.clone();
        this.bottom.name = "bottom";
        this.left = this.template.clone();
        this.left.name = "left";
        this.right = this.template.clone();
        this.right.name = "right";
        this.cells.push(this.top, this.bottom, this.left, this.right);
        this.cells.forEach(function (sub) {
            sub.layoutState = opt.TOP | opt.BOTTOM | opt.LEFT | opt.RIGHT;
            sub.visible = true;
            _this.transform.addChild(sub);
        });
        this.inited = true;
        this.refreshMask();
    };
    guideMask.prototype.update = function (delta) {
    };
    guideMask.prototype.remove = function () {
        var len = this.cells.length;
        for (var i = 0; i < len; i++) {
            var sub = this.cells.pop();
            sub.dispose();
        }
        this.cells.length = 0;
        this.template.dispose();
        this.template = null;
        m4m.math.pool.delete_rect(this._holeRect);
        this._holeRect = null;
    };
    //刷新 mask
    guideMask.prototype.refreshMask = function () {
        if (!this.inited)
            return;
        this.cells.forEach(function (sub) { sub.visible = false; });
        console.error(this.cells.length);
        var opt = m4m.framework.layoutOption;
        var r = this._holeRect;
        var tran = this.transform;
        var pos = tran.localTranslate;
        var isFull = false;
        //top
        var topVal = 0;
        if (r.y > 0) {
            topVal = this.transform.height - r.y;
            this.top.setLayoutValue(opt.BOTTOM, topVal);
            this.top.markDirty();
            this.top.visible = true;
        }
        else {
            this.top.visible = false;
            isFull = true;
        }
        var bottomVal = 0;
        //bottom
        if (r.y + r.h < tran.height) {
            var height = r.h < 0 ? 0 : r.h;
            bottomVal = r.y + height;
            this.bottom.setLayoutValue(opt.TOP, bottomVal);
            this.bottom.markDirty();
            this.bottom.visible = true;
        }
        else {
            this.bottom.visible = false;
            isFull = true;
        }
        //left
        if (r.x > 0 && !isFull) {
            //ef top
            this.left.setLayoutValue(opt.BOTTOM, topVal);
            //ef bottom
            this.left.setLayoutValue(opt.TOP, bottomVal);
            var val = this.transform.width - r.x;
            this.left.setLayoutValue(opt.RIGHT, val);
            this.left.markDirty();
            this.left.visible = true;
        }
        else {
            this.left.visible = false;
        }
        //right
        if (r.x + r.w < tran.width && !isFull) {
            //ef top
            this.right.setLayoutValue(opt.BOTTOM, topVal);
            //ef bottom
            this.right.setLayoutValue(opt.TOP, bottomVal);
            var width = r.w < 0 ? 0 : r.w;
            var val = r.x + width;
            this.right.setLayoutValue(opt.LEFT, val);
            this.right.markDirty();
            this.right.visible = true;
        }
        else {
            this.right.visible = false;
        }
    };
    __decorate([
        m4m.reflect.Field("rect")
    ], guideMask.prototype, "holeRect", null);
    __decorate([
        m4m.reflect.Field("reference", null, "transform2D")
    ], guideMask.prototype, "template", void 0);
    guideMask = __decorate([
        m4m.reflect.node2DComponent
    ], guideMask);
    return guideMask;
}(m4m.framework.behaviour2d));
// declare let Promise;
/**
 * datGui 工具类
 *
 * dat使用教程 @see http://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage
 */
var datGui = /** @class */ (function () {
    function datGui() {
    }
    datGui.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadJs()];
                    case 1:
                        _a.sent();
                        this._inited = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    //加载 js
    datGui.loadJs = function () {
        var datUrl = "./lib/dat.gui.js";
        var p = new m4m.threading.gdPromise(function (resolve, reason) {
            m4m.io.loadText(datUrl, function (txt) {
                var isok = eval(txt);
                setTimeout(function () {
                    resolve();
                    console.warn(dat);
                }, 0);
            });
        });
        return p;
    };
    /** 使用样例 */
    datGui.example = function () {
        var FizzyText = function () {
            this.message = 'dat.gui';
            this.speed = 0.8;
            this.displayOutline = false;
            this.explode = function () { console.log("do explode"); };
            // Define render logic ...
        };
        var text = new FizzyText();
        var gui = new dat.GUI();
        gui.add(text, 'message');
        gui.add(text, 'speed', -5, 5);
        gui.add(text, 'displayOutline');
        gui.add(text, 'explode');
    };
    datGui._inited = false;
    return datGui;
}());
/** demo 工具 */
var demoTool = /** @class */ (function () {
    function demoTool() {
    }
    demoTool.loadbySync = function (url, astMgr) {
        return new m4m.threading.gdPromise(function (resolve, reject) {
            astMgr.load(url, m4m.framework.AssetTypeEnum.Auto, function (state) {
                if (state && state.isfinish) {
                    resolve();
                }
            });
        });
    };
    return demoTool;
}());
/** 3d物理 demo 工具 */
var physics3dDemoTool = /** @class */ (function () {
    function physics3dDemoTool() {
    }
    physics3dDemoTool.init = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        m4m.framework.assetMgr.openGuid = false;
                        this.app = app;
                        this.scene = this.app.getScene();
                        this.astMgr = this.app.getAssetMgr();
                        this.iptMgr = this.app.getInputMgr();
                        return [4 /*yield*/, demoTool.loadbySync("".concat(resRootPath, "shader/shader.assetbundle.json"), this.astMgr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, datGui.init()];
                    case 2:
                        _a.sent();
                        this.initMats();
                        this.initCamera();
                        return [2 /*return*/];
                }
            });
        });
    };
    // static loadbySync(url:string){
    //     return new m4m.threading.gdPromise<any>((resolve,reject)=>{
    //         this.astMgr.load(url,m4m.framework.AssetTypeEnum.Auto,(state)=>{
    //             if(state && state.isfinish){
    //                 resolve();
    //             }
    //         });
    //     });
    // }
    physics3dDemoTool.initMats = function () {
        //地板
        this.addMat("white", new m4m.math.vector4(1, 1, 1, 1));
        this.addMat("uvTest", new m4m.math.vector4(1, 1, 1, 1));
        //激活状态
        this.addMat("activated", new m4m.math.vector4(0.51, 0.39, 0.96, 1));
        //yellow
        this.addMat("yellow", new m4m.math.vector4(0.8, 0.8, 0, 1));
        //休眠状态
        this.addMat("sleeping", new m4m.math.vector4(0.4, 0.4, 0.4, 1));
        //purple
        this.addMat("purple", new m4m.math.vector4(0.8, 0, 0.8, 1));
    };
    physics3dDemoTool.initCamera = function () {
        //相机-----------------------------------
        var objCam = new m4m.framework.transform();
        objCam.name = "sth.";
        this.scene.addChild(objCam);
        this.camera = objCam.gameObject.addComponent("camera");
        this.camera.near = 0.01;
        this.camera.far = 120;
        this.camera.fov = Math.PI * 0.3;
        this.camera.backgroundColor = new m4m.math.color(0.3, 0.3, 0.3, 1);
        objCam.localTranslate = new m4m.math.vector3(0, 15, -15);
        objCam.lookatPoint(new m4m.math.vector3(0, 0, 0));
        var hoverc = this.camera.gameObject.addComponent("HoverCameraScript");
        hoverc.panAngle = 180;
        hoverc.tiltAngle = 45;
        hoverc.distance = 30;
        hoverc.scaleSpeed = 0.1;
        hoverc.lookAtPoint = new m4m.math.vector3(0, 2.5, 0);
        ////光;
        var light = new m4m.framework.transform();
        light.localRotate;
        m4m.math.quatFromEulerAngles(45, 10, 0, light.localRotate);
        light.name = "light";
        var lComp = light.gameObject.addComponent("light");
        lComp.type = m4m.framework.LightTypeEnum.Direction;
        this.scene.addChild(light);
    };
    physics3dDemoTool.addMat = function (name, color) {
        var _this = this;
        var mat = this.mats[name] = new m4m.framework.material(name);
        mat.setShader(this.astMgr.getShader("diffuse.shader.json"));
        mat.setVector4("_MainColor", color);
        if (name == "uvTest") {
            //
            var url = "".concat(resRootPath, "texture/uvTest.jpg");
            this.astMgr.load(url, m4m.framework.AssetTypeEnum.Texture, function (sta) {
                if (sta.isfinish) {
                    var t_4 = _this.astMgr.getAssetByName("uvTest.jpg");
                    mat.setTexture("_MainTex", t_4);
                }
            });
        }
    };
    physics3dDemoTool.attachMesh = function (tran, mat, meshName, isCompound) {
        var _this = this;
        if (isCompound === void 0) { isCompound = false; }
        var mf = tran.gameObject.getComponent("meshFilter");
        if (!mf)
            mf = tran.gameObject.addComponent("meshFilter");
        var mr = tran.gameObject.getComponent("meshRenderer");
        if (!mr)
            mr = tran.gameObject.addComponent("meshRenderer");
        mr.materials[0] = mat;
        mf.mesh = this.astMgr.getDefaultMesh(meshName);
        if (isCompound && tran.parent) {
            tran = tran.parent;
            tran[this.tag_isCompound] = true;
        }
        if (tran[this.tag_resFun])
            return;
        //RT cache
        tran[this.tag_pos] = m4m.math.pool.clone_vector3(tran.getWorldPosition());
        tran[this.tag_Rot] = m4m.math.pool.clone_quaternion(tran.getWorldRotate());
        tran[this.tag_resFun] = function () {
            //有物理 代理
            var phy = tran.physicsImpostor;
            if (phy) { //速度清理
                var lv = phy.physicsBody.linearVelocity;
                var gv = phy.physicsBody.angularVelocity;
                lv.x = lv.y = lv.z = gv.x = gv.y = gv.z = 0;
            }
            tran.setWorldPosition(tran[_this.tag_pos]);
            tran.setWorldRotate(tran[_this.tag_Rot]);
        };
        return mr;
    };
    //重置 复位
    physics3dDemoTool.resetObj = function (mrs) {
        var _this = this;
        mrs.forEach(function (mr) {
            if (mr) {
                var tran = mr.gameObject.transform;
                if (tran[_this.tag_resFun])
                    tran[_this.tag_resFun]();
            }
        });
    };
    physics3dDemoTool.ckBodySleeped = function (mrs) {
        var _this = this;
        mrs.forEach(function (mr) {
            if (mr && mr.gameObject.transform.physicsImpostor) {
                var tran = mr.gameObject.transform;
                var phy_1 = tran.physicsImpostor;
                if (phy_1[_this.lastsleepTag] == null || phy_1[_this.lastsleepTag] != phy_1.isSleeping) {
                    _this.cgDefMat(mr, phy_1.isSleeping);
                    if (mr.gameObject.transform[_this.tag_isCompound]) {
                        mr.gameObject.transform.children.forEach(function (sub) {
                            var smr = sub.gameObject.getComponent("meshRenderer");
                            _this.cgDefMat(smr, phy_1.isSleeping);
                        });
                    }
                }
                phy_1[_this.lastsleepTag] = phy_1.isSleeping;
            }
        });
    };
    physics3dDemoTool.cgDefMat = function (mr, isSleeping) {
        if (!mr)
            return;
        var tran = mr.gameObject.transform;
        if (!tran[this.defMatTag]) {
            tran[this.defMatTag] = mr.materials[0];
        }
        var mat = isSleeping ? physics3dDemoTool.mats["sleeping"] : tran[this.defMatTag];
        mr.materials[0] = mat;
    };
    physics3dDemoTool.mats = {};
    physics3dDemoTool.tag_isCompound = "__isCompound";
    physics3dDemoTool.tag_pos = "__reCachePos";
    physics3dDemoTool.tag_Rot = "__reCacheRot";
    physics3dDemoTool.tag_resFun = "__reCacheResFun";
    physics3dDemoTool.lastsleepTag = "_lastsleep_";
    physics3dDemoTool.defMatTag = "_defMat_";
    return physics3dDemoTool;
}());
